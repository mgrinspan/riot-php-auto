<?php
/**
 * ValContentV1ContentDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Riot API
 *
 * OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. ***
 *
 * OpenAPI spec version: b7cd9f901117fa03f7c4e5f9c0a954dac569f75a
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ValContentV1ContentDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ValContentV1ContentDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'val-content-v1.ContentDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'version' => 'string',
        'characters' => '\Swagger\Client\Model\ValContentV1ContentItemDto[]',
        'maps' => '\Swagger\Client\Model\ValContentV1ContentItemDto[]',
        'chromas' => '\Swagger\Client\Model\ValContentV1ContentItemDto[]',
        'skins' => '\Swagger\Client\Model\ValContentV1ContentItemDto[]',
        'skin_levels' => '\Swagger\Client\Model\ValContentV1ContentItemDto[]',
        'equips' => '\Swagger\Client\Model\ValContentV1ContentItemDto[]',
        'game_modes' => '\Swagger\Client\Model\ValContentV1ContentItemDto[]',
        'sprays' => '\Swagger\Client\Model\ValContentV1ContentItemDto[]',
        'spray_levels' => '\Swagger\Client\Model\ValContentV1ContentItemDto[]',
        'charms' => '\Swagger\Client\Model\ValContentV1ContentItemDto[]',
        'charm_levels' => '\Swagger\Client\Model\ValContentV1ContentItemDto[]',
        'player_cards' => '\Swagger\Client\Model\ValContentV1ContentItemDto[]',
        'player_titles' => '\Swagger\Client\Model\ValContentV1ContentItemDto[]',
        'acts' => '\Swagger\Client\Model\ValContentV1ActDto[]',
        'ceremonies' => '\Swagger\Client\Model\ValContentV1ContentItemDto[]',
        'totems' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'version' => null,
        'characters' => null,
        'maps' => null,
        'chromas' => null,
        'skins' => null,
        'skin_levels' => null,
        'equips' => null,
        'game_modes' => null,
        'sprays' => null,
        'spray_levels' => null,
        'charms' => null,
        'charm_levels' => null,
        'player_cards' => null,
        'player_titles' => null,
        'acts' => null,
        'ceremonies' => null,
        'totems' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'version' => 'version',
        'characters' => 'characters',
        'maps' => 'maps',
        'chromas' => 'chromas',
        'skins' => 'skins',
        'skin_levels' => 'skinLevels',
        'equips' => 'equips',
        'game_modes' => 'gameModes',
        'sprays' => 'sprays',
        'spray_levels' => 'sprayLevels',
        'charms' => 'charms',
        'charm_levels' => 'charmLevels',
        'player_cards' => 'playerCards',
        'player_titles' => 'playerTitles',
        'acts' => 'acts',
        'ceremonies' => 'ceremonies',
        'totems' => 'totems'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'version' => 'setVersion',
        'characters' => 'setCharacters',
        'maps' => 'setMaps',
        'chromas' => 'setChromas',
        'skins' => 'setSkins',
        'skin_levels' => 'setSkinLevels',
        'equips' => 'setEquips',
        'game_modes' => 'setGameModes',
        'sprays' => 'setSprays',
        'spray_levels' => 'setSprayLevels',
        'charms' => 'setCharms',
        'charm_levels' => 'setCharmLevels',
        'player_cards' => 'setPlayerCards',
        'player_titles' => 'setPlayerTitles',
        'acts' => 'setActs',
        'ceremonies' => 'setCeremonies',
        'totems' => 'setTotems'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'version' => 'getVersion',
        'characters' => 'getCharacters',
        'maps' => 'getMaps',
        'chromas' => 'getChromas',
        'skins' => 'getSkins',
        'skin_levels' => 'getSkinLevels',
        'equips' => 'getEquips',
        'game_modes' => 'getGameModes',
        'sprays' => 'getSprays',
        'spray_levels' => 'getSprayLevels',
        'charms' => 'getCharms',
        'charm_levels' => 'getCharmLevels',
        'player_cards' => 'getPlayerCards',
        'player_titles' => 'getPlayerTitles',
        'acts' => 'getActs',
        'ceremonies' => 'getCeremonies',
        'totems' => 'getTotems'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['characters'] = isset($data['characters']) ? $data['characters'] : null;
        $this->container['maps'] = isset($data['maps']) ? $data['maps'] : null;
        $this->container['chromas'] = isset($data['chromas']) ? $data['chromas'] : null;
        $this->container['skins'] = isset($data['skins']) ? $data['skins'] : null;
        $this->container['skin_levels'] = isset($data['skin_levels']) ? $data['skin_levels'] : null;
        $this->container['equips'] = isset($data['equips']) ? $data['equips'] : null;
        $this->container['game_modes'] = isset($data['game_modes']) ? $data['game_modes'] : null;
        $this->container['sprays'] = isset($data['sprays']) ? $data['sprays'] : null;
        $this->container['spray_levels'] = isset($data['spray_levels']) ? $data['spray_levels'] : null;
        $this->container['charms'] = isset($data['charms']) ? $data['charms'] : null;
        $this->container['charm_levels'] = isset($data['charm_levels']) ? $data['charm_levels'] : null;
        $this->container['player_cards'] = isset($data['player_cards']) ? $data['player_cards'] : null;
        $this->container['player_titles'] = isset($data['player_titles']) ? $data['player_titles'] : null;
        $this->container['acts'] = isset($data['acts']) ? $data['acts'] : null;
        $this->container['ceremonies'] = isset($data['ceremonies']) ? $data['ceremonies'] : null;
        $this->container['totems'] = isset($data['totems']) ? $data['totems'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        if ($this->container['characters'] === null) {
            $invalidProperties[] = "'characters' can't be null";
        }
        if ($this->container['maps'] === null) {
            $invalidProperties[] = "'maps' can't be null";
        }
        if ($this->container['chromas'] === null) {
            $invalidProperties[] = "'chromas' can't be null";
        }
        if ($this->container['skins'] === null) {
            $invalidProperties[] = "'skins' can't be null";
        }
        if ($this->container['skin_levels'] === null) {
            $invalidProperties[] = "'skin_levels' can't be null";
        }
        if ($this->container['equips'] === null) {
            $invalidProperties[] = "'equips' can't be null";
        }
        if ($this->container['game_modes'] === null) {
            $invalidProperties[] = "'game_modes' can't be null";
        }
        if ($this->container['sprays'] === null) {
            $invalidProperties[] = "'sprays' can't be null";
        }
        if ($this->container['spray_levels'] === null) {
            $invalidProperties[] = "'spray_levels' can't be null";
        }
        if ($this->container['charms'] === null) {
            $invalidProperties[] = "'charms' can't be null";
        }
        if ($this->container['charm_levels'] === null) {
            $invalidProperties[] = "'charm_levels' can't be null";
        }
        if ($this->container['player_cards'] === null) {
            $invalidProperties[] = "'player_cards' can't be null";
        }
        if ($this->container['player_titles'] === null) {
            $invalidProperties[] = "'player_titles' can't be null";
        }
        if ($this->container['acts'] === null) {
            $invalidProperties[] = "'acts' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets characters
     *
     * @return \Swagger\Client\Model\ValContentV1ContentItemDto[]
     */
    public function getCharacters()
    {
        return $this->container['characters'];
    }

    /**
     * Sets characters
     *
     * @param \Swagger\Client\Model\ValContentV1ContentItemDto[] $characters characters
     *
     * @return $this
     */
    public function setCharacters($characters)
    {
        $this->container['characters'] = $characters;

        return $this;
    }

    /**
     * Gets maps
     *
     * @return \Swagger\Client\Model\ValContentV1ContentItemDto[]
     */
    public function getMaps()
    {
        return $this->container['maps'];
    }

    /**
     * Sets maps
     *
     * @param \Swagger\Client\Model\ValContentV1ContentItemDto[] $maps maps
     *
     * @return $this
     */
    public function setMaps($maps)
    {
        $this->container['maps'] = $maps;

        return $this;
    }

    /**
     * Gets chromas
     *
     * @return \Swagger\Client\Model\ValContentV1ContentItemDto[]
     */
    public function getChromas()
    {
        return $this->container['chromas'];
    }

    /**
     * Sets chromas
     *
     * @param \Swagger\Client\Model\ValContentV1ContentItemDto[] $chromas chromas
     *
     * @return $this
     */
    public function setChromas($chromas)
    {
        $this->container['chromas'] = $chromas;

        return $this;
    }

    /**
     * Gets skins
     *
     * @return \Swagger\Client\Model\ValContentV1ContentItemDto[]
     */
    public function getSkins()
    {
        return $this->container['skins'];
    }

    /**
     * Sets skins
     *
     * @param \Swagger\Client\Model\ValContentV1ContentItemDto[] $skins skins
     *
     * @return $this
     */
    public function setSkins($skins)
    {
        $this->container['skins'] = $skins;

        return $this;
    }

    /**
     * Gets skin_levels
     *
     * @return \Swagger\Client\Model\ValContentV1ContentItemDto[]
     */
    public function getSkinLevels()
    {
        return $this->container['skin_levels'];
    }

    /**
     * Sets skin_levels
     *
     * @param \Swagger\Client\Model\ValContentV1ContentItemDto[] $skin_levels skin_levels
     *
     * @return $this
     */
    public function setSkinLevels($skin_levels)
    {
        $this->container['skin_levels'] = $skin_levels;

        return $this;
    }

    /**
     * Gets equips
     *
     * @return \Swagger\Client\Model\ValContentV1ContentItemDto[]
     */
    public function getEquips()
    {
        return $this->container['equips'];
    }

    /**
     * Sets equips
     *
     * @param \Swagger\Client\Model\ValContentV1ContentItemDto[] $equips equips
     *
     * @return $this
     */
    public function setEquips($equips)
    {
        $this->container['equips'] = $equips;

        return $this;
    }

    /**
     * Gets game_modes
     *
     * @return \Swagger\Client\Model\ValContentV1ContentItemDto[]
     */
    public function getGameModes()
    {
        return $this->container['game_modes'];
    }

    /**
     * Sets game_modes
     *
     * @param \Swagger\Client\Model\ValContentV1ContentItemDto[] $game_modes game_modes
     *
     * @return $this
     */
    public function setGameModes($game_modes)
    {
        $this->container['game_modes'] = $game_modes;

        return $this;
    }

    /**
     * Gets sprays
     *
     * @return \Swagger\Client\Model\ValContentV1ContentItemDto[]
     */
    public function getSprays()
    {
        return $this->container['sprays'];
    }

    /**
     * Sets sprays
     *
     * @param \Swagger\Client\Model\ValContentV1ContentItemDto[] $sprays sprays
     *
     * @return $this
     */
    public function setSprays($sprays)
    {
        $this->container['sprays'] = $sprays;

        return $this;
    }

    /**
     * Gets spray_levels
     *
     * @return \Swagger\Client\Model\ValContentV1ContentItemDto[]
     */
    public function getSprayLevels()
    {
        return $this->container['spray_levels'];
    }

    /**
     * Sets spray_levels
     *
     * @param \Swagger\Client\Model\ValContentV1ContentItemDto[] $spray_levels spray_levels
     *
     * @return $this
     */
    public function setSprayLevels($spray_levels)
    {
        $this->container['spray_levels'] = $spray_levels;

        return $this;
    }

    /**
     * Gets charms
     *
     * @return \Swagger\Client\Model\ValContentV1ContentItemDto[]
     */
    public function getCharms()
    {
        return $this->container['charms'];
    }

    /**
     * Sets charms
     *
     * @param \Swagger\Client\Model\ValContentV1ContentItemDto[] $charms charms
     *
     * @return $this
     */
    public function setCharms($charms)
    {
        $this->container['charms'] = $charms;

        return $this;
    }

    /**
     * Gets charm_levels
     *
     * @return \Swagger\Client\Model\ValContentV1ContentItemDto[]
     */
    public function getCharmLevels()
    {
        return $this->container['charm_levels'];
    }

    /**
     * Sets charm_levels
     *
     * @param \Swagger\Client\Model\ValContentV1ContentItemDto[] $charm_levels charm_levels
     *
     * @return $this
     */
    public function setCharmLevels($charm_levels)
    {
        $this->container['charm_levels'] = $charm_levels;

        return $this;
    }

    /**
     * Gets player_cards
     *
     * @return \Swagger\Client\Model\ValContentV1ContentItemDto[]
     */
    public function getPlayerCards()
    {
        return $this->container['player_cards'];
    }

    /**
     * Sets player_cards
     *
     * @param \Swagger\Client\Model\ValContentV1ContentItemDto[] $player_cards player_cards
     *
     * @return $this
     */
    public function setPlayerCards($player_cards)
    {
        $this->container['player_cards'] = $player_cards;

        return $this;
    }

    /**
     * Gets player_titles
     *
     * @return \Swagger\Client\Model\ValContentV1ContentItemDto[]
     */
    public function getPlayerTitles()
    {
        return $this->container['player_titles'];
    }

    /**
     * Sets player_titles
     *
     * @param \Swagger\Client\Model\ValContentV1ContentItemDto[] $player_titles player_titles
     *
     * @return $this
     */
    public function setPlayerTitles($player_titles)
    {
        $this->container['player_titles'] = $player_titles;

        return $this;
    }

    /**
     * Gets acts
     *
     * @return \Swagger\Client\Model\ValContentV1ActDto[]
     */
    public function getActs()
    {
        return $this->container['acts'];
    }

    /**
     * Sets acts
     *
     * @param \Swagger\Client\Model\ValContentV1ActDto[] $acts acts
     *
     * @return $this
     */
    public function setActs($acts)
    {
        $this->container['acts'] = $acts;

        return $this;
    }

    /**
     * Gets ceremonies
     *
     * @return \Swagger\Client\Model\ValContentV1ContentItemDto[]
     */
    public function getCeremonies()
    {
        return $this->container['ceremonies'];
    }

    /**
     * Sets ceremonies
     *
     * @param \Swagger\Client\Model\ValContentV1ContentItemDto[] $ceremonies ceremonies
     *
     * @return $this
     */
    public function setCeremonies($ceremonies)
    {
        $this->container['ceremonies'] = $ceremonies;

        return $this;
    }

    /**
     * Gets totems
     *
     * @return string[]
     */
    public function getTotems()
    {
        return $this->container['totems'];
    }

    /**
     * Sets totems
     *
     * @param string[] $totems Unknown type, this is a placeholder subject to change.
     *
     * @return $this
     */
    public function setTotems($totems)
    {
        $this->container['totems'] = $totems;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


