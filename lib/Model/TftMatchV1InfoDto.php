<?php
/**
 * TftMatchV1InfoDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Riot API
 *
 * OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. ***
 *
 * OpenAPI spec version: b7cd9f901117fa03f7c4e5f9c0a954dac569f75a
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TftMatchV1InfoDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TftMatchV1InfoDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'tft-match-v1.InfoDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'game_datetime' => 'int',
        'game_length' => 'float',
        'game_variation' => 'string',
        'game_version' => 'string',
        'participants' => '\Swagger\Client\Model\TftMatchV1ParticipantDto[]',
        'queue_id' => 'int',
        'tft_set_number' => 'int',
        'tft_game_type' => 'string',
        'tft_set_core_name' => 'string',
        'end_of_game_result' => 'string',
        'game_creation' => 'int',
        'game_id' => 'int',
        'map_id' => 'int',
        'queue_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'game_datetime' => 'int64',
        'game_length' => 'float',
        'game_variation' => null,
        'game_version' => null,
        'participants' => null,
        'queue_id' => 'int32',
        'tft_set_number' => 'int32',
        'tft_game_type' => null,
        'tft_set_core_name' => null,
        'end_of_game_result' => null,
        'game_creation' => 'int64',
        'game_id' => 'int64',
        'map_id' => 'int64',
        'queue_id' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'game_datetime' => 'game_datetime',
        'game_length' => 'game_length',
        'game_variation' => 'game_variation',
        'game_version' => 'game_version',
        'participants' => 'participants',
        'queue_id' => 'queue_id',
        'tft_set_number' => 'tft_set_number',
        'tft_game_type' => 'tft_game_type',
        'tft_set_core_name' => 'tft_set_core_name',
        'end_of_game_result' => 'endOfGameResult',
        'game_creation' => 'gameCreation',
        'game_id' => 'gameId',
        'map_id' => 'mapId',
        'queue_id' => 'queueId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'game_datetime' => 'setGameDatetime',
        'game_length' => 'setGameLength',
        'game_variation' => 'setGameVariation',
        'game_version' => 'setGameVersion',
        'participants' => 'setParticipants',
        'queue_id' => 'setQueueId',
        'tft_set_number' => 'setTftSetNumber',
        'tft_game_type' => 'setTftGameType',
        'tft_set_core_name' => 'setTftSetCoreName',
        'end_of_game_result' => 'setEndOfGameResult',
        'game_creation' => 'setGameCreation',
        'game_id' => 'setGameId',
        'map_id' => 'setMapId',
        'queue_id' => 'setQueueId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'game_datetime' => 'getGameDatetime',
        'game_length' => 'getGameLength',
        'game_variation' => 'getGameVariation',
        'game_version' => 'getGameVersion',
        'participants' => 'getParticipants',
        'queue_id' => 'getQueueId',
        'tft_set_number' => 'getTftSetNumber',
        'tft_game_type' => 'getTftGameType',
        'tft_set_core_name' => 'getTftSetCoreName',
        'end_of_game_result' => 'getEndOfGameResult',
        'game_creation' => 'getGameCreation',
        'game_id' => 'getGameId',
        'map_id' => 'getMapId',
        'queue_id' => 'getQueueId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['game_datetime'] = isset($data['game_datetime']) ? $data['game_datetime'] : null;
        $this->container['game_length'] = isset($data['game_length']) ? $data['game_length'] : null;
        $this->container['game_variation'] = isset($data['game_variation']) ? $data['game_variation'] : null;
        $this->container['game_version'] = isset($data['game_version']) ? $data['game_version'] : null;
        $this->container['participants'] = isset($data['participants']) ? $data['participants'] : null;
        $this->container['queue_id'] = isset($data['queue_id']) ? $data['queue_id'] : null;
        $this->container['tft_set_number'] = isset($data['tft_set_number']) ? $data['tft_set_number'] : null;
        $this->container['tft_game_type'] = isset($data['tft_game_type']) ? $data['tft_game_type'] : null;
        $this->container['tft_set_core_name'] = isset($data['tft_set_core_name']) ? $data['tft_set_core_name'] : null;
        $this->container['end_of_game_result'] = isset($data['end_of_game_result']) ? $data['end_of_game_result'] : null;
        $this->container['game_creation'] = isset($data['game_creation']) ? $data['game_creation'] : null;
        $this->container['game_id'] = isset($data['game_id']) ? $data['game_id'] : null;
        $this->container['map_id'] = isset($data['map_id']) ? $data['map_id'] : null;
        $this->container['queue_id'] = isset($data['queue_id']) ? $data['queue_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['game_datetime'] === null) {
            $invalidProperties[] = "'game_datetime' can't be null";
        }
        if ($this->container['game_length'] === null) {
            $invalidProperties[] = "'game_length' can't be null";
        }
        if ($this->container['game_version'] === null) {
            $invalidProperties[] = "'game_version' can't be null";
        }
        if ($this->container['participants'] === null) {
            $invalidProperties[] = "'participants' can't be null";
        }
        if ($this->container['queue_id'] === null) {
            $invalidProperties[] = "'queue_id' can't be null";
        }
        if ($this->container['tft_set_number'] === null) {
            $invalidProperties[] = "'tft_set_number' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets game_datetime
     *
     * @return int
     */
    public function getGameDatetime()
    {
        return $this->container['game_datetime'];
    }

    /**
     * Sets game_datetime
     *
     * @param int $game_datetime Unix timestamp.
     *
     * @return $this
     */
    public function setGameDatetime($game_datetime)
    {
        $this->container['game_datetime'] = $game_datetime;

        return $this;
    }

    /**
     * Gets game_length
     *
     * @return float
     */
    public function getGameLength()
    {
        return $this->container['game_length'];
    }

    /**
     * Sets game_length
     *
     * @param float $game_length Game length in seconds.
     *
     * @return $this
     */
    public function setGameLength($game_length)
    {
        $this->container['game_length'] = $game_length;

        return $this;
    }

    /**
     * Gets game_variation
     *
     * @return string
     */
    public function getGameVariation()
    {
        return $this->container['game_variation'];
    }

    /**
     * Sets game_variation
     *
     * @param string $game_variation Game variation key. Game variations documented in TFT static data.
     *
     * @return $this
     */
    public function setGameVariation($game_variation)
    {
        $this->container['game_variation'] = $game_variation;

        return $this;
    }

    /**
     * Gets game_version
     *
     * @return string
     */
    public function getGameVersion()
    {
        return $this->container['game_version'];
    }

    /**
     * Sets game_version
     *
     * @param string $game_version Game client version.
     *
     * @return $this
     */
    public function setGameVersion($game_version)
    {
        $this->container['game_version'] = $game_version;

        return $this;
    }

    /**
     * Gets participants
     *
     * @return \Swagger\Client\Model\TftMatchV1ParticipantDto[]
     */
    public function getParticipants()
    {
        return $this->container['participants'];
    }

    /**
     * Sets participants
     *
     * @param \Swagger\Client\Model\TftMatchV1ParticipantDto[] $participants participants
     *
     * @return $this
     */
    public function setParticipants($participants)
    {
        $this->container['participants'] = $participants;

        return $this;
    }

    /**
     * Gets queue_id
     *
     * @return int
     */
    public function getQueueId()
    {
        return $this->container['queue_id'];
    }

    /**
     * Sets queue_id
     *
     * @param int $queue_id Please refer to the League of Legends documentation.
     *
     * @return $this
     */
    public function setQueueId($queue_id)
    {
        $this->container['queue_id'] = $queue_id;

        return $this;
    }

    /**
     * Gets tft_set_number
     *
     * @return int
     */
    public function getTftSetNumber()
    {
        return $this->container['tft_set_number'];
    }

    /**
     * Sets tft_set_number
     *
     * @param int $tft_set_number Teamfight Tactics set number.
     *
     * @return $this
     */
    public function setTftSetNumber($tft_set_number)
    {
        $this->container['tft_set_number'] = $tft_set_number;

        return $this;
    }

    /**
     * Gets tft_game_type
     *
     * @return string
     */
    public function getTftGameType()
    {
        return $this->container['tft_game_type'];
    }

    /**
     * Sets tft_game_type
     *
     * @param string $tft_game_type tft_game_type
     *
     * @return $this
     */
    public function setTftGameType($tft_game_type)
    {
        $this->container['tft_game_type'] = $tft_game_type;

        return $this;
    }

    /**
     * Gets tft_set_core_name
     *
     * @return string
     */
    public function getTftSetCoreName()
    {
        return $this->container['tft_set_core_name'];
    }

    /**
     * Sets tft_set_core_name
     *
     * @param string $tft_set_core_name tft_set_core_name
     *
     * @return $this
     */
    public function setTftSetCoreName($tft_set_core_name)
    {
        $this->container['tft_set_core_name'] = $tft_set_core_name;

        return $this;
    }

    /**
     * Gets end_of_game_result
     *
     * @return string
     */
    public function getEndOfGameResult()
    {
        return $this->container['end_of_game_result'];
    }

    /**
     * Sets end_of_game_result
     *
     * @param string $end_of_game_result end_of_game_result
     *
     * @return $this
     */
    public function setEndOfGameResult($end_of_game_result)
    {
        $this->container['end_of_game_result'] = $end_of_game_result;

        return $this;
    }

    /**
     * Gets game_creation
     *
     * @return int
     */
    public function getGameCreation()
    {
        return $this->container['game_creation'];
    }

    /**
     * Sets game_creation
     *
     * @param int $game_creation game_creation
     *
     * @return $this
     */
    public function setGameCreation($game_creation)
    {
        $this->container['game_creation'] = $game_creation;

        return $this;
    }

    /**
     * Gets game_id
     *
     * @return int
     */
    public function getGameId()
    {
        return $this->container['game_id'];
    }

    /**
     * Sets game_id
     *
     * @param int $game_id game_id
     *
     * @return $this
     */
    public function setGameId($game_id)
    {
        $this->container['game_id'] = $game_id;

        return $this;
    }

    /**
     * Gets map_id
     *
     * @return int
     */
    public function getMapId()
    {
        return $this->container['map_id'];
    }

    /**
     * Sets map_id
     *
     * @param int $map_id map_id
     *
     * @return $this
     */
    public function setMapId($map_id)
    {
        $this->container['map_id'] = $map_id;

        return $this;
    }

    /**
     * Gets queue_id
     *
     * @return int
     */
    public function getQueueId()
    {
        return $this->container['queue_id'];
    }

    /**
     * Sets queue_id
     *
     * @param int $queue_id Please refer to the League of Legends documentation.
     *
     * @return $this
     */
    public function setQueueId($queue_id)
    {
        $this->container['queue_id'] = $queue_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


