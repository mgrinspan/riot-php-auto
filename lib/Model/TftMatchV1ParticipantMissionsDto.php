<?php
/**
 * TftMatchV1ParticipantMissionsDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Riot API
 *
 * OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. ***
 *
 * OpenAPI spec version: b7cd9f901117fa03f7c4e5f9c0a954dac569f75a
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TftMatchV1ParticipantMissionsDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TftMatchV1ParticipantMissionsDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'tft-match-v1.ParticipantMissionsDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'assists' => 'int',
        'damage_dealt' => 'int',
        'damage_dealt_to_objectives' => 'int',
        'damage_dealt_to_turrets' => 'int',
        'damage_taken' => 'int',
        'double_kills' => 'int',
        'gold_earned' => 'int',
        'gold_spent' => 'int',
        'inhibitors_destroyed' => 'int',
        'kills' => 'int',
        'largest_killing_spree' => 'int',
        'largest_multi_kill' => 'int',
        'magic_damage_dealt' => 'int',
        'magic_damage_dealt_to_champions' => 'int',
        'neutral_minions_killed_team_jungle' => 'int',
        'physical_damage_dealt' => 'int',
        'physical_damage_taken' => 'int',
        'player_score0' => 'int',
        'player_score1' => 'int',
        'player_score2' => 'int',
        'player_score3' => 'int',
        'player_score4' => 'int',
        'player_score5' => 'int',
        'player_score6' => 'int',
        'player_score9' => 'int',
        'player_score10' => 'int',
        'player_score11' => 'int',
        'quadra_kills' => 'int',
        'spell1_casts' => 'int',
        'spell2_casts' => 'int',
        'spell3_casts' => 'int',
        'spell4_casts' => 'int',
        'summoner_spell1_casts' => 'int',
        'time_cc_others' => 'int',
        'total_minions_killed' => 'int',
        'true_damage_dealt_to_champions' => 'int',
        'unreal_kills' => 'int',
        'vision_score' => 'int',
        'wards_killed' => 'int',
        'deaths' => 'int',
        'killing_sprees' => 'int',
        'magic_damage_taken' => 'int',
        'penta_kills' => 'int',
        'physical_damage_dealt_to_champions' => 'int',
        'total_damage_dealt_to_champions' => 'int',
        'triple_kills' => 'int',
        'true_damage_dealt' => 'int',
        'true_damage_taken' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'assists' => 'int32',
        'damage_dealt' => 'int32',
        'damage_dealt_to_objectives' => 'int32',
        'damage_dealt_to_turrets' => 'int32',
        'damage_taken' => 'int32',
        'double_kills' => 'int32',
        'gold_earned' => 'int32',
        'gold_spent' => 'int32',
        'inhibitors_destroyed' => 'int32',
        'kills' => 'int32',
        'largest_killing_spree' => 'int32',
        'largest_multi_kill' => 'int32',
        'magic_damage_dealt' => 'int32',
        'magic_damage_dealt_to_champions' => 'int32',
        'neutral_minions_killed_team_jungle' => 'int32',
        'physical_damage_dealt' => 'int32',
        'physical_damage_taken' => 'int32',
        'player_score0' => 'int32',
        'player_score1' => 'int32',
        'player_score2' => 'int32',
        'player_score3' => 'int32',
        'player_score4' => 'int32',
        'player_score5' => 'int32',
        'player_score6' => 'int32',
        'player_score9' => 'int32',
        'player_score10' => 'int32',
        'player_score11' => 'int32',
        'quadra_kills' => 'int32',
        'spell1_casts' => 'int32',
        'spell2_casts' => 'int32',
        'spell3_casts' => 'int32',
        'spell4_casts' => 'int32',
        'summoner_spell1_casts' => 'int32',
        'time_cc_others' => 'int32',
        'total_minions_killed' => 'int32',
        'true_damage_dealt_to_champions' => 'int32',
        'unreal_kills' => 'int32',
        'vision_score' => 'int32',
        'wards_killed' => 'int32',
        'deaths' => 'int32',
        'killing_sprees' => 'int32',
        'magic_damage_taken' => 'int32',
        'penta_kills' => 'int32',
        'physical_damage_dealt_to_champions' => 'int32',
        'total_damage_dealt_to_champions' => 'int32',
        'triple_kills' => 'int32',
        'true_damage_dealt' => 'int32',
        'true_damage_taken' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'assists' => 'Assists',
        'damage_dealt' => 'DamageDealt',
        'damage_dealt_to_objectives' => 'DamageDealtToObjectives',
        'damage_dealt_to_turrets' => 'DamageDealtToTurrets',
        'damage_taken' => 'DamageTaken',
        'double_kills' => 'DoubleKills',
        'gold_earned' => 'GoldEarned',
        'gold_spent' => 'GoldSpent',
        'inhibitors_destroyed' => 'InhibitorsDestroyed',
        'kills' => 'Kills',
        'largest_killing_spree' => 'LargestKillingSpree',
        'largest_multi_kill' => 'LargestMultiKill',
        'magic_damage_dealt' => 'MagicDamageDealt',
        'magic_damage_dealt_to_champions' => 'MagicDamageDealtToChampions',
        'neutral_minions_killed_team_jungle' => 'NeutralMinionsKilledTeamJungle',
        'physical_damage_dealt' => 'PhysicalDamageDealt',
        'physical_damage_taken' => 'PhysicalDamageTaken',
        'player_score0' => 'PlayerScore0',
        'player_score1' => 'PlayerScore1',
        'player_score2' => 'PlayerScore2',
        'player_score3' => 'PlayerScore3',
        'player_score4' => 'PlayerScore4',
        'player_score5' => 'PlayerScore5',
        'player_score6' => 'PlayerScore6',
        'player_score9' => 'PlayerScore9',
        'player_score10' => 'PlayerScore10',
        'player_score11' => 'PlayerScore11',
        'quadra_kills' => 'QuadraKills',
        'spell1_casts' => 'Spell1Casts',
        'spell2_casts' => 'Spell2Casts',
        'spell3_casts' => 'Spell3Casts',
        'spell4_casts' => 'Spell4Casts',
        'summoner_spell1_casts' => 'SummonerSpell1Casts',
        'time_cc_others' => 'TimeCCOthers',
        'total_minions_killed' => 'TotalMinionsKilled',
        'true_damage_dealt_to_champions' => 'TrueDamageDealtToChampions',
        'unreal_kills' => 'UnrealKills',
        'vision_score' => 'VisionScore',
        'wards_killed' => 'WardsKilled',
        'deaths' => 'Deaths',
        'killing_sprees' => 'KillingSprees',
        'magic_damage_taken' => 'MagicDamageTaken',
        'penta_kills' => 'PentaKills',
        'physical_damage_dealt_to_champions' => 'PhysicalDamageDealtToChampions',
        'total_damage_dealt_to_champions' => 'TotalDamageDealtToChampions',
        'triple_kills' => 'TripleKills',
        'true_damage_dealt' => 'TrueDamageDealt',
        'true_damage_taken' => 'TrueDamageTaken'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'assists' => 'setAssists',
        'damage_dealt' => 'setDamageDealt',
        'damage_dealt_to_objectives' => 'setDamageDealtToObjectives',
        'damage_dealt_to_turrets' => 'setDamageDealtToTurrets',
        'damage_taken' => 'setDamageTaken',
        'double_kills' => 'setDoubleKills',
        'gold_earned' => 'setGoldEarned',
        'gold_spent' => 'setGoldSpent',
        'inhibitors_destroyed' => 'setInhibitorsDestroyed',
        'kills' => 'setKills',
        'largest_killing_spree' => 'setLargestKillingSpree',
        'largest_multi_kill' => 'setLargestMultiKill',
        'magic_damage_dealt' => 'setMagicDamageDealt',
        'magic_damage_dealt_to_champions' => 'setMagicDamageDealtToChampions',
        'neutral_minions_killed_team_jungle' => 'setNeutralMinionsKilledTeamJungle',
        'physical_damage_dealt' => 'setPhysicalDamageDealt',
        'physical_damage_taken' => 'setPhysicalDamageTaken',
        'player_score0' => 'setPlayerScore0',
        'player_score1' => 'setPlayerScore1',
        'player_score2' => 'setPlayerScore2',
        'player_score3' => 'setPlayerScore3',
        'player_score4' => 'setPlayerScore4',
        'player_score5' => 'setPlayerScore5',
        'player_score6' => 'setPlayerScore6',
        'player_score9' => 'setPlayerScore9',
        'player_score10' => 'setPlayerScore10',
        'player_score11' => 'setPlayerScore11',
        'quadra_kills' => 'setQuadraKills',
        'spell1_casts' => 'setSpell1Casts',
        'spell2_casts' => 'setSpell2Casts',
        'spell3_casts' => 'setSpell3Casts',
        'spell4_casts' => 'setSpell4Casts',
        'summoner_spell1_casts' => 'setSummonerSpell1Casts',
        'time_cc_others' => 'setTimeCcOthers',
        'total_minions_killed' => 'setTotalMinionsKilled',
        'true_damage_dealt_to_champions' => 'setTrueDamageDealtToChampions',
        'unreal_kills' => 'setUnrealKills',
        'vision_score' => 'setVisionScore',
        'wards_killed' => 'setWardsKilled',
        'deaths' => 'setDeaths',
        'killing_sprees' => 'setKillingSprees',
        'magic_damage_taken' => 'setMagicDamageTaken',
        'penta_kills' => 'setPentaKills',
        'physical_damage_dealt_to_champions' => 'setPhysicalDamageDealtToChampions',
        'total_damage_dealt_to_champions' => 'setTotalDamageDealtToChampions',
        'triple_kills' => 'setTripleKills',
        'true_damage_dealt' => 'setTrueDamageDealt',
        'true_damage_taken' => 'setTrueDamageTaken'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'assists' => 'getAssists',
        'damage_dealt' => 'getDamageDealt',
        'damage_dealt_to_objectives' => 'getDamageDealtToObjectives',
        'damage_dealt_to_turrets' => 'getDamageDealtToTurrets',
        'damage_taken' => 'getDamageTaken',
        'double_kills' => 'getDoubleKills',
        'gold_earned' => 'getGoldEarned',
        'gold_spent' => 'getGoldSpent',
        'inhibitors_destroyed' => 'getInhibitorsDestroyed',
        'kills' => 'getKills',
        'largest_killing_spree' => 'getLargestKillingSpree',
        'largest_multi_kill' => 'getLargestMultiKill',
        'magic_damage_dealt' => 'getMagicDamageDealt',
        'magic_damage_dealt_to_champions' => 'getMagicDamageDealtToChampions',
        'neutral_minions_killed_team_jungle' => 'getNeutralMinionsKilledTeamJungle',
        'physical_damage_dealt' => 'getPhysicalDamageDealt',
        'physical_damage_taken' => 'getPhysicalDamageTaken',
        'player_score0' => 'getPlayerScore0',
        'player_score1' => 'getPlayerScore1',
        'player_score2' => 'getPlayerScore2',
        'player_score3' => 'getPlayerScore3',
        'player_score4' => 'getPlayerScore4',
        'player_score5' => 'getPlayerScore5',
        'player_score6' => 'getPlayerScore6',
        'player_score9' => 'getPlayerScore9',
        'player_score10' => 'getPlayerScore10',
        'player_score11' => 'getPlayerScore11',
        'quadra_kills' => 'getQuadraKills',
        'spell1_casts' => 'getSpell1Casts',
        'spell2_casts' => 'getSpell2Casts',
        'spell3_casts' => 'getSpell3Casts',
        'spell4_casts' => 'getSpell4Casts',
        'summoner_spell1_casts' => 'getSummonerSpell1Casts',
        'time_cc_others' => 'getTimeCcOthers',
        'total_minions_killed' => 'getTotalMinionsKilled',
        'true_damage_dealt_to_champions' => 'getTrueDamageDealtToChampions',
        'unreal_kills' => 'getUnrealKills',
        'vision_score' => 'getVisionScore',
        'wards_killed' => 'getWardsKilled',
        'deaths' => 'getDeaths',
        'killing_sprees' => 'getKillingSprees',
        'magic_damage_taken' => 'getMagicDamageTaken',
        'penta_kills' => 'getPentaKills',
        'physical_damage_dealt_to_champions' => 'getPhysicalDamageDealtToChampions',
        'total_damage_dealt_to_champions' => 'getTotalDamageDealtToChampions',
        'triple_kills' => 'getTripleKills',
        'true_damage_dealt' => 'getTrueDamageDealt',
        'true_damage_taken' => 'getTrueDamageTaken'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['assists'] = isset($data['assists']) ? $data['assists'] : null;
        $this->container['damage_dealt'] = isset($data['damage_dealt']) ? $data['damage_dealt'] : null;
        $this->container['damage_dealt_to_objectives'] = isset($data['damage_dealt_to_objectives']) ? $data['damage_dealt_to_objectives'] : null;
        $this->container['damage_dealt_to_turrets'] = isset($data['damage_dealt_to_turrets']) ? $data['damage_dealt_to_turrets'] : null;
        $this->container['damage_taken'] = isset($data['damage_taken']) ? $data['damage_taken'] : null;
        $this->container['double_kills'] = isset($data['double_kills']) ? $data['double_kills'] : null;
        $this->container['gold_earned'] = isset($data['gold_earned']) ? $data['gold_earned'] : null;
        $this->container['gold_spent'] = isset($data['gold_spent']) ? $data['gold_spent'] : null;
        $this->container['inhibitors_destroyed'] = isset($data['inhibitors_destroyed']) ? $data['inhibitors_destroyed'] : null;
        $this->container['kills'] = isset($data['kills']) ? $data['kills'] : null;
        $this->container['largest_killing_spree'] = isset($data['largest_killing_spree']) ? $data['largest_killing_spree'] : null;
        $this->container['largest_multi_kill'] = isset($data['largest_multi_kill']) ? $data['largest_multi_kill'] : null;
        $this->container['magic_damage_dealt'] = isset($data['magic_damage_dealt']) ? $data['magic_damage_dealt'] : null;
        $this->container['magic_damage_dealt_to_champions'] = isset($data['magic_damage_dealt_to_champions']) ? $data['magic_damage_dealt_to_champions'] : null;
        $this->container['neutral_minions_killed_team_jungle'] = isset($data['neutral_minions_killed_team_jungle']) ? $data['neutral_minions_killed_team_jungle'] : null;
        $this->container['physical_damage_dealt'] = isset($data['physical_damage_dealt']) ? $data['physical_damage_dealt'] : null;
        $this->container['physical_damage_taken'] = isset($data['physical_damage_taken']) ? $data['physical_damage_taken'] : null;
        $this->container['player_score0'] = isset($data['player_score0']) ? $data['player_score0'] : null;
        $this->container['player_score1'] = isset($data['player_score1']) ? $data['player_score1'] : null;
        $this->container['player_score2'] = isset($data['player_score2']) ? $data['player_score2'] : null;
        $this->container['player_score3'] = isset($data['player_score3']) ? $data['player_score3'] : null;
        $this->container['player_score4'] = isset($data['player_score4']) ? $data['player_score4'] : null;
        $this->container['player_score5'] = isset($data['player_score5']) ? $data['player_score5'] : null;
        $this->container['player_score6'] = isset($data['player_score6']) ? $data['player_score6'] : null;
        $this->container['player_score9'] = isset($data['player_score9']) ? $data['player_score9'] : null;
        $this->container['player_score10'] = isset($data['player_score10']) ? $data['player_score10'] : null;
        $this->container['player_score11'] = isset($data['player_score11']) ? $data['player_score11'] : null;
        $this->container['quadra_kills'] = isset($data['quadra_kills']) ? $data['quadra_kills'] : null;
        $this->container['spell1_casts'] = isset($data['spell1_casts']) ? $data['spell1_casts'] : null;
        $this->container['spell2_casts'] = isset($data['spell2_casts']) ? $data['spell2_casts'] : null;
        $this->container['spell3_casts'] = isset($data['spell3_casts']) ? $data['spell3_casts'] : null;
        $this->container['spell4_casts'] = isset($data['spell4_casts']) ? $data['spell4_casts'] : null;
        $this->container['summoner_spell1_casts'] = isset($data['summoner_spell1_casts']) ? $data['summoner_spell1_casts'] : null;
        $this->container['time_cc_others'] = isset($data['time_cc_others']) ? $data['time_cc_others'] : null;
        $this->container['total_minions_killed'] = isset($data['total_minions_killed']) ? $data['total_minions_killed'] : null;
        $this->container['true_damage_dealt_to_champions'] = isset($data['true_damage_dealt_to_champions']) ? $data['true_damage_dealt_to_champions'] : null;
        $this->container['unreal_kills'] = isset($data['unreal_kills']) ? $data['unreal_kills'] : null;
        $this->container['vision_score'] = isset($data['vision_score']) ? $data['vision_score'] : null;
        $this->container['wards_killed'] = isset($data['wards_killed']) ? $data['wards_killed'] : null;
        $this->container['deaths'] = isset($data['deaths']) ? $data['deaths'] : null;
        $this->container['killing_sprees'] = isset($data['killing_sprees']) ? $data['killing_sprees'] : null;
        $this->container['magic_damage_taken'] = isset($data['magic_damage_taken']) ? $data['magic_damage_taken'] : null;
        $this->container['penta_kills'] = isset($data['penta_kills']) ? $data['penta_kills'] : null;
        $this->container['physical_damage_dealt_to_champions'] = isset($data['physical_damage_dealt_to_champions']) ? $data['physical_damage_dealt_to_champions'] : null;
        $this->container['total_damage_dealt_to_champions'] = isset($data['total_damage_dealt_to_champions']) ? $data['total_damage_dealt_to_champions'] : null;
        $this->container['triple_kills'] = isset($data['triple_kills']) ? $data['triple_kills'] : null;
        $this->container['true_damage_dealt'] = isset($data['true_damage_dealt']) ? $data['true_damage_dealt'] : null;
        $this->container['true_damage_taken'] = isset($data['true_damage_taken']) ? $data['true_damage_taken'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets assists
     *
     * @return int
     */
    public function getAssists()
    {
        return $this->container['assists'];
    }

    /**
     * Sets assists
     *
     * @param int $assists assists
     *
     * @return $this
     */
    public function setAssists($assists)
    {
        $this->container['assists'] = $assists;

        return $this;
    }

    /**
     * Gets damage_dealt
     *
     * @return int
     */
    public function getDamageDealt()
    {
        return $this->container['damage_dealt'];
    }

    /**
     * Sets damage_dealt
     *
     * @param int $damage_dealt damage_dealt
     *
     * @return $this
     */
    public function setDamageDealt($damage_dealt)
    {
        $this->container['damage_dealt'] = $damage_dealt;

        return $this;
    }

    /**
     * Gets damage_dealt_to_objectives
     *
     * @return int
     */
    public function getDamageDealtToObjectives()
    {
        return $this->container['damage_dealt_to_objectives'];
    }

    /**
     * Sets damage_dealt_to_objectives
     *
     * @param int $damage_dealt_to_objectives damage_dealt_to_objectives
     *
     * @return $this
     */
    public function setDamageDealtToObjectives($damage_dealt_to_objectives)
    {
        $this->container['damage_dealt_to_objectives'] = $damage_dealt_to_objectives;

        return $this;
    }

    /**
     * Gets damage_dealt_to_turrets
     *
     * @return int
     */
    public function getDamageDealtToTurrets()
    {
        return $this->container['damage_dealt_to_turrets'];
    }

    /**
     * Sets damage_dealt_to_turrets
     *
     * @param int $damage_dealt_to_turrets damage_dealt_to_turrets
     *
     * @return $this
     */
    public function setDamageDealtToTurrets($damage_dealt_to_turrets)
    {
        $this->container['damage_dealt_to_turrets'] = $damage_dealt_to_turrets;

        return $this;
    }

    /**
     * Gets damage_taken
     *
     * @return int
     */
    public function getDamageTaken()
    {
        return $this->container['damage_taken'];
    }

    /**
     * Sets damage_taken
     *
     * @param int $damage_taken damage_taken
     *
     * @return $this
     */
    public function setDamageTaken($damage_taken)
    {
        $this->container['damage_taken'] = $damage_taken;

        return $this;
    }

    /**
     * Gets double_kills
     *
     * @return int
     */
    public function getDoubleKills()
    {
        return $this->container['double_kills'];
    }

    /**
     * Sets double_kills
     *
     * @param int $double_kills double_kills
     *
     * @return $this
     */
    public function setDoubleKills($double_kills)
    {
        $this->container['double_kills'] = $double_kills;

        return $this;
    }

    /**
     * Gets gold_earned
     *
     * @return int
     */
    public function getGoldEarned()
    {
        return $this->container['gold_earned'];
    }

    /**
     * Sets gold_earned
     *
     * @param int $gold_earned gold_earned
     *
     * @return $this
     */
    public function setGoldEarned($gold_earned)
    {
        $this->container['gold_earned'] = $gold_earned;

        return $this;
    }

    /**
     * Gets gold_spent
     *
     * @return int
     */
    public function getGoldSpent()
    {
        return $this->container['gold_spent'];
    }

    /**
     * Sets gold_spent
     *
     * @param int $gold_spent gold_spent
     *
     * @return $this
     */
    public function setGoldSpent($gold_spent)
    {
        $this->container['gold_spent'] = $gold_spent;

        return $this;
    }

    /**
     * Gets inhibitors_destroyed
     *
     * @return int
     */
    public function getInhibitorsDestroyed()
    {
        return $this->container['inhibitors_destroyed'];
    }

    /**
     * Sets inhibitors_destroyed
     *
     * @param int $inhibitors_destroyed inhibitors_destroyed
     *
     * @return $this
     */
    public function setInhibitorsDestroyed($inhibitors_destroyed)
    {
        $this->container['inhibitors_destroyed'] = $inhibitors_destroyed;

        return $this;
    }

    /**
     * Gets kills
     *
     * @return int
     */
    public function getKills()
    {
        return $this->container['kills'];
    }

    /**
     * Sets kills
     *
     * @param int $kills kills
     *
     * @return $this
     */
    public function setKills($kills)
    {
        $this->container['kills'] = $kills;

        return $this;
    }

    /**
     * Gets largest_killing_spree
     *
     * @return int
     */
    public function getLargestKillingSpree()
    {
        return $this->container['largest_killing_spree'];
    }

    /**
     * Sets largest_killing_spree
     *
     * @param int $largest_killing_spree largest_killing_spree
     *
     * @return $this
     */
    public function setLargestKillingSpree($largest_killing_spree)
    {
        $this->container['largest_killing_spree'] = $largest_killing_spree;

        return $this;
    }

    /**
     * Gets largest_multi_kill
     *
     * @return int
     */
    public function getLargestMultiKill()
    {
        return $this->container['largest_multi_kill'];
    }

    /**
     * Sets largest_multi_kill
     *
     * @param int $largest_multi_kill largest_multi_kill
     *
     * @return $this
     */
    public function setLargestMultiKill($largest_multi_kill)
    {
        $this->container['largest_multi_kill'] = $largest_multi_kill;

        return $this;
    }

    /**
     * Gets magic_damage_dealt
     *
     * @return int
     */
    public function getMagicDamageDealt()
    {
        return $this->container['magic_damage_dealt'];
    }

    /**
     * Sets magic_damage_dealt
     *
     * @param int $magic_damage_dealt magic_damage_dealt
     *
     * @return $this
     */
    public function setMagicDamageDealt($magic_damage_dealt)
    {
        $this->container['magic_damage_dealt'] = $magic_damage_dealt;

        return $this;
    }

    /**
     * Gets magic_damage_dealt_to_champions
     *
     * @return int
     */
    public function getMagicDamageDealtToChampions()
    {
        return $this->container['magic_damage_dealt_to_champions'];
    }

    /**
     * Sets magic_damage_dealt_to_champions
     *
     * @param int $magic_damage_dealt_to_champions magic_damage_dealt_to_champions
     *
     * @return $this
     */
    public function setMagicDamageDealtToChampions($magic_damage_dealt_to_champions)
    {
        $this->container['magic_damage_dealt_to_champions'] = $magic_damage_dealt_to_champions;

        return $this;
    }

    /**
     * Gets neutral_minions_killed_team_jungle
     *
     * @return int
     */
    public function getNeutralMinionsKilledTeamJungle()
    {
        return $this->container['neutral_minions_killed_team_jungle'];
    }

    /**
     * Sets neutral_minions_killed_team_jungle
     *
     * @param int $neutral_minions_killed_team_jungle neutral_minions_killed_team_jungle
     *
     * @return $this
     */
    public function setNeutralMinionsKilledTeamJungle($neutral_minions_killed_team_jungle)
    {
        $this->container['neutral_minions_killed_team_jungle'] = $neutral_minions_killed_team_jungle;

        return $this;
    }

    /**
     * Gets physical_damage_dealt
     *
     * @return int
     */
    public function getPhysicalDamageDealt()
    {
        return $this->container['physical_damage_dealt'];
    }

    /**
     * Sets physical_damage_dealt
     *
     * @param int $physical_damage_dealt physical_damage_dealt
     *
     * @return $this
     */
    public function setPhysicalDamageDealt($physical_damage_dealt)
    {
        $this->container['physical_damage_dealt'] = $physical_damage_dealt;

        return $this;
    }

    /**
     * Gets physical_damage_taken
     *
     * @return int
     */
    public function getPhysicalDamageTaken()
    {
        return $this->container['physical_damage_taken'];
    }

    /**
     * Sets physical_damage_taken
     *
     * @param int $physical_damage_taken physical_damage_taken
     *
     * @return $this
     */
    public function setPhysicalDamageTaken($physical_damage_taken)
    {
        $this->container['physical_damage_taken'] = $physical_damage_taken;

        return $this;
    }

    /**
     * Gets player_score0
     *
     * @return int
     */
    public function getPlayerScore0()
    {
        return $this->container['player_score0'];
    }

    /**
     * Sets player_score0
     *
     * @param int $player_score0 player_score0
     *
     * @return $this
     */
    public function setPlayerScore0($player_score0)
    {
        $this->container['player_score0'] = $player_score0;

        return $this;
    }

    /**
     * Gets player_score1
     *
     * @return int
     */
    public function getPlayerScore1()
    {
        return $this->container['player_score1'];
    }

    /**
     * Sets player_score1
     *
     * @param int $player_score1 player_score1
     *
     * @return $this
     */
    public function setPlayerScore1($player_score1)
    {
        $this->container['player_score1'] = $player_score1;

        return $this;
    }

    /**
     * Gets player_score2
     *
     * @return int
     */
    public function getPlayerScore2()
    {
        return $this->container['player_score2'];
    }

    /**
     * Sets player_score2
     *
     * @param int $player_score2 player_score2
     *
     * @return $this
     */
    public function setPlayerScore2($player_score2)
    {
        $this->container['player_score2'] = $player_score2;

        return $this;
    }

    /**
     * Gets player_score3
     *
     * @return int
     */
    public function getPlayerScore3()
    {
        return $this->container['player_score3'];
    }

    /**
     * Sets player_score3
     *
     * @param int $player_score3 player_score3
     *
     * @return $this
     */
    public function setPlayerScore3($player_score3)
    {
        $this->container['player_score3'] = $player_score3;

        return $this;
    }

    /**
     * Gets player_score4
     *
     * @return int
     */
    public function getPlayerScore4()
    {
        return $this->container['player_score4'];
    }

    /**
     * Sets player_score4
     *
     * @param int $player_score4 player_score4
     *
     * @return $this
     */
    public function setPlayerScore4($player_score4)
    {
        $this->container['player_score4'] = $player_score4;

        return $this;
    }

    /**
     * Gets player_score5
     *
     * @return int
     */
    public function getPlayerScore5()
    {
        return $this->container['player_score5'];
    }

    /**
     * Sets player_score5
     *
     * @param int $player_score5 player_score5
     *
     * @return $this
     */
    public function setPlayerScore5($player_score5)
    {
        $this->container['player_score5'] = $player_score5;

        return $this;
    }

    /**
     * Gets player_score6
     *
     * @return int
     */
    public function getPlayerScore6()
    {
        return $this->container['player_score6'];
    }

    /**
     * Sets player_score6
     *
     * @param int $player_score6 player_score6
     *
     * @return $this
     */
    public function setPlayerScore6($player_score6)
    {
        $this->container['player_score6'] = $player_score6;

        return $this;
    }

    /**
     * Gets player_score9
     *
     * @return int
     */
    public function getPlayerScore9()
    {
        return $this->container['player_score9'];
    }

    /**
     * Sets player_score9
     *
     * @param int $player_score9 player_score9
     *
     * @return $this
     */
    public function setPlayerScore9($player_score9)
    {
        $this->container['player_score9'] = $player_score9;

        return $this;
    }

    /**
     * Gets player_score10
     *
     * @return int
     */
    public function getPlayerScore10()
    {
        return $this->container['player_score10'];
    }

    /**
     * Sets player_score10
     *
     * @param int $player_score10 player_score10
     *
     * @return $this
     */
    public function setPlayerScore10($player_score10)
    {
        $this->container['player_score10'] = $player_score10;

        return $this;
    }

    /**
     * Gets player_score11
     *
     * @return int
     */
    public function getPlayerScore11()
    {
        return $this->container['player_score11'];
    }

    /**
     * Sets player_score11
     *
     * @param int $player_score11 player_score11
     *
     * @return $this
     */
    public function setPlayerScore11($player_score11)
    {
        $this->container['player_score11'] = $player_score11;

        return $this;
    }

    /**
     * Gets quadra_kills
     *
     * @return int
     */
    public function getQuadraKills()
    {
        return $this->container['quadra_kills'];
    }

    /**
     * Sets quadra_kills
     *
     * @param int $quadra_kills quadra_kills
     *
     * @return $this
     */
    public function setQuadraKills($quadra_kills)
    {
        $this->container['quadra_kills'] = $quadra_kills;

        return $this;
    }

    /**
     * Gets spell1_casts
     *
     * @return int
     */
    public function getSpell1Casts()
    {
        return $this->container['spell1_casts'];
    }

    /**
     * Sets spell1_casts
     *
     * @param int $spell1_casts spell1_casts
     *
     * @return $this
     */
    public function setSpell1Casts($spell1_casts)
    {
        $this->container['spell1_casts'] = $spell1_casts;

        return $this;
    }

    /**
     * Gets spell2_casts
     *
     * @return int
     */
    public function getSpell2Casts()
    {
        return $this->container['spell2_casts'];
    }

    /**
     * Sets spell2_casts
     *
     * @param int $spell2_casts spell2_casts
     *
     * @return $this
     */
    public function setSpell2Casts($spell2_casts)
    {
        $this->container['spell2_casts'] = $spell2_casts;

        return $this;
    }

    /**
     * Gets spell3_casts
     *
     * @return int
     */
    public function getSpell3Casts()
    {
        return $this->container['spell3_casts'];
    }

    /**
     * Sets spell3_casts
     *
     * @param int $spell3_casts spell3_casts
     *
     * @return $this
     */
    public function setSpell3Casts($spell3_casts)
    {
        $this->container['spell3_casts'] = $spell3_casts;

        return $this;
    }

    /**
     * Gets spell4_casts
     *
     * @return int
     */
    public function getSpell4Casts()
    {
        return $this->container['spell4_casts'];
    }

    /**
     * Sets spell4_casts
     *
     * @param int $spell4_casts spell4_casts
     *
     * @return $this
     */
    public function setSpell4Casts($spell4_casts)
    {
        $this->container['spell4_casts'] = $spell4_casts;

        return $this;
    }

    /**
     * Gets summoner_spell1_casts
     *
     * @return int
     */
    public function getSummonerSpell1Casts()
    {
        return $this->container['summoner_spell1_casts'];
    }

    /**
     * Sets summoner_spell1_casts
     *
     * @param int $summoner_spell1_casts summoner_spell1_casts
     *
     * @return $this
     */
    public function setSummonerSpell1Casts($summoner_spell1_casts)
    {
        $this->container['summoner_spell1_casts'] = $summoner_spell1_casts;

        return $this;
    }

    /**
     * Gets time_cc_others
     *
     * @return int
     */
    public function getTimeCcOthers()
    {
        return $this->container['time_cc_others'];
    }

    /**
     * Sets time_cc_others
     *
     * @param int $time_cc_others time_cc_others
     *
     * @return $this
     */
    public function setTimeCcOthers($time_cc_others)
    {
        $this->container['time_cc_others'] = $time_cc_others;

        return $this;
    }

    /**
     * Gets total_minions_killed
     *
     * @return int
     */
    public function getTotalMinionsKilled()
    {
        return $this->container['total_minions_killed'];
    }

    /**
     * Sets total_minions_killed
     *
     * @param int $total_minions_killed total_minions_killed
     *
     * @return $this
     */
    public function setTotalMinionsKilled($total_minions_killed)
    {
        $this->container['total_minions_killed'] = $total_minions_killed;

        return $this;
    }

    /**
     * Gets true_damage_dealt_to_champions
     *
     * @return int
     */
    public function getTrueDamageDealtToChampions()
    {
        return $this->container['true_damage_dealt_to_champions'];
    }

    /**
     * Sets true_damage_dealt_to_champions
     *
     * @param int $true_damage_dealt_to_champions true_damage_dealt_to_champions
     *
     * @return $this
     */
    public function setTrueDamageDealtToChampions($true_damage_dealt_to_champions)
    {
        $this->container['true_damage_dealt_to_champions'] = $true_damage_dealt_to_champions;

        return $this;
    }

    /**
     * Gets unreal_kills
     *
     * @return int
     */
    public function getUnrealKills()
    {
        return $this->container['unreal_kills'];
    }

    /**
     * Sets unreal_kills
     *
     * @param int $unreal_kills unreal_kills
     *
     * @return $this
     */
    public function setUnrealKills($unreal_kills)
    {
        $this->container['unreal_kills'] = $unreal_kills;

        return $this;
    }

    /**
     * Gets vision_score
     *
     * @return int
     */
    public function getVisionScore()
    {
        return $this->container['vision_score'];
    }

    /**
     * Sets vision_score
     *
     * @param int $vision_score vision_score
     *
     * @return $this
     */
    public function setVisionScore($vision_score)
    {
        $this->container['vision_score'] = $vision_score;

        return $this;
    }

    /**
     * Gets wards_killed
     *
     * @return int
     */
    public function getWardsKilled()
    {
        return $this->container['wards_killed'];
    }

    /**
     * Sets wards_killed
     *
     * @param int $wards_killed wards_killed
     *
     * @return $this
     */
    public function setWardsKilled($wards_killed)
    {
        $this->container['wards_killed'] = $wards_killed;

        return $this;
    }

    /**
     * Gets deaths
     *
     * @return int
     */
    public function getDeaths()
    {
        return $this->container['deaths'];
    }

    /**
     * Sets deaths
     *
     * @param int $deaths deaths
     *
     * @return $this
     */
    public function setDeaths($deaths)
    {
        $this->container['deaths'] = $deaths;

        return $this;
    }

    /**
     * Gets killing_sprees
     *
     * @return int
     */
    public function getKillingSprees()
    {
        return $this->container['killing_sprees'];
    }

    /**
     * Sets killing_sprees
     *
     * @param int $killing_sprees killing_sprees
     *
     * @return $this
     */
    public function setKillingSprees($killing_sprees)
    {
        $this->container['killing_sprees'] = $killing_sprees;

        return $this;
    }

    /**
     * Gets magic_damage_taken
     *
     * @return int
     */
    public function getMagicDamageTaken()
    {
        return $this->container['magic_damage_taken'];
    }

    /**
     * Sets magic_damage_taken
     *
     * @param int $magic_damage_taken magic_damage_taken
     *
     * @return $this
     */
    public function setMagicDamageTaken($magic_damage_taken)
    {
        $this->container['magic_damage_taken'] = $magic_damage_taken;

        return $this;
    }

    /**
     * Gets penta_kills
     *
     * @return int
     */
    public function getPentaKills()
    {
        return $this->container['penta_kills'];
    }

    /**
     * Sets penta_kills
     *
     * @param int $penta_kills penta_kills
     *
     * @return $this
     */
    public function setPentaKills($penta_kills)
    {
        $this->container['penta_kills'] = $penta_kills;

        return $this;
    }

    /**
     * Gets physical_damage_dealt_to_champions
     *
     * @return int
     */
    public function getPhysicalDamageDealtToChampions()
    {
        return $this->container['physical_damage_dealt_to_champions'];
    }

    /**
     * Sets physical_damage_dealt_to_champions
     *
     * @param int $physical_damage_dealt_to_champions physical_damage_dealt_to_champions
     *
     * @return $this
     */
    public function setPhysicalDamageDealtToChampions($physical_damage_dealt_to_champions)
    {
        $this->container['physical_damage_dealt_to_champions'] = $physical_damage_dealt_to_champions;

        return $this;
    }

    /**
     * Gets total_damage_dealt_to_champions
     *
     * @return int
     */
    public function getTotalDamageDealtToChampions()
    {
        return $this->container['total_damage_dealt_to_champions'];
    }

    /**
     * Sets total_damage_dealt_to_champions
     *
     * @param int $total_damage_dealt_to_champions total_damage_dealt_to_champions
     *
     * @return $this
     */
    public function setTotalDamageDealtToChampions($total_damage_dealt_to_champions)
    {
        $this->container['total_damage_dealt_to_champions'] = $total_damage_dealt_to_champions;

        return $this;
    }

    /**
     * Gets triple_kills
     *
     * @return int
     */
    public function getTripleKills()
    {
        return $this->container['triple_kills'];
    }

    /**
     * Sets triple_kills
     *
     * @param int $triple_kills triple_kills
     *
     * @return $this
     */
    public function setTripleKills($triple_kills)
    {
        $this->container['triple_kills'] = $triple_kills;

        return $this;
    }

    /**
     * Gets true_damage_dealt
     *
     * @return int
     */
    public function getTrueDamageDealt()
    {
        return $this->container['true_damage_dealt'];
    }

    /**
     * Sets true_damage_dealt
     *
     * @param int $true_damage_dealt true_damage_dealt
     *
     * @return $this
     */
    public function setTrueDamageDealt($true_damage_dealt)
    {
        $this->container['true_damage_dealt'] = $true_damage_dealt;

        return $this;
    }

    /**
     * Gets true_damage_taken
     *
     * @return int
     */
    public function getTrueDamageTaken()
    {
        return $this->container['true_damage_taken'];
    }

    /**
     * Sets true_damage_taken
     *
     * @param int $true_damage_taken true_damage_taken
     *
     * @return $this
     */
    public function setTrueDamageTaken($true_damage_taken)
    {
        $this->container['true_damage_taken'] = $true_damage_taken;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


