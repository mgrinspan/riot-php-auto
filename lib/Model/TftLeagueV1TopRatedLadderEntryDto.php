<?php
/**
 * TftLeagueV1TopRatedLadderEntryDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Riot API
 *
 * OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. ***
 *
 * OpenAPI spec version: b7cd9f901117fa03f7c4e5f9c0a954dac569f75a
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TftLeagueV1TopRatedLadderEntryDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TftLeagueV1TopRatedLadderEntryDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'tft-league-v1.TopRatedLadderEntryDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'summoner_id' => 'string',
        'rated_tier' => 'string',
        'rated_rating' => 'int',
        'wins' => 'int',
        'previous_update_ladder_position' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'summoner_id' => null,
        'rated_tier' => null,
        'rated_rating' => 'int32',
        'wins' => 'int32',
        'previous_update_ladder_position' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'summoner_id' => 'summonerId',
        'rated_tier' => 'ratedTier',
        'rated_rating' => 'ratedRating',
        'wins' => 'wins',
        'previous_update_ladder_position' => 'previousUpdateLadderPosition'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'summoner_id' => 'setSummonerId',
        'rated_tier' => 'setRatedTier',
        'rated_rating' => 'setRatedRating',
        'wins' => 'setWins',
        'previous_update_ladder_position' => 'setPreviousUpdateLadderPosition'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'summoner_id' => 'getSummonerId',
        'rated_tier' => 'getRatedTier',
        'rated_rating' => 'getRatedRating',
        'wins' => 'getWins',
        'previous_update_ladder_position' => 'getPreviousUpdateLadderPosition'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const RATED_TIER_ORANGE = 'ORANGE';
    const RATED_TIER_PURPLE = 'PURPLE';
    const RATED_TIER_BLUE = 'BLUE';
    const RATED_TIER_GREEN = 'GREEN';
    const RATED_TIER_GRAY = 'GRAY';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRatedTierAllowableValues()
    {
        return [
            self::RATED_TIER_ORANGE,
            self::RATED_TIER_PURPLE,
            self::RATED_TIER_BLUE,
            self::RATED_TIER_GREEN,
            self::RATED_TIER_GRAY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['summoner_id'] = isset($data['summoner_id']) ? $data['summoner_id'] : null;
        $this->container['rated_tier'] = isset($data['rated_tier']) ? $data['rated_tier'] : null;
        $this->container['rated_rating'] = isset($data['rated_rating']) ? $data['rated_rating'] : null;
        $this->container['wins'] = isset($data['wins']) ? $data['wins'] : null;
        $this->container['previous_update_ladder_position'] = isset($data['previous_update_ladder_position']) ? $data['previous_update_ladder_position'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['summoner_id'] === null) {
            $invalidProperties[] = "'summoner_id' can't be null";
        }
        if ($this->container['rated_tier'] === null) {
            $invalidProperties[] = "'rated_tier' can't be null";
        }
        $allowedValues = $this->getRatedTierAllowableValues();
        if (!is_null($this->container['rated_tier']) && !in_array($this->container['rated_tier'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'rated_tier', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['rated_rating'] === null) {
            $invalidProperties[] = "'rated_rating' can't be null";
        }
        if ($this->container['wins'] === null) {
            $invalidProperties[] = "'wins' can't be null";
        }
        if ($this->container['previous_update_ladder_position'] === null) {
            $invalidProperties[] = "'previous_update_ladder_position' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets summoner_id
     *
     * @return string
     */
    public function getSummonerId()
    {
        return $this->container['summoner_id'];
    }

    /**
     * Sets summoner_id
     *
     * @param string $summoner_id summoner_id
     *
     * @return $this
     */
    public function setSummonerId($summoner_id)
    {
        $this->container['summoner_id'] = $summoner_id;

        return $this;
    }

    /**
     * Gets rated_tier
     *
     * @return string
     */
    public function getRatedTier()
    {
        return $this->container['rated_tier'];
    }

    /**
     * Sets rated_tier
     *
     * @param string $rated_tier (Legal values:  ORANGE,  PURPLE,  BLUE,  GREEN,  GRAY)
     *
     * @return $this
     */
    public function setRatedTier($rated_tier)
    {
        $allowedValues = $this->getRatedTierAllowableValues();
        if (!in_array($rated_tier, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'rated_tier', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rated_tier'] = $rated_tier;

        return $this;
    }

    /**
     * Gets rated_rating
     *
     * @return int
     */
    public function getRatedRating()
    {
        return $this->container['rated_rating'];
    }

    /**
     * Sets rated_rating
     *
     * @param int $rated_rating rated_rating
     *
     * @return $this
     */
    public function setRatedRating($rated_rating)
    {
        $this->container['rated_rating'] = $rated_rating;

        return $this;
    }

    /**
     * Gets wins
     *
     * @return int
     */
    public function getWins()
    {
        return $this->container['wins'];
    }

    /**
     * Sets wins
     *
     * @param int $wins First placement.
     *
     * @return $this
     */
    public function setWins($wins)
    {
        $this->container['wins'] = $wins;

        return $this;
    }

    /**
     * Gets previous_update_ladder_position
     *
     * @return int
     */
    public function getPreviousUpdateLadderPosition()
    {
        return $this->container['previous_update_ladder_position'];
    }

    /**
     * Sets previous_update_ladder_position
     *
     * @param int $previous_update_ladder_position previous_update_ladder_position
     *
     * @return $this
     */
    public function setPreviousUpdateLadderPosition($previous_update_ladder_position)
    {
        $this->container['previous_update_ladder_position'] = $previous_update_ladder_position;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


