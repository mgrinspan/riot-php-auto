<?php
/**
 * ValMatchV1PlayerStatsDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Riot API
 *
 * OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. ***
 *
 * OpenAPI spec version: b7cd9f901117fa03f7c4e5f9c0a954dac569f75a
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ValMatchV1PlayerStatsDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ValMatchV1PlayerStatsDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'val-match-v1.PlayerStatsDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'score' => 'int',
        'rounds_played' => 'int',
        'kills' => 'int',
        'deaths' => 'int',
        'assists' => 'int',
        'playtime_millis' => 'int',
        'ability_casts' => '\Swagger\Client\Model\ValMatchV1AbilityCastsDto'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'score' => 'int32',
        'rounds_played' => 'int32',
        'kills' => 'int32',
        'deaths' => 'int32',
        'assists' => 'int32',
        'playtime_millis' => 'int32',
        'ability_casts' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'score' => 'score',
        'rounds_played' => 'roundsPlayed',
        'kills' => 'kills',
        'deaths' => 'deaths',
        'assists' => 'assists',
        'playtime_millis' => 'playtimeMillis',
        'ability_casts' => 'abilityCasts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'score' => 'setScore',
        'rounds_played' => 'setRoundsPlayed',
        'kills' => 'setKills',
        'deaths' => 'setDeaths',
        'assists' => 'setAssists',
        'playtime_millis' => 'setPlaytimeMillis',
        'ability_casts' => 'setAbilityCasts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'score' => 'getScore',
        'rounds_played' => 'getRoundsPlayed',
        'kills' => 'getKills',
        'deaths' => 'getDeaths',
        'assists' => 'getAssists',
        'playtime_millis' => 'getPlaytimeMillis',
        'ability_casts' => 'getAbilityCasts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['score'] = isset($data['score']) ? $data['score'] : null;
        $this->container['rounds_played'] = isset($data['rounds_played']) ? $data['rounds_played'] : null;
        $this->container['kills'] = isset($data['kills']) ? $data['kills'] : null;
        $this->container['deaths'] = isset($data['deaths']) ? $data['deaths'] : null;
        $this->container['assists'] = isset($data['assists']) ? $data['assists'] : null;
        $this->container['playtime_millis'] = isset($data['playtime_millis']) ? $data['playtime_millis'] : null;
        $this->container['ability_casts'] = isset($data['ability_casts']) ? $data['ability_casts'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['score'] === null) {
            $invalidProperties[] = "'score' can't be null";
        }
        if ($this->container['rounds_played'] === null) {
            $invalidProperties[] = "'rounds_played' can't be null";
        }
        if ($this->container['kills'] === null) {
            $invalidProperties[] = "'kills' can't be null";
        }
        if ($this->container['deaths'] === null) {
            $invalidProperties[] = "'deaths' can't be null";
        }
        if ($this->container['assists'] === null) {
            $invalidProperties[] = "'assists' can't be null";
        }
        if ($this->container['playtime_millis'] === null) {
            $invalidProperties[] = "'playtime_millis' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets score
     *
     * @return int
     */
    public function getScore()
    {
        return $this->container['score'];
    }

    /**
     * Sets score
     *
     * @param int $score score
     *
     * @return $this
     */
    public function setScore($score)
    {
        $this->container['score'] = $score;

        return $this;
    }

    /**
     * Gets rounds_played
     *
     * @return int
     */
    public function getRoundsPlayed()
    {
        return $this->container['rounds_played'];
    }

    /**
     * Sets rounds_played
     *
     * @param int $rounds_played rounds_played
     *
     * @return $this
     */
    public function setRoundsPlayed($rounds_played)
    {
        $this->container['rounds_played'] = $rounds_played;

        return $this;
    }

    /**
     * Gets kills
     *
     * @return int
     */
    public function getKills()
    {
        return $this->container['kills'];
    }

    /**
     * Sets kills
     *
     * @param int $kills kills
     *
     * @return $this
     */
    public function setKills($kills)
    {
        $this->container['kills'] = $kills;

        return $this;
    }

    /**
     * Gets deaths
     *
     * @return int
     */
    public function getDeaths()
    {
        return $this->container['deaths'];
    }

    /**
     * Sets deaths
     *
     * @param int $deaths deaths
     *
     * @return $this
     */
    public function setDeaths($deaths)
    {
        $this->container['deaths'] = $deaths;

        return $this;
    }

    /**
     * Gets assists
     *
     * @return int
     */
    public function getAssists()
    {
        return $this->container['assists'];
    }

    /**
     * Sets assists
     *
     * @param int $assists assists
     *
     * @return $this
     */
    public function setAssists($assists)
    {
        $this->container['assists'] = $assists;

        return $this;
    }

    /**
     * Gets playtime_millis
     *
     * @return int
     */
    public function getPlaytimeMillis()
    {
        return $this->container['playtime_millis'];
    }

    /**
     * Sets playtime_millis
     *
     * @param int $playtime_millis playtime_millis
     *
     * @return $this
     */
    public function setPlaytimeMillis($playtime_millis)
    {
        $this->container['playtime_millis'] = $playtime_millis;

        return $this;
    }

    /**
     * Gets ability_casts
     *
     * @return \Swagger\Client\Model\ValMatchV1AbilityCastsDto
     */
    public function getAbilityCasts()
    {
        return $this->container['ability_casts'];
    }

    /**
     * Sets ability_casts
     *
     * @param \Swagger\Client\Model\ValMatchV1AbilityCastsDto $ability_casts ability_casts
     *
     * @return $this
     */
    public function setAbilityCasts($ability_casts)
    {
        $this->container['ability_casts'] = $ability_casts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


