<?php
/**
 * LorStatusV1StatusDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Riot API
 *
 * OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. ***
 *
 * OpenAPI spec version: b7cd9f901117fa03f7c4e5f9c0a954dac569f75a
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * LorStatusV1StatusDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LorStatusV1StatusDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'lor-status-v1.StatusDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'maintenance_status' => 'string',
        'incident_severity' => 'string',
        'titles' => '\Swagger\Client\Model\LorStatusV1ContentDto[]',
        'updates' => '\Swagger\Client\Model\LorStatusV1UpdateDto[]',
        'created_at' => 'string',
        'archive_at' => 'string',
        'updated_at' => 'string',
        'platforms' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'maintenance_status' => null,
        'incident_severity' => null,
        'titles' => null,
        'updates' => null,
        'created_at' => null,
        'archive_at' => null,
        'updated_at' => null,
        'platforms' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'maintenance_status' => 'maintenance_status',
        'incident_severity' => 'incident_severity',
        'titles' => 'titles',
        'updates' => 'updates',
        'created_at' => 'created_at',
        'archive_at' => 'archive_at',
        'updated_at' => 'updated_at',
        'platforms' => 'platforms'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'maintenance_status' => 'setMaintenanceStatus',
        'incident_severity' => 'setIncidentSeverity',
        'titles' => 'setTitles',
        'updates' => 'setUpdates',
        'created_at' => 'setCreatedAt',
        'archive_at' => 'setArchiveAt',
        'updated_at' => 'setUpdatedAt',
        'platforms' => 'setPlatforms'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'maintenance_status' => 'getMaintenanceStatus',
        'incident_severity' => 'getIncidentSeverity',
        'titles' => 'getTitles',
        'updates' => 'getUpdates',
        'created_at' => 'getCreatedAt',
        'archive_at' => 'getArchiveAt',
        'updated_at' => 'getUpdatedAt',
        'platforms' => 'getPlatforms'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MAINTENANCE_STATUS_SCHEDULED = 'scheduled';
    const MAINTENANCE_STATUS_IN_PROGRESS = 'in_progress';
    const MAINTENANCE_STATUS_COMPLETE = 'complete';
    const INCIDENT_SEVERITY_INFO = 'info';
    const INCIDENT_SEVERITY_WARNING = 'warning';
    const INCIDENT_SEVERITY_CRITICAL = 'critical';
    const PLATFORMS_WINDOWS = 'windows';
    const PLATFORMS_MACOS = 'macos';
    const PLATFORMS_ANDROID = 'android';
    const PLATFORMS_IOS = 'ios';
    const PLATFORMS_PS4 = 'ps4';
    const PLATFORMS_XBONE = 'xbone';
    const PLATFORMS__SWITCH = 'switch';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMaintenanceStatusAllowableValues()
    {
        return [
            self::MAINTENANCE_STATUS_SCHEDULED,
            self::MAINTENANCE_STATUS_IN_PROGRESS,
            self::MAINTENANCE_STATUS_COMPLETE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIncidentSeverityAllowableValues()
    {
        return [
            self::INCIDENT_SEVERITY_INFO,
            self::INCIDENT_SEVERITY_WARNING,
            self::INCIDENT_SEVERITY_CRITICAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPlatformsAllowableValues()
    {
        return [
            self::PLATFORMS_WINDOWS,
            self::PLATFORMS_MACOS,
            self::PLATFORMS_ANDROID,
            self::PLATFORMS_IOS,
            self::PLATFORMS_PS4,
            self::PLATFORMS_XBONE,
            self::PLATFORMS__SWITCH,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['maintenance_status'] = isset($data['maintenance_status']) ? $data['maintenance_status'] : null;
        $this->container['incident_severity'] = isset($data['incident_severity']) ? $data['incident_severity'] : null;
        $this->container['titles'] = isset($data['titles']) ? $data['titles'] : null;
        $this->container['updates'] = isset($data['updates']) ? $data['updates'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['archive_at'] = isset($data['archive_at']) ? $data['archive_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['platforms'] = isset($data['platforms']) ? $data['platforms'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['maintenance_status'] === null) {
            $invalidProperties[] = "'maintenance_status' can't be null";
        }
        $allowedValues = $this->getMaintenanceStatusAllowableValues();
        if (!is_null($this->container['maintenance_status']) && !in_array($this->container['maintenance_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'maintenance_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['incident_severity'] === null) {
            $invalidProperties[] = "'incident_severity' can't be null";
        }
        $allowedValues = $this->getIncidentSeverityAllowableValues();
        if (!is_null($this->container['incident_severity']) && !in_array($this->container['incident_severity'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'incident_severity', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['titles'] === null) {
            $invalidProperties[] = "'titles' can't be null";
        }
        if ($this->container['updates'] === null) {
            $invalidProperties[] = "'updates' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['archive_at'] === null) {
            $invalidProperties[] = "'archive_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['platforms'] === null) {
            $invalidProperties[] = "'platforms' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets maintenance_status
     *
     * @return string
     */
    public function getMaintenanceStatus()
    {
        return $this->container['maintenance_status'];
    }

    /**
     * Sets maintenance_status
     *
     * @param string $maintenance_status (Legal values:  scheduled,  in_progress,  complete)
     *
     * @return $this
     */
    public function setMaintenanceStatus($maintenance_status)
    {
        $allowedValues = $this->getMaintenanceStatusAllowableValues();
        if (!in_array($maintenance_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'maintenance_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['maintenance_status'] = $maintenance_status;

        return $this;
    }

    /**
     * Gets incident_severity
     *
     * @return string
     */
    public function getIncidentSeverity()
    {
        return $this->container['incident_severity'];
    }

    /**
     * Sets incident_severity
     *
     * @param string $incident_severity (Legal values:  info,  warning,  critical)
     *
     * @return $this
     */
    public function setIncidentSeverity($incident_severity)
    {
        $allowedValues = $this->getIncidentSeverityAllowableValues();
        if (!in_array($incident_severity, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'incident_severity', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['incident_severity'] = $incident_severity;

        return $this;
    }

    /**
     * Gets titles
     *
     * @return \Swagger\Client\Model\LorStatusV1ContentDto[]
     */
    public function getTitles()
    {
        return $this->container['titles'];
    }

    /**
     * Sets titles
     *
     * @param \Swagger\Client\Model\LorStatusV1ContentDto[] $titles titles
     *
     * @return $this
     */
    public function setTitles($titles)
    {
        $this->container['titles'] = $titles;

        return $this;
    }

    /**
     * Gets updates
     *
     * @return \Swagger\Client\Model\LorStatusV1UpdateDto[]
     */
    public function getUpdates()
    {
        return $this->container['updates'];
    }

    /**
     * Sets updates
     *
     * @param \Swagger\Client\Model\LorStatusV1UpdateDto[] $updates updates
     *
     * @return $this
     */
    public function setUpdates($updates)
    {
        $this->container['updates'] = $updates;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets archive_at
     *
     * @return string
     */
    public function getArchiveAt()
    {
        return $this->container['archive_at'];
    }

    /**
     * Sets archive_at
     *
     * @param string $archive_at archive_at
     *
     * @return $this
     */
    public function setArchiveAt($archive_at)
    {
        $this->container['archive_at'] = $archive_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets platforms
     *
     * @return string[]
     */
    public function getPlatforms()
    {
        return $this->container['platforms'];
    }

    /**
     * Sets platforms
     *
     * @param string[] $platforms (Legal values: windows, macos, android, ios, ps4, xbone, switch)
     *
     * @return $this
     */
    public function setPlatforms($platforms)
    {
        $allowedValues = $this->getPlatformsAllowableValues();
        if (array_diff($platforms, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'platforms', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['platforms'] = $platforms;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


