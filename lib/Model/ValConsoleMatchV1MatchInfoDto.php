<?php
/**
 * ValConsoleMatchV1MatchInfoDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Riot API
 *
 * OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. ***
 *
 * OpenAPI spec version: b7cd9f901117fa03f7c4e5f9c0a954dac569f75a
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ValConsoleMatchV1MatchInfoDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ValConsoleMatchV1MatchInfoDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'val-console-match-v1.MatchInfoDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'match_id' => 'string',
        'map_id' => 'string',
        'game_length_millis' => 'int',
        'game_start_millis' => 'int',
        'provisioning_flow_id' => 'string',
        'is_completed' => 'bool',
        'custom_game_name' => 'string',
        'queue_id' => 'string',
        'game_mode' => 'string',
        'is_ranked' => 'bool',
        'season_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'match_id' => null,
        'map_id' => null,
        'game_length_millis' => 'int32',
        'game_start_millis' => 'int64',
        'provisioning_flow_id' => null,
        'is_completed' => null,
        'custom_game_name' => null,
        'queue_id' => null,
        'game_mode' => null,
        'is_ranked' => null,
        'season_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'match_id' => 'matchId',
        'map_id' => 'mapId',
        'game_length_millis' => 'gameLengthMillis',
        'game_start_millis' => 'gameStartMillis',
        'provisioning_flow_id' => 'provisioningFlowId',
        'is_completed' => 'isCompleted',
        'custom_game_name' => 'customGameName',
        'queue_id' => 'queueId',
        'game_mode' => 'gameMode',
        'is_ranked' => 'isRanked',
        'season_id' => 'seasonId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'match_id' => 'setMatchId',
        'map_id' => 'setMapId',
        'game_length_millis' => 'setGameLengthMillis',
        'game_start_millis' => 'setGameStartMillis',
        'provisioning_flow_id' => 'setProvisioningFlowId',
        'is_completed' => 'setIsCompleted',
        'custom_game_name' => 'setCustomGameName',
        'queue_id' => 'setQueueId',
        'game_mode' => 'setGameMode',
        'is_ranked' => 'setIsRanked',
        'season_id' => 'setSeasonId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'match_id' => 'getMatchId',
        'map_id' => 'getMapId',
        'game_length_millis' => 'getGameLengthMillis',
        'game_start_millis' => 'getGameStartMillis',
        'provisioning_flow_id' => 'getProvisioningFlowId',
        'is_completed' => 'getIsCompleted',
        'custom_game_name' => 'getCustomGameName',
        'queue_id' => 'getQueueId',
        'game_mode' => 'getGameMode',
        'is_ranked' => 'getIsRanked',
        'season_id' => 'getSeasonId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['match_id'] = isset($data['match_id']) ? $data['match_id'] : null;
        $this->container['map_id'] = isset($data['map_id']) ? $data['map_id'] : null;
        $this->container['game_length_millis'] = isset($data['game_length_millis']) ? $data['game_length_millis'] : null;
        $this->container['game_start_millis'] = isset($data['game_start_millis']) ? $data['game_start_millis'] : null;
        $this->container['provisioning_flow_id'] = isset($data['provisioning_flow_id']) ? $data['provisioning_flow_id'] : null;
        $this->container['is_completed'] = isset($data['is_completed']) ? $data['is_completed'] : null;
        $this->container['custom_game_name'] = isset($data['custom_game_name']) ? $data['custom_game_name'] : null;
        $this->container['queue_id'] = isset($data['queue_id']) ? $data['queue_id'] : null;
        $this->container['game_mode'] = isset($data['game_mode']) ? $data['game_mode'] : null;
        $this->container['is_ranked'] = isset($data['is_ranked']) ? $data['is_ranked'] : null;
        $this->container['season_id'] = isset($data['season_id']) ? $data['season_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['match_id'] === null) {
            $invalidProperties[] = "'match_id' can't be null";
        }
        if ($this->container['map_id'] === null) {
            $invalidProperties[] = "'map_id' can't be null";
        }
        if ($this->container['game_length_millis'] === null) {
            $invalidProperties[] = "'game_length_millis' can't be null";
        }
        if ($this->container['game_start_millis'] === null) {
            $invalidProperties[] = "'game_start_millis' can't be null";
        }
        if ($this->container['provisioning_flow_id'] === null) {
            $invalidProperties[] = "'provisioning_flow_id' can't be null";
        }
        if ($this->container['is_completed'] === null) {
            $invalidProperties[] = "'is_completed' can't be null";
        }
        if ($this->container['custom_game_name'] === null) {
            $invalidProperties[] = "'custom_game_name' can't be null";
        }
        if ($this->container['queue_id'] === null) {
            $invalidProperties[] = "'queue_id' can't be null";
        }
        if ($this->container['game_mode'] === null) {
            $invalidProperties[] = "'game_mode' can't be null";
        }
        if ($this->container['is_ranked'] === null) {
            $invalidProperties[] = "'is_ranked' can't be null";
        }
        if ($this->container['season_id'] === null) {
            $invalidProperties[] = "'season_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets match_id
     *
     * @return string
     */
    public function getMatchId()
    {
        return $this->container['match_id'];
    }

    /**
     * Sets match_id
     *
     * @param string $match_id match_id
     *
     * @return $this
     */
    public function setMatchId($match_id)
    {
        $this->container['match_id'] = $match_id;

        return $this;
    }

    /**
     * Gets map_id
     *
     * @return string
     */
    public function getMapId()
    {
        return $this->container['map_id'];
    }

    /**
     * Sets map_id
     *
     * @param string $map_id map_id
     *
     * @return $this
     */
    public function setMapId($map_id)
    {
        $this->container['map_id'] = $map_id;

        return $this;
    }

    /**
     * Gets game_length_millis
     *
     * @return int
     */
    public function getGameLengthMillis()
    {
        return $this->container['game_length_millis'];
    }

    /**
     * Sets game_length_millis
     *
     * @param int $game_length_millis game_length_millis
     *
     * @return $this
     */
    public function setGameLengthMillis($game_length_millis)
    {
        $this->container['game_length_millis'] = $game_length_millis;

        return $this;
    }

    /**
     * Gets game_start_millis
     *
     * @return int
     */
    public function getGameStartMillis()
    {
        return $this->container['game_start_millis'];
    }

    /**
     * Sets game_start_millis
     *
     * @param int $game_start_millis game_start_millis
     *
     * @return $this
     */
    public function setGameStartMillis($game_start_millis)
    {
        $this->container['game_start_millis'] = $game_start_millis;

        return $this;
    }

    /**
     * Gets provisioning_flow_id
     *
     * @return string
     */
    public function getProvisioningFlowId()
    {
        return $this->container['provisioning_flow_id'];
    }

    /**
     * Sets provisioning_flow_id
     *
     * @param string $provisioning_flow_id provisioning_flow_id
     *
     * @return $this
     */
    public function setProvisioningFlowId($provisioning_flow_id)
    {
        $this->container['provisioning_flow_id'] = $provisioning_flow_id;

        return $this;
    }

    /**
     * Gets is_completed
     *
     * @return bool
     */
    public function getIsCompleted()
    {
        return $this->container['is_completed'];
    }

    /**
     * Sets is_completed
     *
     * @param bool $is_completed is_completed
     *
     * @return $this
     */
    public function setIsCompleted($is_completed)
    {
        $this->container['is_completed'] = $is_completed;

        return $this;
    }

    /**
     * Gets custom_game_name
     *
     * @return string
     */
    public function getCustomGameName()
    {
        return $this->container['custom_game_name'];
    }

    /**
     * Sets custom_game_name
     *
     * @param string $custom_game_name custom_game_name
     *
     * @return $this
     */
    public function setCustomGameName($custom_game_name)
    {
        $this->container['custom_game_name'] = $custom_game_name;

        return $this;
    }

    /**
     * Gets queue_id
     *
     * @return string
     */
    public function getQueueId()
    {
        return $this->container['queue_id'];
    }

    /**
     * Sets queue_id
     *
     * @param string $queue_id queue_id
     *
     * @return $this
     */
    public function setQueueId($queue_id)
    {
        $this->container['queue_id'] = $queue_id;

        return $this;
    }

    /**
     * Gets game_mode
     *
     * @return string
     */
    public function getGameMode()
    {
        return $this->container['game_mode'];
    }

    /**
     * Sets game_mode
     *
     * @param string $game_mode game_mode
     *
     * @return $this
     */
    public function setGameMode($game_mode)
    {
        $this->container['game_mode'] = $game_mode;

        return $this;
    }

    /**
     * Gets is_ranked
     *
     * @return bool
     */
    public function getIsRanked()
    {
        return $this->container['is_ranked'];
    }

    /**
     * Sets is_ranked
     *
     * @param bool $is_ranked is_ranked
     *
     * @return $this
     */
    public function setIsRanked($is_ranked)
    {
        $this->container['is_ranked'] = $is_ranked;

        return $this;
    }

    /**
     * Gets season_id
     *
     * @return string
     */
    public function getSeasonId()
    {
        return $this->container['season_id'];
    }

    /**
     * Sets season_id
     *
     * @param string $season_id season_id
     *
     * @return $this
     */
    public function setSeasonId($season_id)
    {
        $this->container['season_id'] = $season_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


