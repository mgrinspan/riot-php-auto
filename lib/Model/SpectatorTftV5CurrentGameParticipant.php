<?php
/**
 * SpectatorTftV5CurrentGameParticipant
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Riot API
 *
 * OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. ***
 *
 * OpenAPI spec version: b7cd9f901117fa03f7c4e5f9c0a954dac569f75a
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SpectatorTftV5CurrentGameParticipant Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SpectatorTftV5CurrentGameParticipant implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'spectator-tft-v5.CurrentGameParticipant';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'champion_id' => 'int',
        'perks' => '\Swagger\Client\Model\SpectatorTftV5Perks',
        'profile_icon_id' => 'int',
        'team_id' => 'int',
        'summoner_id' => 'string',
        'puuid' => 'string',
        'spell1_id' => 'int',
        'spell2_id' => 'int',
        'game_customization_objects' => '\Swagger\Client\Model\SpectatorTftV5GameCustomizationObject[]',
        'riot_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'champion_id' => 'int64',
        'perks' => null,
        'profile_icon_id' => 'int64',
        'team_id' => 'int64',
        'summoner_id' => null,
        'puuid' => null,
        'spell1_id' => 'int64',
        'spell2_id' => 'int64',
        'game_customization_objects' => null,
        'riot_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'champion_id' => 'championId',
        'perks' => 'perks',
        'profile_icon_id' => 'profileIconId',
        'team_id' => 'teamId',
        'summoner_id' => 'summonerId',
        'puuid' => 'puuid',
        'spell1_id' => 'spell1Id',
        'spell2_id' => 'spell2Id',
        'game_customization_objects' => 'gameCustomizationObjects',
        'riot_id' => 'riotId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'champion_id' => 'setChampionId',
        'perks' => 'setPerks',
        'profile_icon_id' => 'setProfileIconId',
        'team_id' => 'setTeamId',
        'summoner_id' => 'setSummonerId',
        'puuid' => 'setPuuid',
        'spell1_id' => 'setSpell1Id',
        'spell2_id' => 'setSpell2Id',
        'game_customization_objects' => 'setGameCustomizationObjects',
        'riot_id' => 'setRiotId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'champion_id' => 'getChampionId',
        'perks' => 'getPerks',
        'profile_icon_id' => 'getProfileIconId',
        'team_id' => 'getTeamId',
        'summoner_id' => 'getSummonerId',
        'puuid' => 'getPuuid',
        'spell1_id' => 'getSpell1Id',
        'spell2_id' => 'getSpell2Id',
        'game_customization_objects' => 'getGameCustomizationObjects',
        'riot_id' => 'getRiotId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['champion_id'] = isset($data['champion_id']) ? $data['champion_id'] : null;
        $this->container['perks'] = isset($data['perks']) ? $data['perks'] : null;
        $this->container['profile_icon_id'] = isset($data['profile_icon_id']) ? $data['profile_icon_id'] : null;
        $this->container['team_id'] = isset($data['team_id']) ? $data['team_id'] : null;
        $this->container['summoner_id'] = isset($data['summoner_id']) ? $data['summoner_id'] : null;
        $this->container['puuid'] = isset($data['puuid']) ? $data['puuid'] : null;
        $this->container['spell1_id'] = isset($data['spell1_id']) ? $data['spell1_id'] : null;
        $this->container['spell2_id'] = isset($data['spell2_id']) ? $data['spell2_id'] : null;
        $this->container['game_customization_objects'] = isset($data['game_customization_objects']) ? $data['game_customization_objects'] : null;
        $this->container['riot_id'] = isset($data['riot_id']) ? $data['riot_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['champion_id'] === null) {
            $invalidProperties[] = "'champion_id' can't be null";
        }
        if ($this->container['profile_icon_id'] === null) {
            $invalidProperties[] = "'profile_icon_id' can't be null";
        }
        if ($this->container['team_id'] === null) {
            $invalidProperties[] = "'team_id' can't be null";
        }
        if ($this->container['summoner_id'] === null) {
            $invalidProperties[] = "'summoner_id' can't be null";
        }
        if ($this->container['spell1_id'] === null) {
            $invalidProperties[] = "'spell1_id' can't be null";
        }
        if ($this->container['spell2_id'] === null) {
            $invalidProperties[] = "'spell2_id' can't be null";
        }
        if ($this->container['game_customization_objects'] === null) {
            $invalidProperties[] = "'game_customization_objects' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets champion_id
     *
     * @return int
     */
    public function getChampionId()
    {
        return $this->container['champion_id'];
    }

    /**
     * Sets champion_id
     *
     * @param int $champion_id The ID of the champion played by this participant
     *
     * @return $this
     */
    public function setChampionId($champion_id)
    {
        $this->container['champion_id'] = $champion_id;

        return $this;
    }

    /**
     * Gets perks
     *
     * @return \Swagger\Client\Model\SpectatorTftV5Perks
     */
    public function getPerks()
    {
        return $this->container['perks'];
    }

    /**
     * Sets perks
     *
     * @param \Swagger\Client\Model\SpectatorTftV5Perks $perks Perks/Runes Reforged Information
     *
     * @return $this
     */
    public function setPerks($perks)
    {
        $this->container['perks'] = $perks;

        return $this;
    }

    /**
     * Gets profile_icon_id
     *
     * @return int
     */
    public function getProfileIconId()
    {
        return $this->container['profile_icon_id'];
    }

    /**
     * Sets profile_icon_id
     *
     * @param int $profile_icon_id The ID of the profile icon used by this participant
     *
     * @return $this
     */
    public function setProfileIconId($profile_icon_id)
    {
        $this->container['profile_icon_id'] = $profile_icon_id;

        return $this;
    }

    /**
     * Gets team_id
     *
     * @return int
     */
    public function getTeamId()
    {
        return $this->container['team_id'];
    }

    /**
     * Sets team_id
     *
     * @param int $team_id The team ID of this participant, indicating the participant's team
     *
     * @return $this
     */
    public function setTeamId($team_id)
    {
        $this->container['team_id'] = $team_id;

        return $this;
    }

    /**
     * Gets summoner_id
     *
     * @return string
     */
    public function getSummonerId()
    {
        return $this->container['summoner_id'];
    }

    /**
     * Sets summoner_id
     *
     * @param string $summoner_id The encrypted summoner ID of this participant
     *
     * @return $this
     */
    public function setSummonerId($summoner_id)
    {
        $this->container['summoner_id'] = $summoner_id;

        return $this;
    }

    /**
     * Gets puuid
     *
     * @return string
     */
    public function getPuuid()
    {
        return $this->container['puuid'];
    }

    /**
     * Sets puuid
     *
     * @param string $puuid The encrypted puuid of this participant
     *
     * @return $this
     */
    public function setPuuid($puuid)
    {
        $this->container['puuid'] = $puuid;

        return $this;
    }

    /**
     * Gets spell1_id
     *
     * @return int
     */
    public function getSpell1Id()
    {
        return $this->container['spell1_id'];
    }

    /**
     * Sets spell1_id
     *
     * @param int $spell1_id The ID of the first summoner spell used by this participant
     *
     * @return $this
     */
    public function setSpell1Id($spell1_id)
    {
        $this->container['spell1_id'] = $spell1_id;

        return $this;
    }

    /**
     * Gets spell2_id
     *
     * @return int
     */
    public function getSpell2Id()
    {
        return $this->container['spell2_id'];
    }

    /**
     * Sets spell2_id
     *
     * @param int $spell2_id The ID of the second summoner spell used by this participant
     *
     * @return $this
     */
    public function setSpell2Id($spell2_id)
    {
        $this->container['spell2_id'] = $spell2_id;

        return $this;
    }

    /**
     * Gets game_customization_objects
     *
     * @return \Swagger\Client\Model\SpectatorTftV5GameCustomizationObject[]
     */
    public function getGameCustomizationObjects()
    {
        return $this->container['game_customization_objects'];
    }

    /**
     * Sets game_customization_objects
     *
     * @param \Swagger\Client\Model\SpectatorTftV5GameCustomizationObject[] $game_customization_objects List of Game Customizations
     *
     * @return $this
     */
    public function setGameCustomizationObjects($game_customization_objects)
    {
        $this->container['game_customization_objects'] = $game_customization_objects;

        return $this;
    }

    /**
     * Gets riot_id
     *
     * @return string
     */
    public function getRiotId()
    {
        return $this->container['riot_id'];
    }

    /**
     * Sets riot_id
     *
     * @param string $riot_id riot_id
     *
     * @return $this
     */
    public function setRiotId($riot_id)
    {
        $this->container['riot_id'] = $riot_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


