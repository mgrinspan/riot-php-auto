<?php
/**
 * ChampionMasteryV4ChampionMasteryDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Riot API
 *
 * OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. ***
 *
 * OpenAPI spec version: b7cd9f901117fa03f7c4e5f9c0a954dac569f75a
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ChampionMasteryV4ChampionMasteryDto Class Doc Comment
 *
 * @category Class
 * @description This object contains single Champion Mastery information for player and champion combination.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ChampionMasteryV4ChampionMasteryDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'champion-mastery-v4.ChampionMasteryDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'puuid' => 'string',
        'champion_points_until_next_level' => 'int',
        'chest_granted' => 'bool',
        'champion_id' => 'int',
        'last_play_time' => 'int',
        'champion_level' => 'int',
        'champion_points' => 'int',
        'champion_points_since_last_level' => 'int',
        'mark_required_for_next_level' => 'int',
        'champion_season_milestone' => 'int',
        'next_season_milestone' => '\Swagger\Client\Model\ChampionMasteryV4NextSeasonMilestonesDto',
        'tokens_earned' => 'int',
        'milestone_grades' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'puuid' => null,
        'champion_points_until_next_level' => 'int64',
        'chest_granted' => null,
        'champion_id' => 'int64',
        'last_play_time' => 'int64',
        'champion_level' => 'int32',
        'champion_points' => 'int32',
        'champion_points_since_last_level' => 'int64',
        'mark_required_for_next_level' => 'int32',
        'champion_season_milestone' => 'int32',
        'next_season_milestone' => null,
        'tokens_earned' => 'int32',
        'milestone_grades' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'puuid' => 'puuid',
        'champion_points_until_next_level' => 'championPointsUntilNextLevel',
        'chest_granted' => 'chestGranted',
        'champion_id' => 'championId',
        'last_play_time' => 'lastPlayTime',
        'champion_level' => 'championLevel',
        'champion_points' => 'championPoints',
        'champion_points_since_last_level' => 'championPointsSinceLastLevel',
        'mark_required_for_next_level' => 'markRequiredForNextLevel',
        'champion_season_milestone' => 'championSeasonMilestone',
        'next_season_milestone' => 'nextSeasonMilestone',
        'tokens_earned' => 'tokensEarned',
        'milestone_grades' => 'milestoneGrades'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'puuid' => 'setPuuid',
        'champion_points_until_next_level' => 'setChampionPointsUntilNextLevel',
        'chest_granted' => 'setChestGranted',
        'champion_id' => 'setChampionId',
        'last_play_time' => 'setLastPlayTime',
        'champion_level' => 'setChampionLevel',
        'champion_points' => 'setChampionPoints',
        'champion_points_since_last_level' => 'setChampionPointsSinceLastLevel',
        'mark_required_for_next_level' => 'setMarkRequiredForNextLevel',
        'champion_season_milestone' => 'setChampionSeasonMilestone',
        'next_season_milestone' => 'setNextSeasonMilestone',
        'tokens_earned' => 'setTokensEarned',
        'milestone_grades' => 'setMilestoneGrades'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'puuid' => 'getPuuid',
        'champion_points_until_next_level' => 'getChampionPointsUntilNextLevel',
        'chest_granted' => 'getChestGranted',
        'champion_id' => 'getChampionId',
        'last_play_time' => 'getLastPlayTime',
        'champion_level' => 'getChampionLevel',
        'champion_points' => 'getChampionPoints',
        'champion_points_since_last_level' => 'getChampionPointsSinceLastLevel',
        'mark_required_for_next_level' => 'getMarkRequiredForNextLevel',
        'champion_season_milestone' => 'getChampionSeasonMilestone',
        'next_season_milestone' => 'getNextSeasonMilestone',
        'tokens_earned' => 'getTokensEarned',
        'milestone_grades' => 'getMilestoneGrades'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['puuid'] = isset($data['puuid']) ? $data['puuid'] : null;
        $this->container['champion_points_until_next_level'] = isset($data['champion_points_until_next_level']) ? $data['champion_points_until_next_level'] : null;
        $this->container['chest_granted'] = isset($data['chest_granted']) ? $data['chest_granted'] : null;
        $this->container['champion_id'] = isset($data['champion_id']) ? $data['champion_id'] : null;
        $this->container['last_play_time'] = isset($data['last_play_time']) ? $data['last_play_time'] : null;
        $this->container['champion_level'] = isset($data['champion_level']) ? $data['champion_level'] : null;
        $this->container['champion_points'] = isset($data['champion_points']) ? $data['champion_points'] : null;
        $this->container['champion_points_since_last_level'] = isset($data['champion_points_since_last_level']) ? $data['champion_points_since_last_level'] : null;
        $this->container['mark_required_for_next_level'] = isset($data['mark_required_for_next_level']) ? $data['mark_required_for_next_level'] : null;
        $this->container['champion_season_milestone'] = isset($data['champion_season_milestone']) ? $data['champion_season_milestone'] : null;
        $this->container['next_season_milestone'] = isset($data['next_season_milestone']) ? $data['next_season_milestone'] : null;
        $this->container['tokens_earned'] = isset($data['tokens_earned']) ? $data['tokens_earned'] : null;
        $this->container['milestone_grades'] = isset($data['milestone_grades']) ? $data['milestone_grades'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['puuid'] === null) {
            $invalidProperties[] = "'puuid' can't be null";
        }
        if ($this->container['champion_points_until_next_level'] === null) {
            $invalidProperties[] = "'champion_points_until_next_level' can't be null";
        }
        if ($this->container['champion_id'] === null) {
            $invalidProperties[] = "'champion_id' can't be null";
        }
        if ($this->container['last_play_time'] === null) {
            $invalidProperties[] = "'last_play_time' can't be null";
        }
        if ($this->container['champion_level'] === null) {
            $invalidProperties[] = "'champion_level' can't be null";
        }
        if ($this->container['champion_points'] === null) {
            $invalidProperties[] = "'champion_points' can't be null";
        }
        if ($this->container['champion_points_since_last_level'] === null) {
            $invalidProperties[] = "'champion_points_since_last_level' can't be null";
        }
        if ($this->container['mark_required_for_next_level'] === null) {
            $invalidProperties[] = "'mark_required_for_next_level' can't be null";
        }
        if ($this->container['champion_season_milestone'] === null) {
            $invalidProperties[] = "'champion_season_milestone' can't be null";
        }
        if ($this->container['next_season_milestone'] === null) {
            $invalidProperties[] = "'next_season_milestone' can't be null";
        }
        if ($this->container['tokens_earned'] === null) {
            $invalidProperties[] = "'tokens_earned' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets puuid
     *
     * @return string
     */
    public function getPuuid()
    {
        return $this->container['puuid'];
    }

    /**
     * Sets puuid
     *
     * @param string $puuid Player Universal Unique Identifier. Exact length of 78 characters. (Encrypted)
     *
     * @return $this
     */
    public function setPuuid($puuid)
    {
        $this->container['puuid'] = $puuid;

        return $this;
    }

    /**
     * Gets champion_points_until_next_level
     *
     * @return int
     */
    public function getChampionPointsUntilNextLevel()
    {
        return $this->container['champion_points_until_next_level'];
    }

    /**
     * Sets champion_points_until_next_level
     *
     * @param int $champion_points_until_next_level Number of points needed to achieve next level. Zero if player reached maximum champion level for this champion.
     *
     * @return $this
     */
    public function setChampionPointsUntilNextLevel($champion_points_until_next_level)
    {
        $this->container['champion_points_until_next_level'] = $champion_points_until_next_level;

        return $this;
    }

    /**
     * Gets chest_granted
     *
     * @return bool
     */
    public function getChestGranted()
    {
        return $this->container['chest_granted'];
    }

    /**
     * Sets chest_granted
     *
     * @param bool $chest_granted Is chest granted for this champion or not in current season.
     *
     * @return $this
     */
    public function setChestGranted($chest_granted)
    {
        $this->container['chest_granted'] = $chest_granted;

        return $this;
    }

    /**
     * Gets champion_id
     *
     * @return int
     */
    public function getChampionId()
    {
        return $this->container['champion_id'];
    }

    /**
     * Sets champion_id
     *
     * @param int $champion_id Champion ID for this entry.
     *
     * @return $this
     */
    public function setChampionId($champion_id)
    {
        $this->container['champion_id'] = $champion_id;

        return $this;
    }

    /**
     * Gets last_play_time
     *
     * @return int
     */
    public function getLastPlayTime()
    {
        return $this->container['last_play_time'];
    }

    /**
     * Sets last_play_time
     *
     * @param int $last_play_time Last time this champion was played by this player - in Unix milliseconds time format.
     *
     * @return $this
     */
    public function setLastPlayTime($last_play_time)
    {
        $this->container['last_play_time'] = $last_play_time;

        return $this;
    }

    /**
     * Gets champion_level
     *
     * @return int
     */
    public function getChampionLevel()
    {
        return $this->container['champion_level'];
    }

    /**
     * Sets champion_level
     *
     * @param int $champion_level Champion level for specified player and champion combination.
     *
     * @return $this
     */
    public function setChampionLevel($champion_level)
    {
        $this->container['champion_level'] = $champion_level;

        return $this;
    }

    /**
     * Gets champion_points
     *
     * @return int
     */
    public function getChampionPoints()
    {
        return $this->container['champion_points'];
    }

    /**
     * Sets champion_points
     *
     * @param int $champion_points Total number of champion points for this player and champion combination - they are used to determine championLevel.
     *
     * @return $this
     */
    public function setChampionPoints($champion_points)
    {
        $this->container['champion_points'] = $champion_points;

        return $this;
    }

    /**
     * Gets champion_points_since_last_level
     *
     * @return int
     */
    public function getChampionPointsSinceLastLevel()
    {
        return $this->container['champion_points_since_last_level'];
    }

    /**
     * Sets champion_points_since_last_level
     *
     * @param int $champion_points_since_last_level Number of points earned since current level has been achieved.
     *
     * @return $this
     */
    public function setChampionPointsSinceLastLevel($champion_points_since_last_level)
    {
        $this->container['champion_points_since_last_level'] = $champion_points_since_last_level;

        return $this;
    }

    /**
     * Gets mark_required_for_next_level
     *
     * @return int
     */
    public function getMarkRequiredForNextLevel()
    {
        return $this->container['mark_required_for_next_level'];
    }

    /**
     * Sets mark_required_for_next_level
     *
     * @param int $mark_required_for_next_level mark_required_for_next_level
     *
     * @return $this
     */
    public function setMarkRequiredForNextLevel($mark_required_for_next_level)
    {
        $this->container['mark_required_for_next_level'] = $mark_required_for_next_level;

        return $this;
    }

    /**
     * Gets champion_season_milestone
     *
     * @return int
     */
    public function getChampionSeasonMilestone()
    {
        return $this->container['champion_season_milestone'];
    }

    /**
     * Sets champion_season_milestone
     *
     * @param int $champion_season_milestone champion_season_milestone
     *
     * @return $this
     */
    public function setChampionSeasonMilestone($champion_season_milestone)
    {
        $this->container['champion_season_milestone'] = $champion_season_milestone;

        return $this;
    }

    /**
     * Gets next_season_milestone
     *
     * @return \Swagger\Client\Model\ChampionMasteryV4NextSeasonMilestonesDto
     */
    public function getNextSeasonMilestone()
    {
        return $this->container['next_season_milestone'];
    }

    /**
     * Sets next_season_milestone
     *
     * @param \Swagger\Client\Model\ChampionMasteryV4NextSeasonMilestonesDto $next_season_milestone next_season_milestone
     *
     * @return $this
     */
    public function setNextSeasonMilestone($next_season_milestone)
    {
        $this->container['next_season_milestone'] = $next_season_milestone;

        return $this;
    }

    /**
     * Gets tokens_earned
     *
     * @return int
     */
    public function getTokensEarned()
    {
        return $this->container['tokens_earned'];
    }

    /**
     * Sets tokens_earned
     *
     * @param int $tokens_earned The token earned for this champion at the current championLevel. When the championLevel is advanced the tokensEarned resets to 0.
     *
     * @return $this
     */
    public function setTokensEarned($tokens_earned)
    {
        $this->container['tokens_earned'] = $tokens_earned;

        return $this;
    }

    /**
     * Gets milestone_grades
     *
     * @return string[]
     */
    public function getMilestoneGrades()
    {
        return $this->container['milestone_grades'];
    }

    /**
     * Sets milestone_grades
     *
     * @param string[] $milestone_grades milestone_grades
     *
     * @return $this
     */
    public function setMilestoneGrades($milestone_grades)
    {
        $this->container['milestone_grades'] = $milestone_grades;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


