<?php
/**
 * LeagueV4LeagueEntryDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Riot API
 *
 * OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. ***
 *
 * OpenAPI spec version: b7cd9f901117fa03f7c4e5f9c0a954dac569f75a
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * LeagueV4LeagueEntryDTO Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LeagueV4LeagueEntryDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'league-v4.LeagueEntryDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'league_id' => 'string',
        'summoner_id' => 'string',
        'queue_type' => 'string',
        'tier' => 'string',
        'rank' => 'string',
        'league_points' => 'int',
        'wins' => 'int',
        'losses' => 'int',
        'hot_streak' => 'bool',
        'veteran' => 'bool',
        'fresh_blood' => 'bool',
        'inactive' => 'bool',
        'mini_series' => '\Swagger\Client\Model\LeagueV4MiniSeriesDTO'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'league_id' => null,
        'summoner_id' => null,
        'queue_type' => null,
        'tier' => null,
        'rank' => null,
        'league_points' => 'int32',
        'wins' => 'int32',
        'losses' => 'int32',
        'hot_streak' => null,
        'veteran' => null,
        'fresh_blood' => null,
        'inactive' => null,
        'mini_series' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'league_id' => 'leagueId',
        'summoner_id' => 'summonerId',
        'queue_type' => 'queueType',
        'tier' => 'tier',
        'rank' => 'rank',
        'league_points' => 'leaguePoints',
        'wins' => 'wins',
        'losses' => 'losses',
        'hot_streak' => 'hotStreak',
        'veteran' => 'veteran',
        'fresh_blood' => 'freshBlood',
        'inactive' => 'inactive',
        'mini_series' => 'miniSeries'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'league_id' => 'setLeagueId',
        'summoner_id' => 'setSummonerId',
        'queue_type' => 'setQueueType',
        'tier' => 'setTier',
        'rank' => 'setRank',
        'league_points' => 'setLeaguePoints',
        'wins' => 'setWins',
        'losses' => 'setLosses',
        'hot_streak' => 'setHotStreak',
        'veteran' => 'setVeteran',
        'fresh_blood' => 'setFreshBlood',
        'inactive' => 'setInactive',
        'mini_series' => 'setMiniSeries'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'league_id' => 'getLeagueId',
        'summoner_id' => 'getSummonerId',
        'queue_type' => 'getQueueType',
        'tier' => 'getTier',
        'rank' => 'getRank',
        'league_points' => 'getLeaguePoints',
        'wins' => 'getWins',
        'losses' => 'getLosses',
        'hot_streak' => 'getHotStreak',
        'veteran' => 'getVeteran',
        'fresh_blood' => 'getFreshBlood',
        'inactive' => 'getInactive',
        'mini_series' => 'getMiniSeries'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['league_id'] = isset($data['league_id']) ? $data['league_id'] : null;
        $this->container['summoner_id'] = isset($data['summoner_id']) ? $data['summoner_id'] : null;
        $this->container['queue_type'] = isset($data['queue_type']) ? $data['queue_type'] : null;
        $this->container['tier'] = isset($data['tier']) ? $data['tier'] : null;
        $this->container['rank'] = isset($data['rank']) ? $data['rank'] : null;
        $this->container['league_points'] = isset($data['league_points']) ? $data['league_points'] : null;
        $this->container['wins'] = isset($data['wins']) ? $data['wins'] : null;
        $this->container['losses'] = isset($data['losses']) ? $data['losses'] : null;
        $this->container['hot_streak'] = isset($data['hot_streak']) ? $data['hot_streak'] : null;
        $this->container['veteran'] = isset($data['veteran']) ? $data['veteran'] : null;
        $this->container['fresh_blood'] = isset($data['fresh_blood']) ? $data['fresh_blood'] : null;
        $this->container['inactive'] = isset($data['inactive']) ? $data['inactive'] : null;
        $this->container['mini_series'] = isset($data['mini_series']) ? $data['mini_series'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['summoner_id'] === null) {
            $invalidProperties[] = "'summoner_id' can't be null";
        }
        if ($this->container['queue_type'] === null) {
            $invalidProperties[] = "'queue_type' can't be null";
        }
        if ($this->container['league_points'] === null) {
            $invalidProperties[] = "'league_points' can't be null";
        }
        if ($this->container['wins'] === null) {
            $invalidProperties[] = "'wins' can't be null";
        }
        if ($this->container['losses'] === null) {
            $invalidProperties[] = "'losses' can't be null";
        }
        if ($this->container['hot_streak'] === null) {
            $invalidProperties[] = "'hot_streak' can't be null";
        }
        if ($this->container['veteran'] === null) {
            $invalidProperties[] = "'veteran' can't be null";
        }
        if ($this->container['fresh_blood'] === null) {
            $invalidProperties[] = "'fresh_blood' can't be null";
        }
        if ($this->container['inactive'] === null) {
            $invalidProperties[] = "'inactive' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets league_id
     *
     * @return string
     */
    public function getLeagueId()
    {
        return $this->container['league_id'];
    }

    /**
     * Sets league_id
     *
     * @param string $league_id league_id
     *
     * @return $this
     */
    public function setLeagueId($league_id)
    {
        $this->container['league_id'] = $league_id;

        return $this;
    }

    /**
     * Gets summoner_id
     *
     * @return string
     */
    public function getSummonerId()
    {
        return $this->container['summoner_id'];
    }

    /**
     * Sets summoner_id
     *
     * @param string $summoner_id Player's encrypted summonerId.
     *
     * @return $this
     */
    public function setSummonerId($summoner_id)
    {
        $this->container['summoner_id'] = $summoner_id;

        return $this;
    }

    /**
     * Gets queue_type
     *
     * @return string
     */
    public function getQueueType()
    {
        return $this->container['queue_type'];
    }

    /**
     * Sets queue_type
     *
     * @param string $queue_type queue_type
     *
     * @return $this
     */
    public function setQueueType($queue_type)
    {
        $this->container['queue_type'] = $queue_type;

        return $this;
    }

    /**
     * Gets tier
     *
     * @return string
     */
    public function getTier()
    {
        return $this->container['tier'];
    }

    /**
     * Sets tier
     *
     * @param string $tier tier
     *
     * @return $this
     */
    public function setTier($tier)
    {
        $this->container['tier'] = $tier;

        return $this;
    }

    /**
     * Gets rank
     *
     * @return string
     */
    public function getRank()
    {
        return $this->container['rank'];
    }

    /**
     * Sets rank
     *
     * @param string $rank The player's division within a tier.
     *
     * @return $this
     */
    public function setRank($rank)
    {
        $this->container['rank'] = $rank;

        return $this;
    }

    /**
     * Gets league_points
     *
     * @return int
     */
    public function getLeaguePoints()
    {
        return $this->container['league_points'];
    }

    /**
     * Sets league_points
     *
     * @param int $league_points league_points
     *
     * @return $this
     */
    public function setLeaguePoints($league_points)
    {
        $this->container['league_points'] = $league_points;

        return $this;
    }

    /**
     * Gets wins
     *
     * @return int
     */
    public function getWins()
    {
        return $this->container['wins'];
    }

    /**
     * Sets wins
     *
     * @param int $wins Winning team on Summoners Rift.
     *
     * @return $this
     */
    public function setWins($wins)
    {
        $this->container['wins'] = $wins;

        return $this;
    }

    /**
     * Gets losses
     *
     * @return int
     */
    public function getLosses()
    {
        return $this->container['losses'];
    }

    /**
     * Sets losses
     *
     * @param int $losses Losing team on Summoners Rift.
     *
     * @return $this
     */
    public function setLosses($losses)
    {
        $this->container['losses'] = $losses;

        return $this;
    }

    /**
     * Gets hot_streak
     *
     * @return bool
     */
    public function getHotStreak()
    {
        return $this->container['hot_streak'];
    }

    /**
     * Sets hot_streak
     *
     * @param bool $hot_streak hot_streak
     *
     * @return $this
     */
    public function setHotStreak($hot_streak)
    {
        $this->container['hot_streak'] = $hot_streak;

        return $this;
    }

    /**
     * Gets veteran
     *
     * @return bool
     */
    public function getVeteran()
    {
        return $this->container['veteran'];
    }

    /**
     * Sets veteran
     *
     * @param bool $veteran veteran
     *
     * @return $this
     */
    public function setVeteran($veteran)
    {
        $this->container['veteran'] = $veteran;

        return $this;
    }

    /**
     * Gets fresh_blood
     *
     * @return bool
     */
    public function getFreshBlood()
    {
        return $this->container['fresh_blood'];
    }

    /**
     * Sets fresh_blood
     *
     * @param bool $fresh_blood fresh_blood
     *
     * @return $this
     */
    public function setFreshBlood($fresh_blood)
    {
        $this->container['fresh_blood'] = $fresh_blood;

        return $this;
    }

    /**
     * Gets inactive
     *
     * @return bool
     */
    public function getInactive()
    {
        return $this->container['inactive'];
    }

    /**
     * Sets inactive
     *
     * @param bool $inactive inactive
     *
     * @return $this
     */
    public function setInactive($inactive)
    {
        $this->container['inactive'] = $inactive;

        return $this;
    }

    /**
     * Gets mini_series
     *
     * @return \Swagger\Client\Model\LeagueV4MiniSeriesDTO
     */
    public function getMiniSeries()
    {
        return $this->container['mini_series'];
    }

    /**
     * Sets mini_series
     *
     * @param \Swagger\Client\Model\LeagueV4MiniSeriesDTO $mini_series mini_series
     *
     * @return $this
     */
    public function setMiniSeries($mini_series)
    {
        $this->container['mini_series'] = $mini_series;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


