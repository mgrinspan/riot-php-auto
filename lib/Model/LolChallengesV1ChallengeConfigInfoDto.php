<?php
/**
 * LolChallengesV1ChallengeConfigInfoDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Riot API
 *
 * OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. ***
 *
 * OpenAPI spec version: b7cd9f901117fa03f7c4e5f9c0a954dac569f75a
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * LolChallengesV1ChallengeConfigInfoDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LolChallengesV1ChallengeConfigInfoDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'lol-challenges-v1.ChallengeConfigInfoDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'localized_names' => 'map[string,map[string,string]]',
        'state' => 'string',
        'tracking' => 'string',
        'start_timestamp' => 'int',
        'end_timestamp' => 'int',
        'leaderboard' => 'bool',
        'thresholds' => 'map[string,double]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'localized_names' => null,
        'state' => null,
        'tracking' => null,
        'start_timestamp' => 'int64',
        'end_timestamp' => 'int64',
        'leaderboard' => null,
        'thresholds' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'localized_names' => 'localizedNames',
        'state' => 'state',
        'tracking' => 'tracking',
        'start_timestamp' => 'startTimestamp',
        'end_timestamp' => 'endTimestamp',
        'leaderboard' => 'leaderboard',
        'thresholds' => 'thresholds'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'localized_names' => 'setLocalizedNames',
        'state' => 'setState',
        'tracking' => 'setTracking',
        'start_timestamp' => 'setStartTimestamp',
        'end_timestamp' => 'setEndTimestamp',
        'leaderboard' => 'setLeaderboard',
        'thresholds' => 'setThresholds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'localized_names' => 'getLocalizedNames',
        'state' => 'getState',
        'tracking' => 'getTracking',
        'start_timestamp' => 'getStartTimestamp',
        'end_timestamp' => 'getEndTimestamp',
        'leaderboard' => 'getLeaderboard',
        'thresholds' => 'getThresholds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATE_DISABLED = 'DISABLED';
    const STATE_HIDDEN = 'HIDDEN';
    const STATE_ENABLED = 'ENABLED';
    const STATE_ARCHIVED = 'ARCHIVED';
    const TRACKING_LIFETIME = 'LIFETIME';
    const TRACKING_SEASON = 'SEASON';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_DISABLED,
            self::STATE_HIDDEN,
            self::STATE_ENABLED,
            self::STATE_ARCHIVED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTrackingAllowableValues()
    {
        return [
            self::TRACKING_LIFETIME,
            self::TRACKING_SEASON,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['localized_names'] = isset($data['localized_names']) ? $data['localized_names'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['tracking'] = isset($data['tracking']) ? $data['tracking'] : null;
        $this->container['start_timestamp'] = isset($data['start_timestamp']) ? $data['start_timestamp'] : null;
        $this->container['end_timestamp'] = isset($data['end_timestamp']) ? $data['end_timestamp'] : null;
        $this->container['leaderboard'] = isset($data['leaderboard']) ? $data['leaderboard'] : null;
        $this->container['thresholds'] = isset($data['thresholds']) ? $data['thresholds'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['localized_names'] === null) {
            $invalidProperties[] = "'localized_names' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTrackingAllowableValues();
        if (!is_null($this->container['tracking']) && !in_array($this->container['tracking'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'tracking', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['leaderboard'] === null) {
            $invalidProperties[] = "'leaderboard' can't be null";
        }
        if ($this->container['thresholds'] === null) {
            $invalidProperties[] = "'thresholds' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets localized_names
     *
     * @return map[string,map[string,string]]
     */
    public function getLocalizedNames()
    {
        return $this->container['localized_names'];
    }

    /**
     * Sets localized_names
     *
     * @param map[string,map[string,string]] $localized_names localized_names
     *
     * @return $this
     */
    public function setLocalizedNames($localized_names)
    {
        $this->container['localized_names'] = $localized_names;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state DISABLED - not visible and not calculated, HIDDEN - not visible, but calculated, ENABLED - visible and calculated, ARCHIVED - visible, but not calculated
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets tracking
     *
     * @return string
     */
    public function getTracking()
    {
        return $this->container['tracking'];
    }

    /**
     * Sets tracking
     *
     * @param string $tracking LIFETIME - stats are incremented without reset, SEASON - stats are accumulated by season and reset at the beginning of new season
     *
     * @return $this
     */
    public function setTracking($tracking)
    {
        $allowedValues = $this->getTrackingAllowableValues();
        if (!is_null($tracking) && !in_array($tracking, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'tracking', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tracking'] = $tracking;

        return $this;
    }

    /**
     * Gets start_timestamp
     *
     * @return int
     */
    public function getStartTimestamp()
    {
        return $this->container['start_timestamp'];
    }

    /**
     * Sets start_timestamp
     *
     * @param int $start_timestamp start_timestamp
     *
     * @return $this
     */
    public function setStartTimestamp($start_timestamp)
    {
        $this->container['start_timestamp'] = $start_timestamp;

        return $this;
    }

    /**
     * Gets end_timestamp
     *
     * @return int
     */
    public function getEndTimestamp()
    {
        return $this->container['end_timestamp'];
    }

    /**
     * Sets end_timestamp
     *
     * @param int $end_timestamp end_timestamp
     *
     * @return $this
     */
    public function setEndTimestamp($end_timestamp)
    {
        $this->container['end_timestamp'] = $end_timestamp;

        return $this;
    }

    /**
     * Gets leaderboard
     *
     * @return bool
     */
    public function getLeaderboard()
    {
        return $this->container['leaderboard'];
    }

    /**
     * Sets leaderboard
     *
     * @param bool $leaderboard leaderboard
     *
     * @return $this
     */
    public function setLeaderboard($leaderboard)
    {
        $this->container['leaderboard'] = $leaderboard;

        return $this;
    }

    /**
     * Gets thresholds
     *
     * @return map[string,double]
     */
    public function getThresholds()
    {
        return $this->container['thresholds'];
    }

    /**
     * Sets thresholds
     *
     * @param map[string,double] $thresholds thresholds
     *
     * @return $this
     */
    public function setThresholds($thresholds)
    {
        $this->container['thresholds'] = $thresholds;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


