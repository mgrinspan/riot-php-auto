<?php
/**
 * ValRankedV1LeaderboardDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Riot API
 *
 * OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. ***
 *
 * OpenAPI spec version: b7cd9f901117fa03f7c4e5f9c0a954dac569f75a
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ValRankedV1LeaderboardDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ValRankedV1LeaderboardDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'val-ranked-v1.LeaderboardDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'shard' => 'string',
        'act_id' => 'string',
        'total_players' => 'int',
        'players' => '\Swagger\Client\Model\ValRankedV1PlayerDto[]',
        'immortal_starting_page' => 'int',
        'immortal_starting_index' => 'int',
        'top_tier_rr_threshold' => 'int',
        'tier_details' => 'map[string,\Swagger\Client\Model\ValRankedV1TierDetailDto]',
        'start_index' => 'int',
        'query' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'shard' => null,
        'act_id' => null,
        'total_players' => 'int64',
        'players' => null,
        'immortal_starting_page' => 'int64',
        'immortal_starting_index' => 'int64',
        'top_tier_rr_threshold' => 'int64',
        'tier_details' => null,
        'start_index' => 'int64',
        'query' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shard' => 'shard',
        'act_id' => 'actId',
        'total_players' => 'totalPlayers',
        'players' => 'players',
        'immortal_starting_page' => 'immortalStartingPage',
        'immortal_starting_index' => 'immortalStartingIndex',
        'top_tier_rr_threshold' => 'topTierRRThreshold',
        'tier_details' => 'tierDetails',
        'start_index' => 'startIndex',
        'query' => 'query'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shard' => 'setShard',
        'act_id' => 'setActId',
        'total_players' => 'setTotalPlayers',
        'players' => 'setPlayers',
        'immortal_starting_page' => 'setImmortalStartingPage',
        'immortal_starting_index' => 'setImmortalStartingIndex',
        'top_tier_rr_threshold' => 'setTopTierRrThreshold',
        'tier_details' => 'setTierDetails',
        'start_index' => 'setStartIndex',
        'query' => 'setQuery'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shard' => 'getShard',
        'act_id' => 'getActId',
        'total_players' => 'getTotalPlayers',
        'players' => 'getPlayers',
        'immortal_starting_page' => 'getImmortalStartingPage',
        'immortal_starting_index' => 'getImmortalStartingIndex',
        'top_tier_rr_threshold' => 'getTopTierRrThreshold',
        'tier_details' => 'getTierDetails',
        'start_index' => 'getStartIndex',
        'query' => 'getQuery'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['shard'] = isset($data['shard']) ? $data['shard'] : null;
        $this->container['act_id'] = isset($data['act_id']) ? $data['act_id'] : null;
        $this->container['total_players'] = isset($data['total_players']) ? $data['total_players'] : null;
        $this->container['players'] = isset($data['players']) ? $data['players'] : null;
        $this->container['immortal_starting_page'] = isset($data['immortal_starting_page']) ? $data['immortal_starting_page'] : null;
        $this->container['immortal_starting_index'] = isset($data['immortal_starting_index']) ? $data['immortal_starting_index'] : null;
        $this->container['top_tier_rr_threshold'] = isset($data['top_tier_rr_threshold']) ? $data['top_tier_rr_threshold'] : null;
        $this->container['tier_details'] = isset($data['tier_details']) ? $data['tier_details'] : null;
        $this->container['start_index'] = isset($data['start_index']) ? $data['start_index'] : null;
        $this->container['query'] = isset($data['query']) ? $data['query'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['shard'] === null) {
            $invalidProperties[] = "'shard' can't be null";
        }
        if ($this->container['act_id'] === null) {
            $invalidProperties[] = "'act_id' can't be null";
        }
        if ($this->container['total_players'] === null) {
            $invalidProperties[] = "'total_players' can't be null";
        }
        if ($this->container['players'] === null) {
            $invalidProperties[] = "'players' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shard
     *
     * @return string
     */
    public function getShard()
    {
        return $this->container['shard'];
    }

    /**
     * Sets shard
     *
     * @param string $shard The shard for the given leaderboard.
     *
     * @return $this
     */
    public function setShard($shard)
    {
        $this->container['shard'] = $shard;

        return $this;
    }

    /**
     * Gets act_id
     *
     * @return string
     */
    public function getActId()
    {
        return $this->container['act_id'];
    }

    /**
     * Sets act_id
     *
     * @param string $act_id The act id for the given leaderboard. Act ids can be found using the val-content API.
     *
     * @return $this
     */
    public function setActId($act_id)
    {
        $this->container['act_id'] = $act_id;

        return $this;
    }

    /**
     * Gets total_players
     *
     * @return int
     */
    public function getTotalPlayers()
    {
        return $this->container['total_players'];
    }

    /**
     * Sets total_players
     *
     * @param int $total_players The total number of players in the leaderboard.
     *
     * @return $this
     */
    public function setTotalPlayers($total_players)
    {
        $this->container['total_players'] = $total_players;

        return $this;
    }

    /**
     * Gets players
     *
     * @return \Swagger\Client\Model\ValRankedV1PlayerDto[]
     */
    public function getPlayers()
    {
        return $this->container['players'];
    }

    /**
     * Sets players
     *
     * @param \Swagger\Client\Model\ValRankedV1PlayerDto[] $players players
     *
     * @return $this
     */
    public function setPlayers($players)
    {
        $this->container['players'] = $players;

        return $this;
    }

    /**
     * Gets immortal_starting_page
     *
     * @return int
     */
    public function getImmortalStartingPage()
    {
        return $this->container['immortal_starting_page'];
    }

    /**
     * Sets immortal_starting_page
     *
     * @param int $immortal_starting_page immortal_starting_page
     *
     * @return $this
     */
    public function setImmortalStartingPage($immortal_starting_page)
    {
        $this->container['immortal_starting_page'] = $immortal_starting_page;

        return $this;
    }

    /**
     * Gets immortal_starting_index
     *
     * @return int
     */
    public function getImmortalStartingIndex()
    {
        return $this->container['immortal_starting_index'];
    }

    /**
     * Sets immortal_starting_index
     *
     * @param int $immortal_starting_index immortal_starting_index
     *
     * @return $this
     */
    public function setImmortalStartingIndex($immortal_starting_index)
    {
        $this->container['immortal_starting_index'] = $immortal_starting_index;

        return $this;
    }

    /**
     * Gets top_tier_rr_threshold
     *
     * @return int
     */
    public function getTopTierRrThreshold()
    {
        return $this->container['top_tier_rr_threshold'];
    }

    /**
     * Sets top_tier_rr_threshold
     *
     * @param int $top_tier_rr_threshold top_tier_rr_threshold
     *
     * @return $this
     */
    public function setTopTierRrThreshold($top_tier_rr_threshold)
    {
        $this->container['top_tier_rr_threshold'] = $top_tier_rr_threshold;

        return $this;
    }

    /**
     * Gets tier_details
     *
     * @return map[string,\Swagger\Client\Model\ValRankedV1TierDetailDto]
     */
    public function getTierDetails()
    {
        return $this->container['tier_details'];
    }

    /**
     * Sets tier_details
     *
     * @param map[string,\Swagger\Client\Model\ValRankedV1TierDetailDto] $tier_details tier_details
     *
     * @return $this
     */
    public function setTierDetails($tier_details)
    {
        $this->container['tier_details'] = $tier_details;

        return $this;
    }

    /**
     * Gets start_index
     *
     * @return int
     */
    public function getStartIndex()
    {
        return $this->container['start_index'];
    }

    /**
     * Sets start_index
     *
     * @param int $start_index start_index
     *
     * @return $this
     */
    public function setStartIndex($start_index)
    {
        $this->container['start_index'] = $start_index;

        return $this;
    }

    /**
     * Gets query
     *
     * @return string
     */
    public function getQuery()
    {
        return $this->container['query'];
    }

    /**
     * Sets query
     *
     * @param string $query query
     *
     * @return $this
     */
    public function setQuery($query)
    {
        $this->container['query'] = $query;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


