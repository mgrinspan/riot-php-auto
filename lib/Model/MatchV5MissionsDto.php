<?php
/**
 * MatchV5MissionsDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Riot API
 *
 * OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. ***
 *
 * OpenAPI spec version: b7cd9f901117fa03f7c4e5f9c0a954dac569f75a
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MatchV5MissionsDto Class Doc Comment
 *
 * @category Class
 * @description Missions DTO
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MatchV5MissionsDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'match-v5.MissionsDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'player_score0' => 'int',
        'player_score1' => 'int',
        'player_score2' => 'int',
        'player_score3' => 'int',
        'player_score4' => 'int',
        'player_score5' => 'int',
        'player_score6' => 'int',
        'player_score7' => 'int',
        'player_score8' => 'int',
        'player_score9' => 'int',
        'player_score10' => 'int',
        'player_score11' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'player_score0' => 'int32',
        'player_score1' => 'int32',
        'player_score2' => 'int32',
        'player_score3' => 'int32',
        'player_score4' => 'int32',
        'player_score5' => 'int32',
        'player_score6' => 'int32',
        'player_score7' => 'int32',
        'player_score8' => 'int32',
        'player_score9' => 'int32',
        'player_score10' => 'int32',
        'player_score11' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'player_score0' => 'playerScore0',
        'player_score1' => 'playerScore1',
        'player_score2' => 'playerScore2',
        'player_score3' => 'playerScore3',
        'player_score4' => 'playerScore4',
        'player_score5' => 'playerScore5',
        'player_score6' => 'playerScore6',
        'player_score7' => 'playerScore7',
        'player_score8' => 'playerScore8',
        'player_score9' => 'playerScore9',
        'player_score10' => 'playerScore10',
        'player_score11' => 'playerScore11'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'player_score0' => 'setPlayerScore0',
        'player_score1' => 'setPlayerScore1',
        'player_score2' => 'setPlayerScore2',
        'player_score3' => 'setPlayerScore3',
        'player_score4' => 'setPlayerScore4',
        'player_score5' => 'setPlayerScore5',
        'player_score6' => 'setPlayerScore6',
        'player_score7' => 'setPlayerScore7',
        'player_score8' => 'setPlayerScore8',
        'player_score9' => 'setPlayerScore9',
        'player_score10' => 'setPlayerScore10',
        'player_score11' => 'setPlayerScore11'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'player_score0' => 'getPlayerScore0',
        'player_score1' => 'getPlayerScore1',
        'player_score2' => 'getPlayerScore2',
        'player_score3' => 'getPlayerScore3',
        'player_score4' => 'getPlayerScore4',
        'player_score5' => 'getPlayerScore5',
        'player_score6' => 'getPlayerScore6',
        'player_score7' => 'getPlayerScore7',
        'player_score8' => 'getPlayerScore8',
        'player_score9' => 'getPlayerScore9',
        'player_score10' => 'getPlayerScore10',
        'player_score11' => 'getPlayerScore11'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['player_score0'] = isset($data['player_score0']) ? $data['player_score0'] : null;
        $this->container['player_score1'] = isset($data['player_score1']) ? $data['player_score1'] : null;
        $this->container['player_score2'] = isset($data['player_score2']) ? $data['player_score2'] : null;
        $this->container['player_score3'] = isset($data['player_score3']) ? $data['player_score3'] : null;
        $this->container['player_score4'] = isset($data['player_score4']) ? $data['player_score4'] : null;
        $this->container['player_score5'] = isset($data['player_score5']) ? $data['player_score5'] : null;
        $this->container['player_score6'] = isset($data['player_score6']) ? $data['player_score6'] : null;
        $this->container['player_score7'] = isset($data['player_score7']) ? $data['player_score7'] : null;
        $this->container['player_score8'] = isset($data['player_score8']) ? $data['player_score8'] : null;
        $this->container['player_score9'] = isset($data['player_score9']) ? $data['player_score9'] : null;
        $this->container['player_score10'] = isset($data['player_score10']) ? $data['player_score10'] : null;
        $this->container['player_score11'] = isset($data['player_score11']) ? $data['player_score11'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets player_score0
     *
     * @return int
     */
    public function getPlayerScore0()
    {
        return $this->container['player_score0'];
    }

    /**
     * Sets player_score0
     *
     * @param int $player_score0 player_score0
     *
     * @return $this
     */
    public function setPlayerScore0($player_score0)
    {
        $this->container['player_score0'] = $player_score0;

        return $this;
    }

    /**
     * Gets player_score1
     *
     * @return int
     */
    public function getPlayerScore1()
    {
        return $this->container['player_score1'];
    }

    /**
     * Sets player_score1
     *
     * @param int $player_score1 player_score1
     *
     * @return $this
     */
    public function setPlayerScore1($player_score1)
    {
        $this->container['player_score1'] = $player_score1;

        return $this;
    }

    /**
     * Gets player_score2
     *
     * @return int
     */
    public function getPlayerScore2()
    {
        return $this->container['player_score2'];
    }

    /**
     * Sets player_score2
     *
     * @param int $player_score2 player_score2
     *
     * @return $this
     */
    public function setPlayerScore2($player_score2)
    {
        $this->container['player_score2'] = $player_score2;

        return $this;
    }

    /**
     * Gets player_score3
     *
     * @return int
     */
    public function getPlayerScore3()
    {
        return $this->container['player_score3'];
    }

    /**
     * Sets player_score3
     *
     * @param int $player_score3 player_score3
     *
     * @return $this
     */
    public function setPlayerScore3($player_score3)
    {
        $this->container['player_score3'] = $player_score3;

        return $this;
    }

    /**
     * Gets player_score4
     *
     * @return int
     */
    public function getPlayerScore4()
    {
        return $this->container['player_score4'];
    }

    /**
     * Sets player_score4
     *
     * @param int $player_score4 player_score4
     *
     * @return $this
     */
    public function setPlayerScore4($player_score4)
    {
        $this->container['player_score4'] = $player_score4;

        return $this;
    }

    /**
     * Gets player_score5
     *
     * @return int
     */
    public function getPlayerScore5()
    {
        return $this->container['player_score5'];
    }

    /**
     * Sets player_score5
     *
     * @param int $player_score5 player_score5
     *
     * @return $this
     */
    public function setPlayerScore5($player_score5)
    {
        $this->container['player_score5'] = $player_score5;

        return $this;
    }

    /**
     * Gets player_score6
     *
     * @return int
     */
    public function getPlayerScore6()
    {
        return $this->container['player_score6'];
    }

    /**
     * Sets player_score6
     *
     * @param int $player_score6 player_score6
     *
     * @return $this
     */
    public function setPlayerScore6($player_score6)
    {
        $this->container['player_score6'] = $player_score6;

        return $this;
    }

    /**
     * Gets player_score7
     *
     * @return int
     */
    public function getPlayerScore7()
    {
        return $this->container['player_score7'];
    }

    /**
     * Sets player_score7
     *
     * @param int $player_score7 player_score7
     *
     * @return $this
     */
    public function setPlayerScore7($player_score7)
    {
        $this->container['player_score7'] = $player_score7;

        return $this;
    }

    /**
     * Gets player_score8
     *
     * @return int
     */
    public function getPlayerScore8()
    {
        return $this->container['player_score8'];
    }

    /**
     * Sets player_score8
     *
     * @param int $player_score8 player_score8
     *
     * @return $this
     */
    public function setPlayerScore8($player_score8)
    {
        $this->container['player_score8'] = $player_score8;

        return $this;
    }

    /**
     * Gets player_score9
     *
     * @return int
     */
    public function getPlayerScore9()
    {
        return $this->container['player_score9'];
    }

    /**
     * Sets player_score9
     *
     * @param int $player_score9 player_score9
     *
     * @return $this
     */
    public function setPlayerScore9($player_score9)
    {
        $this->container['player_score9'] = $player_score9;

        return $this;
    }

    /**
     * Gets player_score10
     *
     * @return int
     */
    public function getPlayerScore10()
    {
        return $this->container['player_score10'];
    }

    /**
     * Sets player_score10
     *
     * @param int $player_score10 player_score10
     *
     * @return $this
     */
    public function setPlayerScore10($player_score10)
    {
        $this->container['player_score10'] = $player_score10;

        return $this;
    }

    /**
     * Gets player_score11
     *
     * @return int
     */
    public function getPlayerScore11()
    {
        return $this->container['player_score11'];
    }

    /**
     * Sets player_score11
     *
     * @param int $player_score11 player_score11
     *
     * @return $this
     */
    public function setPlayerScore11($player_score11)
    {
        $this->container['player_score11'] = $player_score11;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


