<?php
/**
 * MatchV5EventsTimeLineDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Riot API
 *
 * OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. ***
 *
 * OpenAPI spec version: b7cd9f901117fa03f7c4e5f9c0a954dac569f75a
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MatchV5EventsTimeLineDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MatchV5EventsTimeLineDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'match-v5.EventsTimeLineDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'timestamp' => 'int',
        'real_timestamp' => 'int',
        'type' => 'string',
        'item_id' => 'int',
        'participant_id' => 'int',
        'level_up_type' => 'string',
        'skill_slot' => 'int',
        'creator_id' => 'int',
        'ward_type' => 'string',
        'level' => 'int',
        'assisting_participant_ids' => 'int[]',
        'bounty' => 'int',
        'kill_streak_length' => 'int',
        'killer_id' => 'int',
        'position' => '\Swagger\Client\Model\MatchV5PositionDto',
        'victim_damage_dealt' => '\Swagger\Client\Model\MatchV5MatchTimelineVictimDamage[]',
        'victim_damage_received' => '\Swagger\Client\Model\MatchV5MatchTimelineVictimDamage[]',
        'victim_id' => 'int',
        'kill_type' => 'string',
        'lane_type' => 'string',
        'team_id' => 'int',
        'multi_kill_length' => 'int',
        'killer_team_id' => 'int',
        'monster_type' => 'string',
        'monster_sub_type' => 'string',
        'building_type' => 'string',
        'tower_type' => 'string',
        'after_id' => 'int',
        'before_id' => 'int',
        'gold_gain' => 'int',
        'game_id' => 'int',
        'winning_team' => 'int',
        'transform_type' => 'string',
        'name' => 'string',
        'shutdown_bounty' => 'int',
        'actual_start_time' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'timestamp' => 'int64',
        'real_timestamp' => 'int64',
        'type' => null,
        'item_id' => 'int32',
        'participant_id' => 'int32',
        'level_up_type' => null,
        'skill_slot' => 'int32',
        'creator_id' => 'int32',
        'ward_type' => null,
        'level' => 'int32',
        'assisting_participant_ids' => 'int32',
        'bounty' => 'int32',
        'kill_streak_length' => 'int32',
        'killer_id' => 'int32',
        'position' => null,
        'victim_damage_dealt' => null,
        'victim_damage_received' => null,
        'victim_id' => 'int32',
        'kill_type' => null,
        'lane_type' => null,
        'team_id' => 'int32',
        'multi_kill_length' => 'int32',
        'killer_team_id' => 'int32',
        'monster_type' => null,
        'monster_sub_type' => null,
        'building_type' => null,
        'tower_type' => null,
        'after_id' => 'int32',
        'before_id' => 'int32',
        'gold_gain' => 'int32',
        'game_id' => 'int64',
        'winning_team' => 'int32',
        'transform_type' => null,
        'name' => null,
        'shutdown_bounty' => 'int32',
        'actual_start_time' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'timestamp' => 'timestamp',
        'real_timestamp' => 'realTimestamp',
        'type' => 'type',
        'item_id' => 'itemId',
        'participant_id' => 'participantId',
        'level_up_type' => 'levelUpType',
        'skill_slot' => 'skillSlot',
        'creator_id' => 'creatorId',
        'ward_type' => 'wardType',
        'level' => 'level',
        'assisting_participant_ids' => 'assistingParticipantIds',
        'bounty' => 'bounty',
        'kill_streak_length' => 'killStreakLength',
        'killer_id' => 'killerId',
        'position' => 'position',
        'victim_damage_dealt' => 'victimDamageDealt',
        'victim_damage_received' => 'victimDamageReceived',
        'victim_id' => 'victimId',
        'kill_type' => 'killType',
        'lane_type' => 'laneType',
        'team_id' => 'teamId',
        'multi_kill_length' => 'multiKillLength',
        'killer_team_id' => 'killerTeamId',
        'monster_type' => 'monsterType',
        'monster_sub_type' => 'monsterSubType',
        'building_type' => 'buildingType',
        'tower_type' => 'towerType',
        'after_id' => 'afterId',
        'before_id' => 'beforeId',
        'gold_gain' => 'goldGain',
        'game_id' => 'gameId',
        'winning_team' => 'winningTeam',
        'transform_type' => 'transformType',
        'name' => 'name',
        'shutdown_bounty' => 'shutdownBounty',
        'actual_start_time' => 'actualStartTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'timestamp' => 'setTimestamp',
        'real_timestamp' => 'setRealTimestamp',
        'type' => 'setType',
        'item_id' => 'setItemId',
        'participant_id' => 'setParticipantId',
        'level_up_type' => 'setLevelUpType',
        'skill_slot' => 'setSkillSlot',
        'creator_id' => 'setCreatorId',
        'ward_type' => 'setWardType',
        'level' => 'setLevel',
        'assisting_participant_ids' => 'setAssistingParticipantIds',
        'bounty' => 'setBounty',
        'kill_streak_length' => 'setKillStreakLength',
        'killer_id' => 'setKillerId',
        'position' => 'setPosition',
        'victim_damage_dealt' => 'setVictimDamageDealt',
        'victim_damage_received' => 'setVictimDamageReceived',
        'victim_id' => 'setVictimId',
        'kill_type' => 'setKillType',
        'lane_type' => 'setLaneType',
        'team_id' => 'setTeamId',
        'multi_kill_length' => 'setMultiKillLength',
        'killer_team_id' => 'setKillerTeamId',
        'monster_type' => 'setMonsterType',
        'monster_sub_type' => 'setMonsterSubType',
        'building_type' => 'setBuildingType',
        'tower_type' => 'setTowerType',
        'after_id' => 'setAfterId',
        'before_id' => 'setBeforeId',
        'gold_gain' => 'setGoldGain',
        'game_id' => 'setGameId',
        'winning_team' => 'setWinningTeam',
        'transform_type' => 'setTransformType',
        'name' => 'setName',
        'shutdown_bounty' => 'setShutdownBounty',
        'actual_start_time' => 'setActualStartTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'timestamp' => 'getTimestamp',
        'real_timestamp' => 'getRealTimestamp',
        'type' => 'getType',
        'item_id' => 'getItemId',
        'participant_id' => 'getParticipantId',
        'level_up_type' => 'getLevelUpType',
        'skill_slot' => 'getSkillSlot',
        'creator_id' => 'getCreatorId',
        'ward_type' => 'getWardType',
        'level' => 'getLevel',
        'assisting_participant_ids' => 'getAssistingParticipantIds',
        'bounty' => 'getBounty',
        'kill_streak_length' => 'getKillStreakLength',
        'killer_id' => 'getKillerId',
        'position' => 'getPosition',
        'victim_damage_dealt' => 'getVictimDamageDealt',
        'victim_damage_received' => 'getVictimDamageReceived',
        'victim_id' => 'getVictimId',
        'kill_type' => 'getKillType',
        'lane_type' => 'getLaneType',
        'team_id' => 'getTeamId',
        'multi_kill_length' => 'getMultiKillLength',
        'killer_team_id' => 'getKillerTeamId',
        'monster_type' => 'getMonsterType',
        'monster_sub_type' => 'getMonsterSubType',
        'building_type' => 'getBuildingType',
        'tower_type' => 'getTowerType',
        'after_id' => 'getAfterId',
        'before_id' => 'getBeforeId',
        'gold_gain' => 'getGoldGain',
        'game_id' => 'getGameId',
        'winning_team' => 'getWinningTeam',
        'transform_type' => 'getTransformType',
        'name' => 'getName',
        'shutdown_bounty' => 'getShutdownBounty',
        'actual_start_time' => 'getActualStartTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
        $this->container['real_timestamp'] = isset($data['real_timestamp']) ? $data['real_timestamp'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['item_id'] = isset($data['item_id']) ? $data['item_id'] : null;
        $this->container['participant_id'] = isset($data['participant_id']) ? $data['participant_id'] : null;
        $this->container['level_up_type'] = isset($data['level_up_type']) ? $data['level_up_type'] : null;
        $this->container['skill_slot'] = isset($data['skill_slot']) ? $data['skill_slot'] : null;
        $this->container['creator_id'] = isset($data['creator_id']) ? $data['creator_id'] : null;
        $this->container['ward_type'] = isset($data['ward_type']) ? $data['ward_type'] : null;
        $this->container['level'] = isset($data['level']) ? $data['level'] : null;
        $this->container['assisting_participant_ids'] = isset($data['assisting_participant_ids']) ? $data['assisting_participant_ids'] : null;
        $this->container['bounty'] = isset($data['bounty']) ? $data['bounty'] : null;
        $this->container['kill_streak_length'] = isset($data['kill_streak_length']) ? $data['kill_streak_length'] : null;
        $this->container['killer_id'] = isset($data['killer_id']) ? $data['killer_id'] : null;
        $this->container['position'] = isset($data['position']) ? $data['position'] : null;
        $this->container['victim_damage_dealt'] = isset($data['victim_damage_dealt']) ? $data['victim_damage_dealt'] : null;
        $this->container['victim_damage_received'] = isset($data['victim_damage_received']) ? $data['victim_damage_received'] : null;
        $this->container['victim_id'] = isset($data['victim_id']) ? $data['victim_id'] : null;
        $this->container['kill_type'] = isset($data['kill_type']) ? $data['kill_type'] : null;
        $this->container['lane_type'] = isset($data['lane_type']) ? $data['lane_type'] : null;
        $this->container['team_id'] = isset($data['team_id']) ? $data['team_id'] : null;
        $this->container['multi_kill_length'] = isset($data['multi_kill_length']) ? $data['multi_kill_length'] : null;
        $this->container['killer_team_id'] = isset($data['killer_team_id']) ? $data['killer_team_id'] : null;
        $this->container['monster_type'] = isset($data['monster_type']) ? $data['monster_type'] : null;
        $this->container['monster_sub_type'] = isset($data['monster_sub_type']) ? $data['monster_sub_type'] : null;
        $this->container['building_type'] = isset($data['building_type']) ? $data['building_type'] : null;
        $this->container['tower_type'] = isset($data['tower_type']) ? $data['tower_type'] : null;
        $this->container['after_id'] = isset($data['after_id']) ? $data['after_id'] : null;
        $this->container['before_id'] = isset($data['before_id']) ? $data['before_id'] : null;
        $this->container['gold_gain'] = isset($data['gold_gain']) ? $data['gold_gain'] : null;
        $this->container['game_id'] = isset($data['game_id']) ? $data['game_id'] : null;
        $this->container['winning_team'] = isset($data['winning_team']) ? $data['winning_team'] : null;
        $this->container['transform_type'] = isset($data['transform_type']) ? $data['transform_type'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['shutdown_bounty'] = isset($data['shutdown_bounty']) ? $data['shutdown_bounty'] : null;
        $this->container['actual_start_time'] = isset($data['actual_start_time']) ? $data['actual_start_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['timestamp'] === null) {
            $invalidProperties[] = "'timestamp' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets timestamp
     *
     * @return int
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param int $timestamp timestamp
     *
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets real_timestamp
     *
     * @return int
     */
    public function getRealTimestamp()
    {
        return $this->container['real_timestamp'];
    }

    /**
     * Sets real_timestamp
     *
     * @param int $real_timestamp real_timestamp
     *
     * @return $this
     */
    public function setRealTimestamp($real_timestamp)
    {
        $this->container['real_timestamp'] = $real_timestamp;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets item_id
     *
     * @return int
     */
    public function getItemId()
    {
        return $this->container['item_id'];
    }

    /**
     * Sets item_id
     *
     * @param int $item_id item_id
     *
     * @return $this
     */
    public function setItemId($item_id)
    {
        $this->container['item_id'] = $item_id;

        return $this;
    }

    /**
     * Gets participant_id
     *
     * @return int
     */
    public function getParticipantId()
    {
        return $this->container['participant_id'];
    }

    /**
     * Sets participant_id
     *
     * @param int $participant_id participant_id
     *
     * @return $this
     */
    public function setParticipantId($participant_id)
    {
        $this->container['participant_id'] = $participant_id;

        return $this;
    }

    /**
     * Gets level_up_type
     *
     * @return string
     */
    public function getLevelUpType()
    {
        return $this->container['level_up_type'];
    }

    /**
     * Sets level_up_type
     *
     * @param string $level_up_type level_up_type
     *
     * @return $this
     */
    public function setLevelUpType($level_up_type)
    {
        $this->container['level_up_type'] = $level_up_type;

        return $this;
    }

    /**
     * Gets skill_slot
     *
     * @return int
     */
    public function getSkillSlot()
    {
        return $this->container['skill_slot'];
    }

    /**
     * Sets skill_slot
     *
     * @param int $skill_slot skill_slot
     *
     * @return $this
     */
    public function setSkillSlot($skill_slot)
    {
        $this->container['skill_slot'] = $skill_slot;

        return $this;
    }

    /**
     * Gets creator_id
     *
     * @return int
     */
    public function getCreatorId()
    {
        return $this->container['creator_id'];
    }

    /**
     * Sets creator_id
     *
     * @param int $creator_id creator_id
     *
     * @return $this
     */
    public function setCreatorId($creator_id)
    {
        $this->container['creator_id'] = $creator_id;

        return $this;
    }

    /**
     * Gets ward_type
     *
     * @return string
     */
    public function getWardType()
    {
        return $this->container['ward_type'];
    }

    /**
     * Sets ward_type
     *
     * @param string $ward_type ward_type
     *
     * @return $this
     */
    public function setWardType($ward_type)
    {
        $this->container['ward_type'] = $ward_type;

        return $this;
    }

    /**
     * Gets level
     *
     * @return int
     */
    public function getLevel()
    {
        return $this->container['level'];
    }

    /**
     * Sets level
     *
     * @param int $level level
     *
     * @return $this
     */
    public function setLevel($level)
    {
        $this->container['level'] = $level;

        return $this;
    }

    /**
     * Gets assisting_participant_ids
     *
     * @return int[]
     */
    public function getAssistingParticipantIds()
    {
        return $this->container['assisting_participant_ids'];
    }

    /**
     * Sets assisting_participant_ids
     *
     * @param int[] $assisting_participant_ids assisting_participant_ids
     *
     * @return $this
     */
    public function setAssistingParticipantIds($assisting_participant_ids)
    {
        $this->container['assisting_participant_ids'] = $assisting_participant_ids;

        return $this;
    }

    /**
     * Gets bounty
     *
     * @return int
     */
    public function getBounty()
    {
        return $this->container['bounty'];
    }

    /**
     * Sets bounty
     *
     * @param int $bounty bounty
     *
     * @return $this
     */
    public function setBounty($bounty)
    {
        $this->container['bounty'] = $bounty;

        return $this;
    }

    /**
     * Gets kill_streak_length
     *
     * @return int
     */
    public function getKillStreakLength()
    {
        return $this->container['kill_streak_length'];
    }

    /**
     * Sets kill_streak_length
     *
     * @param int $kill_streak_length kill_streak_length
     *
     * @return $this
     */
    public function setKillStreakLength($kill_streak_length)
    {
        $this->container['kill_streak_length'] = $kill_streak_length;

        return $this;
    }

    /**
     * Gets killer_id
     *
     * @return int
     */
    public function getKillerId()
    {
        return $this->container['killer_id'];
    }

    /**
     * Sets killer_id
     *
     * @param int $killer_id killer_id
     *
     * @return $this
     */
    public function setKillerId($killer_id)
    {
        $this->container['killer_id'] = $killer_id;

        return $this;
    }

    /**
     * Gets position
     *
     * @return \Swagger\Client\Model\MatchV5PositionDto
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param \Swagger\Client\Model\MatchV5PositionDto $position position
     *
     * @return $this
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets victim_damage_dealt
     *
     * @return \Swagger\Client\Model\MatchV5MatchTimelineVictimDamage[]
     */
    public function getVictimDamageDealt()
    {
        return $this->container['victim_damage_dealt'];
    }

    /**
     * Sets victim_damage_dealt
     *
     * @param \Swagger\Client\Model\MatchV5MatchTimelineVictimDamage[] $victim_damage_dealt victim_damage_dealt
     *
     * @return $this
     */
    public function setVictimDamageDealt($victim_damage_dealt)
    {
        $this->container['victim_damage_dealt'] = $victim_damage_dealt;

        return $this;
    }

    /**
     * Gets victim_damage_received
     *
     * @return \Swagger\Client\Model\MatchV5MatchTimelineVictimDamage[]
     */
    public function getVictimDamageReceived()
    {
        return $this->container['victim_damage_received'];
    }

    /**
     * Sets victim_damage_received
     *
     * @param \Swagger\Client\Model\MatchV5MatchTimelineVictimDamage[] $victim_damage_received victim_damage_received
     *
     * @return $this
     */
    public function setVictimDamageReceived($victim_damage_received)
    {
        $this->container['victim_damage_received'] = $victim_damage_received;

        return $this;
    }

    /**
     * Gets victim_id
     *
     * @return int
     */
    public function getVictimId()
    {
        return $this->container['victim_id'];
    }

    /**
     * Sets victim_id
     *
     * @param int $victim_id victim_id
     *
     * @return $this
     */
    public function setVictimId($victim_id)
    {
        $this->container['victim_id'] = $victim_id;

        return $this;
    }

    /**
     * Gets kill_type
     *
     * @return string
     */
    public function getKillType()
    {
        return $this->container['kill_type'];
    }

    /**
     * Sets kill_type
     *
     * @param string $kill_type kill_type
     *
     * @return $this
     */
    public function setKillType($kill_type)
    {
        $this->container['kill_type'] = $kill_type;

        return $this;
    }

    /**
     * Gets lane_type
     *
     * @return string
     */
    public function getLaneType()
    {
        return $this->container['lane_type'];
    }

    /**
     * Sets lane_type
     *
     * @param string $lane_type lane_type
     *
     * @return $this
     */
    public function setLaneType($lane_type)
    {
        $this->container['lane_type'] = $lane_type;

        return $this;
    }

    /**
     * Gets team_id
     *
     * @return int
     */
    public function getTeamId()
    {
        return $this->container['team_id'];
    }

    /**
     * Sets team_id
     *
     * @param int $team_id team_id
     *
     * @return $this
     */
    public function setTeamId($team_id)
    {
        $this->container['team_id'] = $team_id;

        return $this;
    }

    /**
     * Gets multi_kill_length
     *
     * @return int
     */
    public function getMultiKillLength()
    {
        return $this->container['multi_kill_length'];
    }

    /**
     * Sets multi_kill_length
     *
     * @param int $multi_kill_length multi_kill_length
     *
     * @return $this
     */
    public function setMultiKillLength($multi_kill_length)
    {
        $this->container['multi_kill_length'] = $multi_kill_length;

        return $this;
    }

    /**
     * Gets killer_team_id
     *
     * @return int
     */
    public function getKillerTeamId()
    {
        return $this->container['killer_team_id'];
    }

    /**
     * Sets killer_team_id
     *
     * @param int $killer_team_id killer_team_id
     *
     * @return $this
     */
    public function setKillerTeamId($killer_team_id)
    {
        $this->container['killer_team_id'] = $killer_team_id;

        return $this;
    }

    /**
     * Gets monster_type
     *
     * @return string
     */
    public function getMonsterType()
    {
        return $this->container['monster_type'];
    }

    /**
     * Sets monster_type
     *
     * @param string $monster_type monster_type
     *
     * @return $this
     */
    public function setMonsterType($monster_type)
    {
        $this->container['monster_type'] = $monster_type;

        return $this;
    }

    /**
     * Gets monster_sub_type
     *
     * @return string
     */
    public function getMonsterSubType()
    {
        return $this->container['monster_sub_type'];
    }

    /**
     * Sets monster_sub_type
     *
     * @param string $monster_sub_type monster_sub_type
     *
     * @return $this
     */
    public function setMonsterSubType($monster_sub_type)
    {
        $this->container['monster_sub_type'] = $monster_sub_type;

        return $this;
    }

    /**
     * Gets building_type
     *
     * @return string
     */
    public function getBuildingType()
    {
        return $this->container['building_type'];
    }

    /**
     * Sets building_type
     *
     * @param string $building_type building_type
     *
     * @return $this
     */
    public function setBuildingType($building_type)
    {
        $this->container['building_type'] = $building_type;

        return $this;
    }

    /**
     * Gets tower_type
     *
     * @return string
     */
    public function getTowerType()
    {
        return $this->container['tower_type'];
    }

    /**
     * Sets tower_type
     *
     * @param string $tower_type tower_type
     *
     * @return $this
     */
    public function setTowerType($tower_type)
    {
        $this->container['tower_type'] = $tower_type;

        return $this;
    }

    /**
     * Gets after_id
     *
     * @return int
     */
    public function getAfterId()
    {
        return $this->container['after_id'];
    }

    /**
     * Sets after_id
     *
     * @param int $after_id after_id
     *
     * @return $this
     */
    public function setAfterId($after_id)
    {
        $this->container['after_id'] = $after_id;

        return $this;
    }

    /**
     * Gets before_id
     *
     * @return int
     */
    public function getBeforeId()
    {
        return $this->container['before_id'];
    }

    /**
     * Sets before_id
     *
     * @param int $before_id before_id
     *
     * @return $this
     */
    public function setBeforeId($before_id)
    {
        $this->container['before_id'] = $before_id;

        return $this;
    }

    /**
     * Gets gold_gain
     *
     * @return int
     */
    public function getGoldGain()
    {
        return $this->container['gold_gain'];
    }

    /**
     * Sets gold_gain
     *
     * @param int $gold_gain gold_gain
     *
     * @return $this
     */
    public function setGoldGain($gold_gain)
    {
        $this->container['gold_gain'] = $gold_gain;

        return $this;
    }

    /**
     * Gets game_id
     *
     * @return int
     */
    public function getGameId()
    {
        return $this->container['game_id'];
    }

    /**
     * Sets game_id
     *
     * @param int $game_id game_id
     *
     * @return $this
     */
    public function setGameId($game_id)
    {
        $this->container['game_id'] = $game_id;

        return $this;
    }

    /**
     * Gets winning_team
     *
     * @return int
     */
    public function getWinningTeam()
    {
        return $this->container['winning_team'];
    }

    /**
     * Sets winning_team
     *
     * @param int $winning_team winning_team
     *
     * @return $this
     */
    public function setWinningTeam($winning_team)
    {
        $this->container['winning_team'] = $winning_team;

        return $this;
    }

    /**
     * Gets transform_type
     *
     * @return string
     */
    public function getTransformType()
    {
        return $this->container['transform_type'];
    }

    /**
     * Sets transform_type
     *
     * @param string $transform_type transform_type
     *
     * @return $this
     */
    public function setTransformType($transform_type)
    {
        $this->container['transform_type'] = $transform_type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets shutdown_bounty
     *
     * @return int
     */
    public function getShutdownBounty()
    {
        return $this->container['shutdown_bounty'];
    }

    /**
     * Sets shutdown_bounty
     *
     * @param int $shutdown_bounty shutdown_bounty
     *
     * @return $this
     */
    public function setShutdownBounty($shutdown_bounty)
    {
        $this->container['shutdown_bounty'] = $shutdown_bounty;

        return $this;
    }

    /**
     * Gets actual_start_time
     *
     * @return int
     */
    public function getActualStartTime()
    {
        return $this->container['actual_start_time'];
    }

    /**
     * Sets actual_start_time
     *
     * @param int $actual_start_time actual_start_time
     *
     * @return $this
     */
    public function setActualStartTime($actual_start_time)
    {
        $this->container['actual_start_time'] = $actual_start_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


