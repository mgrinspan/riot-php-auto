<?php
/**
 * ChampionMasteryV4NextSeasonMilestonesDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Riot API
 *
 * OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. ***
 *
 * OpenAPI spec version: b7cd9f901117fa03f7c4e5f9c0a954dac569f75a
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ChampionMasteryV4NextSeasonMilestonesDto Class Doc Comment
 *
 * @category Class
 * @description This object contains required next season milestone information.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ChampionMasteryV4NextSeasonMilestonesDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'champion-mastery-v4.NextSeasonMilestonesDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'require_grade_counts' => 'map[string,int]',
        'reward_marks' => 'int',
        'bonus' => 'bool',
        'reward_config' => '\Swagger\Client\Model\ChampionMasteryV4RewardConfigDto',
        'total_games_requires' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'require_grade_counts' => 'int32',
        'reward_marks' => 'int32',
        'bonus' => null,
        'reward_config' => null,
        'total_games_requires' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'require_grade_counts' => 'requireGradeCounts',
        'reward_marks' => 'rewardMarks',
        'bonus' => 'bonus',
        'reward_config' => 'rewardConfig',
        'total_games_requires' => 'totalGamesRequires'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'require_grade_counts' => 'setRequireGradeCounts',
        'reward_marks' => 'setRewardMarks',
        'bonus' => 'setBonus',
        'reward_config' => 'setRewardConfig',
        'total_games_requires' => 'setTotalGamesRequires'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'require_grade_counts' => 'getRequireGradeCounts',
        'reward_marks' => 'getRewardMarks',
        'bonus' => 'getBonus',
        'reward_config' => 'getRewardConfig',
        'total_games_requires' => 'getTotalGamesRequires'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['require_grade_counts'] = isset($data['require_grade_counts']) ? $data['require_grade_counts'] : null;
        $this->container['reward_marks'] = isset($data['reward_marks']) ? $data['reward_marks'] : null;
        $this->container['bonus'] = isset($data['bonus']) ? $data['bonus'] : null;
        $this->container['reward_config'] = isset($data['reward_config']) ? $data['reward_config'] : null;
        $this->container['total_games_requires'] = isset($data['total_games_requires']) ? $data['total_games_requires'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['require_grade_counts'] === null) {
            $invalidProperties[] = "'require_grade_counts' can't be null";
        }
        if ($this->container['reward_marks'] === null) {
            $invalidProperties[] = "'reward_marks' can't be null";
        }
        if ($this->container['bonus'] === null) {
            $invalidProperties[] = "'bonus' can't be null";
        }
        if ($this->container['total_games_requires'] === null) {
            $invalidProperties[] = "'total_games_requires' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets require_grade_counts
     *
     * @return map[string,int]
     */
    public function getRequireGradeCounts()
    {
        return $this->container['require_grade_counts'];
    }

    /**
     * Sets require_grade_counts
     *
     * @param map[string,int] $require_grade_counts require_grade_counts
     *
     * @return $this
     */
    public function setRequireGradeCounts($require_grade_counts)
    {
        $this->container['require_grade_counts'] = $require_grade_counts;

        return $this;
    }

    /**
     * Gets reward_marks
     *
     * @return int
     */
    public function getRewardMarks()
    {
        return $this->container['reward_marks'];
    }

    /**
     * Sets reward_marks
     *
     * @param int $reward_marks Reward marks.
     *
     * @return $this
     */
    public function setRewardMarks($reward_marks)
    {
        $this->container['reward_marks'] = $reward_marks;

        return $this;
    }

    /**
     * Gets bonus
     *
     * @return bool
     */
    public function getBonus()
    {
        return $this->container['bonus'];
    }

    /**
     * Sets bonus
     *
     * @param bool $bonus Bonus.
     *
     * @return $this
     */
    public function setBonus($bonus)
    {
        $this->container['bonus'] = $bonus;

        return $this;
    }

    /**
     * Gets reward_config
     *
     * @return \Swagger\Client\Model\ChampionMasteryV4RewardConfigDto
     */
    public function getRewardConfig()
    {
        return $this->container['reward_config'];
    }

    /**
     * Sets reward_config
     *
     * @param \Swagger\Client\Model\ChampionMasteryV4RewardConfigDto $reward_config Reward configuration.
     *
     * @return $this
     */
    public function setRewardConfig($reward_config)
    {
        $this->container['reward_config'] = $reward_config;

        return $this;
    }

    /**
     * Gets total_games_requires
     *
     * @return int
     */
    public function getTotalGamesRequires()
    {
        return $this->container['total_games_requires'];
    }

    /**
     * Sets total_games_requires
     *
     * @param int $total_games_requires total_games_requires
     *
     * @return $this
     */
    public function setTotalGamesRequires($total_games_requires)
    {
        $this->container['total_games_requires'] = $total_games_requires;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


