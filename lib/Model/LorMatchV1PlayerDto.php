<?php
/**
 * LorMatchV1PlayerDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Riot API
 *
 * OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. ***
 *
 * OpenAPI spec version: b7cd9f901117fa03f7c4e5f9c0a954dac569f75a
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * LorMatchV1PlayerDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LorMatchV1PlayerDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'lor-match-v1.PlayerDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'puuid' => 'string',
        'deck_id' => 'string',
        'deck_code' => 'string',
        'factions' => 'string[]',
        'game_outcome' => 'string',
        'order_of_play' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'puuid' => null,
        'deck_id' => null,
        'deck_code' => null,
        'factions' => null,
        'game_outcome' => null,
        'order_of_play' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'puuid' => 'puuid',
        'deck_id' => 'deck_id',
        'deck_code' => 'deck_code',
        'factions' => 'factions',
        'game_outcome' => 'game_outcome',
        'order_of_play' => 'order_of_play'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'puuid' => 'setPuuid',
        'deck_id' => 'setDeckId',
        'deck_code' => 'setDeckCode',
        'factions' => 'setFactions',
        'game_outcome' => 'setGameOutcome',
        'order_of_play' => 'setOrderOfPlay'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'puuid' => 'getPuuid',
        'deck_id' => 'getDeckId',
        'deck_code' => 'getDeckCode',
        'factions' => 'getFactions',
        'game_outcome' => 'getGameOutcome',
        'order_of_play' => 'getOrderOfPlay'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['puuid'] = isset($data['puuid']) ? $data['puuid'] : null;
        $this->container['deck_id'] = isset($data['deck_id']) ? $data['deck_id'] : null;
        $this->container['deck_code'] = isset($data['deck_code']) ? $data['deck_code'] : null;
        $this->container['factions'] = isset($data['factions']) ? $data['factions'] : null;
        $this->container['game_outcome'] = isset($data['game_outcome']) ? $data['game_outcome'] : null;
        $this->container['order_of_play'] = isset($data['order_of_play']) ? $data['order_of_play'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['puuid'] === null) {
            $invalidProperties[] = "'puuid' can't be null";
        }
        if ($this->container['deck_id'] === null) {
            $invalidProperties[] = "'deck_id' can't be null";
        }
        if ($this->container['deck_code'] === null) {
            $invalidProperties[] = "'deck_code' can't be null";
        }
        if ($this->container['factions'] === null) {
            $invalidProperties[] = "'factions' can't be null";
        }
        if ($this->container['game_outcome'] === null) {
            $invalidProperties[] = "'game_outcome' can't be null";
        }
        if ($this->container['order_of_play'] === null) {
            $invalidProperties[] = "'order_of_play' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets puuid
     *
     * @return string
     */
    public function getPuuid()
    {
        return $this->container['puuid'];
    }

    /**
     * Sets puuid
     *
     * @param string $puuid puuid
     *
     * @return $this
     */
    public function setPuuid($puuid)
    {
        $this->container['puuid'] = $puuid;

        return $this;
    }

    /**
     * Gets deck_id
     *
     * @return string
     */
    public function getDeckId()
    {
        return $this->container['deck_id'];
    }

    /**
     * Sets deck_id
     *
     * @param string $deck_id deck_id
     *
     * @return $this
     */
    public function setDeckId($deck_id)
    {
        $this->container['deck_id'] = $deck_id;

        return $this;
    }

    /**
     * Gets deck_code
     *
     * @return string
     */
    public function getDeckCode()
    {
        return $this->container['deck_code'];
    }

    /**
     * Sets deck_code
     *
     * @param string $deck_code Code for the deck played. Refer to LOR documentation for details on deck codes.
     *
     * @return $this
     */
    public function setDeckCode($deck_code)
    {
        $this->container['deck_code'] = $deck_code;

        return $this;
    }

    /**
     * Gets factions
     *
     * @return string[]
     */
    public function getFactions()
    {
        return $this->container['factions'];
    }

    /**
     * Sets factions
     *
     * @param string[] $factions factions
     *
     * @return $this
     */
    public function setFactions($factions)
    {
        $this->container['factions'] = $factions;

        return $this;
    }

    /**
     * Gets game_outcome
     *
     * @return string
     */
    public function getGameOutcome()
    {
        return $this->container['game_outcome'];
    }

    /**
     * Sets game_outcome
     *
     * @param string $game_outcome game_outcome
     *
     * @return $this
     */
    public function setGameOutcome($game_outcome)
    {
        $this->container['game_outcome'] = $game_outcome;

        return $this;
    }

    /**
     * Gets order_of_play
     *
     * @return int
     */
    public function getOrderOfPlay()
    {
        return $this->container['order_of_play'];
    }

    /**
     * Sets order_of_play
     *
     * @param int $order_of_play The order in which the players took turns.
     *
     * @return $this
     */
    public function setOrderOfPlay($order_of_play)
    {
        $this->container['order_of_play'] = $order_of_play;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


