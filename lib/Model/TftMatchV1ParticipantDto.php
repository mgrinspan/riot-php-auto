<?php
/**
 * TftMatchV1ParticipantDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Riot API
 *
 * OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. ***
 *
 * OpenAPI spec version: b7cd9f901117fa03f7c4e5f9c0a954dac569f75a
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TftMatchV1ParticipantDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TftMatchV1ParticipantDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'tft-match-v1.ParticipantDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'companion' => '\Swagger\Client\Model\TftMatchV1CompanionDto',
        'gold_left' => 'int',
        'last_round' => 'int',
        'level' => 'int',
        'placement' => 'int',
        'players_eliminated' => 'int',
        'puuid' => 'string',
        'time_eliminated' => 'float',
        'total_damage_to_players' => 'int',
        'traits' => '\Swagger\Client\Model\TftMatchV1TraitDto[]',
        'units' => '\Swagger\Client\Model\TftMatchV1UnitDto[]',
        'augments' => 'string[]',
        'partner_group_id' => 'int',
        'missions' => '\Swagger\Client\Model\TftMatchV1ParticipantMissionsDto'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'companion' => null,
        'gold_left' => 'int32',
        'last_round' => 'int32',
        'level' => 'int32',
        'placement' => 'int32',
        'players_eliminated' => 'int32',
        'puuid' => null,
        'time_eliminated' => 'float',
        'total_damage_to_players' => 'int32',
        'traits' => null,
        'units' => null,
        'augments' => null,
        'partner_group_id' => 'int32',
        'missions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'companion' => 'companion',
        'gold_left' => 'gold_left',
        'last_round' => 'last_round',
        'level' => 'level',
        'placement' => 'placement',
        'players_eliminated' => 'players_eliminated',
        'puuid' => 'puuid',
        'time_eliminated' => 'time_eliminated',
        'total_damage_to_players' => 'total_damage_to_players',
        'traits' => 'traits',
        'units' => 'units',
        'augments' => 'augments',
        'partner_group_id' => 'partner_group_id',
        'missions' => 'missions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'companion' => 'setCompanion',
        'gold_left' => 'setGoldLeft',
        'last_round' => 'setLastRound',
        'level' => 'setLevel',
        'placement' => 'setPlacement',
        'players_eliminated' => 'setPlayersEliminated',
        'puuid' => 'setPuuid',
        'time_eliminated' => 'setTimeEliminated',
        'total_damage_to_players' => 'setTotalDamageToPlayers',
        'traits' => 'setTraits',
        'units' => 'setUnits',
        'augments' => 'setAugments',
        'partner_group_id' => 'setPartnerGroupId',
        'missions' => 'setMissions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'companion' => 'getCompanion',
        'gold_left' => 'getGoldLeft',
        'last_round' => 'getLastRound',
        'level' => 'getLevel',
        'placement' => 'getPlacement',
        'players_eliminated' => 'getPlayersEliminated',
        'puuid' => 'getPuuid',
        'time_eliminated' => 'getTimeEliminated',
        'total_damage_to_players' => 'getTotalDamageToPlayers',
        'traits' => 'getTraits',
        'units' => 'getUnits',
        'augments' => 'getAugments',
        'partner_group_id' => 'getPartnerGroupId',
        'missions' => 'getMissions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['companion'] = isset($data['companion']) ? $data['companion'] : null;
        $this->container['gold_left'] = isset($data['gold_left']) ? $data['gold_left'] : null;
        $this->container['last_round'] = isset($data['last_round']) ? $data['last_round'] : null;
        $this->container['level'] = isset($data['level']) ? $data['level'] : null;
        $this->container['placement'] = isset($data['placement']) ? $data['placement'] : null;
        $this->container['players_eliminated'] = isset($data['players_eliminated']) ? $data['players_eliminated'] : null;
        $this->container['puuid'] = isset($data['puuid']) ? $data['puuid'] : null;
        $this->container['time_eliminated'] = isset($data['time_eliminated']) ? $data['time_eliminated'] : null;
        $this->container['total_damage_to_players'] = isset($data['total_damage_to_players']) ? $data['total_damage_to_players'] : null;
        $this->container['traits'] = isset($data['traits']) ? $data['traits'] : null;
        $this->container['units'] = isset($data['units']) ? $data['units'] : null;
        $this->container['augments'] = isset($data['augments']) ? $data['augments'] : null;
        $this->container['partner_group_id'] = isset($data['partner_group_id']) ? $data['partner_group_id'] : null;
        $this->container['missions'] = isset($data['missions']) ? $data['missions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['companion'] === null) {
            $invalidProperties[] = "'companion' can't be null";
        }
        if ($this->container['gold_left'] === null) {
            $invalidProperties[] = "'gold_left' can't be null";
        }
        if ($this->container['last_round'] === null) {
            $invalidProperties[] = "'last_round' can't be null";
        }
        if ($this->container['level'] === null) {
            $invalidProperties[] = "'level' can't be null";
        }
        if ($this->container['placement'] === null) {
            $invalidProperties[] = "'placement' can't be null";
        }
        if ($this->container['players_eliminated'] === null) {
            $invalidProperties[] = "'players_eliminated' can't be null";
        }
        if ($this->container['puuid'] === null) {
            $invalidProperties[] = "'puuid' can't be null";
        }
        if ($this->container['time_eliminated'] === null) {
            $invalidProperties[] = "'time_eliminated' can't be null";
        }
        if ($this->container['total_damage_to_players'] === null) {
            $invalidProperties[] = "'total_damage_to_players' can't be null";
        }
        if ($this->container['traits'] === null) {
            $invalidProperties[] = "'traits' can't be null";
        }
        if ($this->container['units'] === null) {
            $invalidProperties[] = "'units' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets companion
     *
     * @return \Swagger\Client\Model\TftMatchV1CompanionDto
     */
    public function getCompanion()
    {
        return $this->container['companion'];
    }

    /**
     * Sets companion
     *
     * @param \Swagger\Client\Model\TftMatchV1CompanionDto $companion Participant's companion.
     *
     * @return $this
     */
    public function setCompanion($companion)
    {
        $this->container['companion'] = $companion;

        return $this;
    }

    /**
     * Gets gold_left
     *
     * @return int
     */
    public function getGoldLeft()
    {
        return $this->container['gold_left'];
    }

    /**
     * Sets gold_left
     *
     * @param int $gold_left Gold left after participant was eliminated.
     *
     * @return $this
     */
    public function setGoldLeft($gold_left)
    {
        $this->container['gold_left'] = $gold_left;

        return $this;
    }

    /**
     * Gets last_round
     *
     * @return int
     */
    public function getLastRound()
    {
        return $this->container['last_round'];
    }

    /**
     * Sets last_round
     *
     * @param int $last_round The round the participant was eliminated in. Note: If the player was eliminated in stage 2-1 their last_round would be 5.
     *
     * @return $this
     */
    public function setLastRound($last_round)
    {
        $this->container['last_round'] = $last_round;

        return $this;
    }

    /**
     * Gets level
     *
     * @return int
     */
    public function getLevel()
    {
        return $this->container['level'];
    }

    /**
     * Sets level
     *
     * @param int $level Participant Little Legend level. Note: This is not the number of active units.
     *
     * @return $this
     */
    public function setLevel($level)
    {
        $this->container['level'] = $level;

        return $this;
    }

    /**
     * Gets placement
     *
     * @return int
     */
    public function getPlacement()
    {
        return $this->container['placement'];
    }

    /**
     * Sets placement
     *
     * @param int $placement Participant placement upon elimination.
     *
     * @return $this
     */
    public function setPlacement($placement)
    {
        $this->container['placement'] = $placement;

        return $this;
    }

    /**
     * Gets players_eliminated
     *
     * @return int
     */
    public function getPlayersEliminated()
    {
        return $this->container['players_eliminated'];
    }

    /**
     * Sets players_eliminated
     *
     * @param int $players_eliminated Number of players the participant eliminated.
     *
     * @return $this
     */
    public function setPlayersEliminated($players_eliminated)
    {
        $this->container['players_eliminated'] = $players_eliminated;

        return $this;
    }

    /**
     * Gets puuid
     *
     * @return string
     */
    public function getPuuid()
    {
        return $this->container['puuid'];
    }

    /**
     * Sets puuid
     *
     * @param string $puuid puuid
     *
     * @return $this
     */
    public function setPuuid($puuid)
    {
        $this->container['puuid'] = $puuid;

        return $this;
    }

    /**
     * Gets time_eliminated
     *
     * @return float
     */
    public function getTimeEliminated()
    {
        return $this->container['time_eliminated'];
    }

    /**
     * Sets time_eliminated
     *
     * @param float $time_eliminated The number of seconds before the participant was eliminated.
     *
     * @return $this
     */
    public function setTimeEliminated($time_eliminated)
    {
        $this->container['time_eliminated'] = $time_eliminated;

        return $this;
    }

    /**
     * Gets total_damage_to_players
     *
     * @return int
     */
    public function getTotalDamageToPlayers()
    {
        return $this->container['total_damage_to_players'];
    }

    /**
     * Sets total_damage_to_players
     *
     * @param int $total_damage_to_players Damage the participant dealt to other players.
     *
     * @return $this
     */
    public function setTotalDamageToPlayers($total_damage_to_players)
    {
        $this->container['total_damage_to_players'] = $total_damage_to_players;

        return $this;
    }

    /**
     * Gets traits
     *
     * @return \Swagger\Client\Model\TftMatchV1TraitDto[]
     */
    public function getTraits()
    {
        return $this->container['traits'];
    }

    /**
     * Sets traits
     *
     * @param \Swagger\Client\Model\TftMatchV1TraitDto[] $traits A complete list of traits for the participant's active units.
     *
     * @return $this
     */
    public function setTraits($traits)
    {
        $this->container['traits'] = $traits;

        return $this;
    }

    /**
     * Gets units
     *
     * @return \Swagger\Client\Model\TftMatchV1UnitDto[]
     */
    public function getUnits()
    {
        return $this->container['units'];
    }

    /**
     * Sets units
     *
     * @param \Swagger\Client\Model\TftMatchV1UnitDto[] $units A list of active units for the participant.
     *
     * @return $this
     */
    public function setUnits($units)
    {
        $this->container['units'] = $units;

        return $this;
    }

    /**
     * Gets augments
     *
     * @return string[]
     */
    public function getAugments()
    {
        return $this->container['augments'];
    }

    /**
     * Sets augments
     *
     * @param string[] $augments augments
     *
     * @return $this
     */
    public function setAugments($augments)
    {
        $this->container['augments'] = $augments;

        return $this;
    }

    /**
     * Gets partner_group_id
     *
     * @return int
     */
    public function getPartnerGroupId()
    {
        return $this->container['partner_group_id'];
    }

    /**
     * Sets partner_group_id
     *
     * @param int $partner_group_id partner_group_id
     *
     * @return $this
     */
    public function setPartnerGroupId($partner_group_id)
    {
        $this->container['partner_group_id'] = $partner_group_id;

        return $this;
    }

    /**
     * Gets missions
     *
     * @return \Swagger\Client\Model\TftMatchV1ParticipantMissionsDto
     */
    public function getMissions()
    {
        return $this->container['missions'];
    }

    /**
     * Sets missions
     *
     * @param \Swagger\Client\Model\TftMatchV1ParticipantMissionsDto $missions missions
     *
     * @return $this
     */
    public function setMissions($missions)
    {
        $this->container['missions'] = $missions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


