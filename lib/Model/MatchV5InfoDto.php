<?php
/**
 * MatchV5InfoDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Riot API
 *
 * OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. ***
 *
 * OpenAPI spec version: b7cd9f901117fa03f7c4e5f9c0a954dac569f75a
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MatchV5InfoDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MatchV5InfoDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'match-v5.InfoDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'end_of_game_result' => 'string',
        'game_creation' => 'int',
        'game_duration' => 'int',
        'game_end_timestamp' => 'int',
        'game_id' => 'int',
        'game_mode' => 'string',
        'game_name' => 'string',
        'game_start_timestamp' => 'int',
        'game_type' => 'string',
        'game_version' => 'string',
        'map_id' => 'int',
        'participants' => '\Swagger\Client\Model\MatchV5ParticipantDto[]',
        'platform_id' => 'string',
        'queue_id' => 'int',
        'teams' => '\Swagger\Client\Model\MatchV5TeamDto[]',
        'tournament_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'end_of_game_result' => null,
        'game_creation' => 'int64',
        'game_duration' => 'int64',
        'game_end_timestamp' => 'int64',
        'game_id' => 'int64',
        'game_mode' => null,
        'game_name' => null,
        'game_start_timestamp' => 'int64',
        'game_type' => null,
        'game_version' => null,
        'map_id' => 'int32',
        'participants' => null,
        'platform_id' => null,
        'queue_id' => 'int32',
        'teams' => null,
        'tournament_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'end_of_game_result' => 'endOfGameResult',
        'game_creation' => 'gameCreation',
        'game_duration' => 'gameDuration',
        'game_end_timestamp' => 'gameEndTimestamp',
        'game_id' => 'gameId',
        'game_mode' => 'gameMode',
        'game_name' => 'gameName',
        'game_start_timestamp' => 'gameStartTimestamp',
        'game_type' => 'gameType',
        'game_version' => 'gameVersion',
        'map_id' => 'mapId',
        'participants' => 'participants',
        'platform_id' => 'platformId',
        'queue_id' => 'queueId',
        'teams' => 'teams',
        'tournament_code' => 'tournamentCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'end_of_game_result' => 'setEndOfGameResult',
        'game_creation' => 'setGameCreation',
        'game_duration' => 'setGameDuration',
        'game_end_timestamp' => 'setGameEndTimestamp',
        'game_id' => 'setGameId',
        'game_mode' => 'setGameMode',
        'game_name' => 'setGameName',
        'game_start_timestamp' => 'setGameStartTimestamp',
        'game_type' => 'setGameType',
        'game_version' => 'setGameVersion',
        'map_id' => 'setMapId',
        'participants' => 'setParticipants',
        'platform_id' => 'setPlatformId',
        'queue_id' => 'setQueueId',
        'teams' => 'setTeams',
        'tournament_code' => 'setTournamentCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'end_of_game_result' => 'getEndOfGameResult',
        'game_creation' => 'getGameCreation',
        'game_duration' => 'getGameDuration',
        'game_end_timestamp' => 'getGameEndTimestamp',
        'game_id' => 'getGameId',
        'game_mode' => 'getGameMode',
        'game_name' => 'getGameName',
        'game_start_timestamp' => 'getGameStartTimestamp',
        'game_type' => 'getGameType',
        'game_version' => 'getGameVersion',
        'map_id' => 'getMapId',
        'participants' => 'getParticipants',
        'platform_id' => 'getPlatformId',
        'queue_id' => 'getQueueId',
        'teams' => 'getTeams',
        'tournament_code' => 'getTournamentCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['end_of_game_result'] = isset($data['end_of_game_result']) ? $data['end_of_game_result'] : null;
        $this->container['game_creation'] = isset($data['game_creation']) ? $data['game_creation'] : null;
        $this->container['game_duration'] = isset($data['game_duration']) ? $data['game_duration'] : null;
        $this->container['game_end_timestamp'] = isset($data['game_end_timestamp']) ? $data['game_end_timestamp'] : null;
        $this->container['game_id'] = isset($data['game_id']) ? $data['game_id'] : null;
        $this->container['game_mode'] = isset($data['game_mode']) ? $data['game_mode'] : null;
        $this->container['game_name'] = isset($data['game_name']) ? $data['game_name'] : null;
        $this->container['game_start_timestamp'] = isset($data['game_start_timestamp']) ? $data['game_start_timestamp'] : null;
        $this->container['game_type'] = isset($data['game_type']) ? $data['game_type'] : null;
        $this->container['game_version'] = isset($data['game_version']) ? $data['game_version'] : null;
        $this->container['map_id'] = isset($data['map_id']) ? $data['map_id'] : null;
        $this->container['participants'] = isset($data['participants']) ? $data['participants'] : null;
        $this->container['platform_id'] = isset($data['platform_id']) ? $data['platform_id'] : null;
        $this->container['queue_id'] = isset($data['queue_id']) ? $data['queue_id'] : null;
        $this->container['teams'] = isset($data['teams']) ? $data['teams'] : null;
        $this->container['tournament_code'] = isset($data['tournament_code']) ? $data['tournament_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['game_creation'] === null) {
            $invalidProperties[] = "'game_creation' can't be null";
        }
        if ($this->container['game_duration'] === null) {
            $invalidProperties[] = "'game_duration' can't be null";
        }
        if ($this->container['game_id'] === null) {
            $invalidProperties[] = "'game_id' can't be null";
        }
        if ($this->container['game_mode'] === null) {
            $invalidProperties[] = "'game_mode' can't be null";
        }
        if ($this->container['game_name'] === null) {
            $invalidProperties[] = "'game_name' can't be null";
        }
        if ($this->container['game_start_timestamp'] === null) {
            $invalidProperties[] = "'game_start_timestamp' can't be null";
        }
        if ($this->container['game_type'] === null) {
            $invalidProperties[] = "'game_type' can't be null";
        }
        if ($this->container['game_version'] === null) {
            $invalidProperties[] = "'game_version' can't be null";
        }
        if ($this->container['map_id'] === null) {
            $invalidProperties[] = "'map_id' can't be null";
        }
        if ($this->container['participants'] === null) {
            $invalidProperties[] = "'participants' can't be null";
        }
        if ($this->container['platform_id'] === null) {
            $invalidProperties[] = "'platform_id' can't be null";
        }
        if ($this->container['queue_id'] === null) {
            $invalidProperties[] = "'queue_id' can't be null";
        }
        if ($this->container['teams'] === null) {
            $invalidProperties[] = "'teams' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets end_of_game_result
     *
     * @return string
     */
    public function getEndOfGameResult()
    {
        return $this->container['end_of_game_result'];
    }

    /**
     * Sets end_of_game_result
     *
     * @param string $end_of_game_result Refer to indicate if the game ended in termination.
     *
     * @return $this
     */
    public function setEndOfGameResult($end_of_game_result)
    {
        $this->container['end_of_game_result'] = $end_of_game_result;

        return $this;
    }

    /**
     * Gets game_creation
     *
     * @return int
     */
    public function getGameCreation()
    {
        return $this->container['game_creation'];
    }

    /**
     * Sets game_creation
     *
     * @param int $game_creation Unix timestamp for when the game is created on the game server (i.e., the loading screen).
     *
     * @return $this
     */
    public function setGameCreation($game_creation)
    {
        $this->container['game_creation'] = $game_creation;

        return $this;
    }

    /**
     * Gets game_duration
     *
     * @return int
     */
    public function getGameDuration()
    {
        return $this->container['game_duration'];
    }

    /**
     * Sets game_duration
     *
     * @param int $game_duration Prior to patch 11.20, this field returns the game length in milliseconds calculated from gameEndTimestamp - gameStartTimestamp. Post patch 11.20, this field returns the max timePlayed of any participant in the game in seconds, which makes the behavior of this field consistent with that of match-v4. The best way to handling the change in this field is to treat the value as milliseconds if the gameEndTimestamp field isn't in the response and to treat the value as seconds if gameEndTimestamp is in the response.
     *
     * @return $this
     */
    public function setGameDuration($game_duration)
    {
        $this->container['game_duration'] = $game_duration;

        return $this;
    }

    /**
     * Gets game_end_timestamp
     *
     * @return int
     */
    public function getGameEndTimestamp()
    {
        return $this->container['game_end_timestamp'];
    }

    /**
     * Sets game_end_timestamp
     *
     * @param int $game_end_timestamp Unix timestamp for when match ends on the game server. This timestamp can occasionally be significantly longer than when the match \"ends\". The most reliable way of determining the timestamp for the end of the match would be to add the max time played of any participant to the gameStartTimestamp. This field was added to match-v5 in patch 11.20 on Oct 5th, 2021.
     *
     * @return $this
     */
    public function setGameEndTimestamp($game_end_timestamp)
    {
        $this->container['game_end_timestamp'] = $game_end_timestamp;

        return $this;
    }

    /**
     * Gets game_id
     *
     * @return int
     */
    public function getGameId()
    {
        return $this->container['game_id'];
    }

    /**
     * Sets game_id
     *
     * @param int $game_id game_id
     *
     * @return $this
     */
    public function setGameId($game_id)
    {
        $this->container['game_id'] = $game_id;

        return $this;
    }

    /**
     * Gets game_mode
     *
     * @return string
     */
    public function getGameMode()
    {
        return $this->container['game_mode'];
    }

    /**
     * Sets game_mode
     *
     * @param string $game_mode Refer to the Game Constants documentation.
     *
     * @return $this
     */
    public function setGameMode($game_mode)
    {
        $this->container['game_mode'] = $game_mode;

        return $this;
    }

    /**
     * Gets game_name
     *
     * @return string
     */
    public function getGameName()
    {
        return $this->container['game_name'];
    }

    /**
     * Sets game_name
     *
     * @param string $game_name game_name
     *
     * @return $this
     */
    public function setGameName($game_name)
    {
        $this->container['game_name'] = $game_name;

        return $this;
    }

    /**
     * Gets game_start_timestamp
     *
     * @return int
     */
    public function getGameStartTimestamp()
    {
        return $this->container['game_start_timestamp'];
    }

    /**
     * Sets game_start_timestamp
     *
     * @param int $game_start_timestamp Unix timestamp for when match starts on the game server.
     *
     * @return $this
     */
    public function setGameStartTimestamp($game_start_timestamp)
    {
        $this->container['game_start_timestamp'] = $game_start_timestamp;

        return $this;
    }

    /**
     * Gets game_type
     *
     * @return string
     */
    public function getGameType()
    {
        return $this->container['game_type'];
    }

    /**
     * Sets game_type
     *
     * @param string $game_type game_type
     *
     * @return $this
     */
    public function setGameType($game_type)
    {
        $this->container['game_type'] = $game_type;

        return $this;
    }

    /**
     * Gets game_version
     *
     * @return string
     */
    public function getGameVersion()
    {
        return $this->container['game_version'];
    }

    /**
     * Sets game_version
     *
     * @param string $game_version The first two parts can be used to determine the patch a game was played on.
     *
     * @return $this
     */
    public function setGameVersion($game_version)
    {
        $this->container['game_version'] = $game_version;

        return $this;
    }

    /**
     * Gets map_id
     *
     * @return int
     */
    public function getMapId()
    {
        return $this->container['map_id'];
    }

    /**
     * Sets map_id
     *
     * @param int $map_id Refer to the Game Constants documentation.
     *
     * @return $this
     */
    public function setMapId($map_id)
    {
        $this->container['map_id'] = $map_id;

        return $this;
    }

    /**
     * Gets participants
     *
     * @return \Swagger\Client\Model\MatchV5ParticipantDto[]
     */
    public function getParticipants()
    {
        return $this->container['participants'];
    }

    /**
     * Sets participants
     *
     * @param \Swagger\Client\Model\MatchV5ParticipantDto[] $participants participants
     *
     * @return $this
     */
    public function setParticipants($participants)
    {
        $this->container['participants'] = $participants;

        return $this;
    }

    /**
     * Gets platform_id
     *
     * @return string
     */
    public function getPlatformId()
    {
        return $this->container['platform_id'];
    }

    /**
     * Sets platform_id
     *
     * @param string $platform_id Platform where the match was played.
     *
     * @return $this
     */
    public function setPlatformId($platform_id)
    {
        $this->container['platform_id'] = $platform_id;

        return $this;
    }

    /**
     * Gets queue_id
     *
     * @return int
     */
    public function getQueueId()
    {
        return $this->container['queue_id'];
    }

    /**
     * Sets queue_id
     *
     * @param int $queue_id Refer to the Game Constants documentation.
     *
     * @return $this
     */
    public function setQueueId($queue_id)
    {
        $this->container['queue_id'] = $queue_id;

        return $this;
    }

    /**
     * Gets teams
     *
     * @return \Swagger\Client\Model\MatchV5TeamDto[]
     */
    public function getTeams()
    {
        return $this->container['teams'];
    }

    /**
     * Sets teams
     *
     * @param \Swagger\Client\Model\MatchV5TeamDto[] $teams teams
     *
     * @return $this
     */
    public function setTeams($teams)
    {
        $this->container['teams'] = $teams;

        return $this;
    }

    /**
     * Gets tournament_code
     *
     * @return string
     */
    public function getTournamentCode()
    {
        return $this->container['tournament_code'];
    }

    /**
     * Sets tournament_code
     *
     * @param string $tournament_code Tournament code used to generate the match. This field was added to match-v5 in patch 11.13 on June 23rd, 2021.
     *
     * @return $this
     */
    public function setTournamentCode($tournament_code)
    {
        $this->container['tournament_code'] = $tournament_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


