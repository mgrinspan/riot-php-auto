<?php
/**
 * ValConsoleMatchV1RoundResultDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Riot API
 *
 * OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. ***
 *
 * OpenAPI spec version: b7cd9f901117fa03f7c4e5f9c0a954dac569f75a
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ValConsoleMatchV1RoundResultDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ValConsoleMatchV1RoundResultDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'val-console-match-v1.RoundResultDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'round_num' => 'int',
        'round_result' => 'string',
        'round_ceremony' => 'string',
        'winning_team' => 'string',
        'bomb_planter' => 'string',
        'bomb_defuser' => 'string',
        'plant_round_time' => 'int',
        'plant_player_locations' => '\Swagger\Client\Model\ValConsoleMatchV1PlayerLocationsDto[]',
        'plant_location' => '\Swagger\Client\Model\ValConsoleMatchV1LocationDto',
        'plant_site' => 'string',
        'defuse_round_time' => 'int',
        'defuse_player_locations' => '\Swagger\Client\Model\ValConsoleMatchV1PlayerLocationsDto[]',
        'defuse_location' => '\Swagger\Client\Model\ValConsoleMatchV1LocationDto',
        'player_stats' => '\Swagger\Client\Model\ValConsoleMatchV1PlayerRoundStatsDto[]',
        'round_result_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'round_num' => 'int32',
        'round_result' => null,
        'round_ceremony' => null,
        'winning_team' => null,
        'bomb_planter' => null,
        'bomb_defuser' => null,
        'plant_round_time' => 'int32',
        'plant_player_locations' => null,
        'plant_location' => null,
        'plant_site' => null,
        'defuse_round_time' => 'int32',
        'defuse_player_locations' => null,
        'defuse_location' => null,
        'player_stats' => null,
        'round_result_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'round_num' => 'roundNum',
        'round_result' => 'roundResult',
        'round_ceremony' => 'roundCeremony',
        'winning_team' => 'winningTeam',
        'bomb_planter' => 'bombPlanter',
        'bomb_defuser' => 'bombDefuser',
        'plant_round_time' => 'plantRoundTime',
        'plant_player_locations' => 'plantPlayerLocations',
        'plant_location' => 'plantLocation',
        'plant_site' => 'plantSite',
        'defuse_round_time' => 'defuseRoundTime',
        'defuse_player_locations' => 'defusePlayerLocations',
        'defuse_location' => 'defuseLocation',
        'player_stats' => 'playerStats',
        'round_result_code' => 'roundResultCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'round_num' => 'setRoundNum',
        'round_result' => 'setRoundResult',
        'round_ceremony' => 'setRoundCeremony',
        'winning_team' => 'setWinningTeam',
        'bomb_planter' => 'setBombPlanter',
        'bomb_defuser' => 'setBombDefuser',
        'plant_round_time' => 'setPlantRoundTime',
        'plant_player_locations' => 'setPlantPlayerLocations',
        'plant_location' => 'setPlantLocation',
        'plant_site' => 'setPlantSite',
        'defuse_round_time' => 'setDefuseRoundTime',
        'defuse_player_locations' => 'setDefusePlayerLocations',
        'defuse_location' => 'setDefuseLocation',
        'player_stats' => 'setPlayerStats',
        'round_result_code' => 'setRoundResultCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'round_num' => 'getRoundNum',
        'round_result' => 'getRoundResult',
        'round_ceremony' => 'getRoundCeremony',
        'winning_team' => 'getWinningTeam',
        'bomb_planter' => 'getBombPlanter',
        'bomb_defuser' => 'getBombDefuser',
        'plant_round_time' => 'getPlantRoundTime',
        'plant_player_locations' => 'getPlantPlayerLocations',
        'plant_location' => 'getPlantLocation',
        'plant_site' => 'getPlantSite',
        'defuse_round_time' => 'getDefuseRoundTime',
        'defuse_player_locations' => 'getDefusePlayerLocations',
        'defuse_location' => 'getDefuseLocation',
        'player_stats' => 'getPlayerStats',
        'round_result_code' => 'getRoundResultCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['round_num'] = isset($data['round_num']) ? $data['round_num'] : null;
        $this->container['round_result'] = isset($data['round_result']) ? $data['round_result'] : null;
        $this->container['round_ceremony'] = isset($data['round_ceremony']) ? $data['round_ceremony'] : null;
        $this->container['winning_team'] = isset($data['winning_team']) ? $data['winning_team'] : null;
        $this->container['bomb_planter'] = isset($data['bomb_planter']) ? $data['bomb_planter'] : null;
        $this->container['bomb_defuser'] = isset($data['bomb_defuser']) ? $data['bomb_defuser'] : null;
        $this->container['plant_round_time'] = isset($data['plant_round_time']) ? $data['plant_round_time'] : null;
        $this->container['plant_player_locations'] = isset($data['plant_player_locations']) ? $data['plant_player_locations'] : null;
        $this->container['plant_location'] = isset($data['plant_location']) ? $data['plant_location'] : null;
        $this->container['plant_site'] = isset($data['plant_site']) ? $data['plant_site'] : null;
        $this->container['defuse_round_time'] = isset($data['defuse_round_time']) ? $data['defuse_round_time'] : null;
        $this->container['defuse_player_locations'] = isset($data['defuse_player_locations']) ? $data['defuse_player_locations'] : null;
        $this->container['defuse_location'] = isset($data['defuse_location']) ? $data['defuse_location'] : null;
        $this->container['player_stats'] = isset($data['player_stats']) ? $data['player_stats'] : null;
        $this->container['round_result_code'] = isset($data['round_result_code']) ? $data['round_result_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['round_num'] === null) {
            $invalidProperties[] = "'round_num' can't be null";
        }
        if ($this->container['round_result'] === null) {
            $invalidProperties[] = "'round_result' can't be null";
        }
        if ($this->container['round_ceremony'] === null) {
            $invalidProperties[] = "'round_ceremony' can't be null";
        }
        if ($this->container['winning_team'] === null) {
            $invalidProperties[] = "'winning_team' can't be null";
        }
        if ($this->container['bomb_planter'] === null) {
            $invalidProperties[] = "'bomb_planter' can't be null";
        }
        if ($this->container['bomb_defuser'] === null) {
            $invalidProperties[] = "'bomb_defuser' can't be null";
        }
        if ($this->container['plant_round_time'] === null) {
            $invalidProperties[] = "'plant_round_time' can't be null";
        }
        if ($this->container['plant_player_locations'] === null) {
            $invalidProperties[] = "'plant_player_locations' can't be null";
        }
        if ($this->container['plant_location'] === null) {
            $invalidProperties[] = "'plant_location' can't be null";
        }
        if ($this->container['plant_site'] === null) {
            $invalidProperties[] = "'plant_site' can't be null";
        }
        if ($this->container['defuse_round_time'] === null) {
            $invalidProperties[] = "'defuse_round_time' can't be null";
        }
        if ($this->container['defuse_player_locations'] === null) {
            $invalidProperties[] = "'defuse_player_locations' can't be null";
        }
        if ($this->container['defuse_location'] === null) {
            $invalidProperties[] = "'defuse_location' can't be null";
        }
        if ($this->container['player_stats'] === null) {
            $invalidProperties[] = "'player_stats' can't be null";
        }
        if ($this->container['round_result_code'] === null) {
            $invalidProperties[] = "'round_result_code' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets round_num
     *
     * @return int
     */
    public function getRoundNum()
    {
        return $this->container['round_num'];
    }

    /**
     * Sets round_num
     *
     * @param int $round_num round_num
     *
     * @return $this
     */
    public function setRoundNum($round_num)
    {
        $this->container['round_num'] = $round_num;

        return $this;
    }

    /**
     * Gets round_result
     *
     * @return string
     */
    public function getRoundResult()
    {
        return $this->container['round_result'];
    }

    /**
     * Sets round_result
     *
     * @param string $round_result round_result
     *
     * @return $this
     */
    public function setRoundResult($round_result)
    {
        $this->container['round_result'] = $round_result;

        return $this;
    }

    /**
     * Gets round_ceremony
     *
     * @return string
     */
    public function getRoundCeremony()
    {
        return $this->container['round_ceremony'];
    }

    /**
     * Sets round_ceremony
     *
     * @param string $round_ceremony round_ceremony
     *
     * @return $this
     */
    public function setRoundCeremony($round_ceremony)
    {
        $this->container['round_ceremony'] = $round_ceremony;

        return $this;
    }

    /**
     * Gets winning_team
     *
     * @return string
     */
    public function getWinningTeam()
    {
        return $this->container['winning_team'];
    }

    /**
     * Sets winning_team
     *
     * @param string $winning_team winning_team
     *
     * @return $this
     */
    public function setWinningTeam($winning_team)
    {
        $this->container['winning_team'] = $winning_team;

        return $this;
    }

    /**
     * Gets bomb_planter
     *
     * @return string
     */
    public function getBombPlanter()
    {
        return $this->container['bomb_planter'];
    }

    /**
     * Sets bomb_planter
     *
     * @param string $bomb_planter PUUID of player
     *
     * @return $this
     */
    public function setBombPlanter($bomb_planter)
    {
        $this->container['bomb_planter'] = $bomb_planter;

        return $this;
    }

    /**
     * Gets bomb_defuser
     *
     * @return string
     */
    public function getBombDefuser()
    {
        return $this->container['bomb_defuser'];
    }

    /**
     * Sets bomb_defuser
     *
     * @param string $bomb_defuser PUUID of player
     *
     * @return $this
     */
    public function setBombDefuser($bomb_defuser)
    {
        $this->container['bomb_defuser'] = $bomb_defuser;

        return $this;
    }

    /**
     * Gets plant_round_time
     *
     * @return int
     */
    public function getPlantRoundTime()
    {
        return $this->container['plant_round_time'];
    }

    /**
     * Sets plant_round_time
     *
     * @param int $plant_round_time plant_round_time
     *
     * @return $this
     */
    public function setPlantRoundTime($plant_round_time)
    {
        $this->container['plant_round_time'] = $plant_round_time;

        return $this;
    }

    /**
     * Gets plant_player_locations
     *
     * @return \Swagger\Client\Model\ValConsoleMatchV1PlayerLocationsDto[]
     */
    public function getPlantPlayerLocations()
    {
        return $this->container['plant_player_locations'];
    }

    /**
     * Sets plant_player_locations
     *
     * @param \Swagger\Client\Model\ValConsoleMatchV1PlayerLocationsDto[] $plant_player_locations plant_player_locations
     *
     * @return $this
     */
    public function setPlantPlayerLocations($plant_player_locations)
    {
        $this->container['plant_player_locations'] = $plant_player_locations;

        return $this;
    }

    /**
     * Gets plant_location
     *
     * @return \Swagger\Client\Model\ValConsoleMatchV1LocationDto
     */
    public function getPlantLocation()
    {
        return $this->container['plant_location'];
    }

    /**
     * Sets plant_location
     *
     * @param \Swagger\Client\Model\ValConsoleMatchV1LocationDto $plant_location plant_location
     *
     * @return $this
     */
    public function setPlantLocation($plant_location)
    {
        $this->container['plant_location'] = $plant_location;

        return $this;
    }

    /**
     * Gets plant_site
     *
     * @return string
     */
    public function getPlantSite()
    {
        return $this->container['plant_site'];
    }

    /**
     * Sets plant_site
     *
     * @param string $plant_site plant_site
     *
     * @return $this
     */
    public function setPlantSite($plant_site)
    {
        $this->container['plant_site'] = $plant_site;

        return $this;
    }

    /**
     * Gets defuse_round_time
     *
     * @return int
     */
    public function getDefuseRoundTime()
    {
        return $this->container['defuse_round_time'];
    }

    /**
     * Sets defuse_round_time
     *
     * @param int $defuse_round_time defuse_round_time
     *
     * @return $this
     */
    public function setDefuseRoundTime($defuse_round_time)
    {
        $this->container['defuse_round_time'] = $defuse_round_time;

        return $this;
    }

    /**
     * Gets defuse_player_locations
     *
     * @return \Swagger\Client\Model\ValConsoleMatchV1PlayerLocationsDto[]
     */
    public function getDefusePlayerLocations()
    {
        return $this->container['defuse_player_locations'];
    }

    /**
     * Sets defuse_player_locations
     *
     * @param \Swagger\Client\Model\ValConsoleMatchV1PlayerLocationsDto[] $defuse_player_locations defuse_player_locations
     *
     * @return $this
     */
    public function setDefusePlayerLocations($defuse_player_locations)
    {
        $this->container['defuse_player_locations'] = $defuse_player_locations;

        return $this;
    }

    /**
     * Gets defuse_location
     *
     * @return \Swagger\Client\Model\ValConsoleMatchV1LocationDto
     */
    public function getDefuseLocation()
    {
        return $this->container['defuse_location'];
    }

    /**
     * Sets defuse_location
     *
     * @param \Swagger\Client\Model\ValConsoleMatchV1LocationDto $defuse_location defuse_location
     *
     * @return $this
     */
    public function setDefuseLocation($defuse_location)
    {
        $this->container['defuse_location'] = $defuse_location;

        return $this;
    }

    /**
     * Gets player_stats
     *
     * @return \Swagger\Client\Model\ValConsoleMatchV1PlayerRoundStatsDto[]
     */
    public function getPlayerStats()
    {
        return $this->container['player_stats'];
    }

    /**
     * Sets player_stats
     *
     * @param \Swagger\Client\Model\ValConsoleMatchV1PlayerRoundStatsDto[] $player_stats player_stats
     *
     * @return $this
     */
    public function setPlayerStats($player_stats)
    {
        $this->container['player_stats'] = $player_stats;

        return $this;
    }

    /**
     * Gets round_result_code
     *
     * @return string
     */
    public function getRoundResultCode()
    {
        return $this->container['round_result_code'];
    }

    /**
     * Sets round_result_code
     *
     * @param string $round_result_code round_result_code
     *
     * @return $this
     */
    public function setRoundResultCode($round_result_code)
    {
        $this->container['round_result_code'] = $round_result_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


