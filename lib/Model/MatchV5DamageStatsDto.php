<?php
/**
 * MatchV5DamageStatsDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Riot API
 *
 * OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. ***
 *
 * OpenAPI spec version: b7cd9f901117fa03f7c4e5f9c0a954dac569f75a
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MatchV5DamageStatsDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MatchV5DamageStatsDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'match-v5.DamageStatsDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'magic_damage_done' => 'int',
        'magic_damage_done_to_champions' => 'int',
        'magic_damage_taken' => 'int',
        'physical_damage_done' => 'int',
        'physical_damage_done_to_champions' => 'int',
        'physical_damage_taken' => 'int',
        'total_damage_done' => 'int',
        'total_damage_done_to_champions' => 'int',
        'total_damage_taken' => 'int',
        'true_damage_done' => 'int',
        'true_damage_done_to_champions' => 'int',
        'true_damage_taken' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'magic_damage_done' => 'int32',
        'magic_damage_done_to_champions' => 'int32',
        'magic_damage_taken' => 'int32',
        'physical_damage_done' => 'int32',
        'physical_damage_done_to_champions' => 'int32',
        'physical_damage_taken' => 'int32',
        'total_damage_done' => 'int32',
        'total_damage_done_to_champions' => 'int32',
        'total_damage_taken' => 'int32',
        'true_damage_done' => 'int32',
        'true_damage_done_to_champions' => 'int32',
        'true_damage_taken' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'magic_damage_done' => 'magicDamageDone',
        'magic_damage_done_to_champions' => 'magicDamageDoneToChampions',
        'magic_damage_taken' => 'magicDamageTaken',
        'physical_damage_done' => 'physicalDamageDone',
        'physical_damage_done_to_champions' => 'physicalDamageDoneToChampions',
        'physical_damage_taken' => 'physicalDamageTaken',
        'total_damage_done' => 'totalDamageDone',
        'total_damage_done_to_champions' => 'totalDamageDoneToChampions',
        'total_damage_taken' => 'totalDamageTaken',
        'true_damage_done' => 'trueDamageDone',
        'true_damage_done_to_champions' => 'trueDamageDoneToChampions',
        'true_damage_taken' => 'trueDamageTaken'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'magic_damage_done' => 'setMagicDamageDone',
        'magic_damage_done_to_champions' => 'setMagicDamageDoneToChampions',
        'magic_damage_taken' => 'setMagicDamageTaken',
        'physical_damage_done' => 'setPhysicalDamageDone',
        'physical_damage_done_to_champions' => 'setPhysicalDamageDoneToChampions',
        'physical_damage_taken' => 'setPhysicalDamageTaken',
        'total_damage_done' => 'setTotalDamageDone',
        'total_damage_done_to_champions' => 'setTotalDamageDoneToChampions',
        'total_damage_taken' => 'setTotalDamageTaken',
        'true_damage_done' => 'setTrueDamageDone',
        'true_damage_done_to_champions' => 'setTrueDamageDoneToChampions',
        'true_damage_taken' => 'setTrueDamageTaken'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'magic_damage_done' => 'getMagicDamageDone',
        'magic_damage_done_to_champions' => 'getMagicDamageDoneToChampions',
        'magic_damage_taken' => 'getMagicDamageTaken',
        'physical_damage_done' => 'getPhysicalDamageDone',
        'physical_damage_done_to_champions' => 'getPhysicalDamageDoneToChampions',
        'physical_damage_taken' => 'getPhysicalDamageTaken',
        'total_damage_done' => 'getTotalDamageDone',
        'total_damage_done_to_champions' => 'getTotalDamageDoneToChampions',
        'total_damage_taken' => 'getTotalDamageTaken',
        'true_damage_done' => 'getTrueDamageDone',
        'true_damage_done_to_champions' => 'getTrueDamageDoneToChampions',
        'true_damage_taken' => 'getTrueDamageTaken'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['magic_damage_done'] = isset($data['magic_damage_done']) ? $data['magic_damage_done'] : null;
        $this->container['magic_damage_done_to_champions'] = isset($data['magic_damage_done_to_champions']) ? $data['magic_damage_done_to_champions'] : null;
        $this->container['magic_damage_taken'] = isset($data['magic_damage_taken']) ? $data['magic_damage_taken'] : null;
        $this->container['physical_damage_done'] = isset($data['physical_damage_done']) ? $data['physical_damage_done'] : null;
        $this->container['physical_damage_done_to_champions'] = isset($data['physical_damage_done_to_champions']) ? $data['physical_damage_done_to_champions'] : null;
        $this->container['physical_damage_taken'] = isset($data['physical_damage_taken']) ? $data['physical_damage_taken'] : null;
        $this->container['total_damage_done'] = isset($data['total_damage_done']) ? $data['total_damage_done'] : null;
        $this->container['total_damage_done_to_champions'] = isset($data['total_damage_done_to_champions']) ? $data['total_damage_done_to_champions'] : null;
        $this->container['total_damage_taken'] = isset($data['total_damage_taken']) ? $data['total_damage_taken'] : null;
        $this->container['true_damage_done'] = isset($data['true_damage_done']) ? $data['true_damage_done'] : null;
        $this->container['true_damage_done_to_champions'] = isset($data['true_damage_done_to_champions']) ? $data['true_damage_done_to_champions'] : null;
        $this->container['true_damage_taken'] = isset($data['true_damage_taken']) ? $data['true_damage_taken'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['magic_damage_done'] === null) {
            $invalidProperties[] = "'magic_damage_done' can't be null";
        }
        if ($this->container['magic_damage_done_to_champions'] === null) {
            $invalidProperties[] = "'magic_damage_done_to_champions' can't be null";
        }
        if ($this->container['magic_damage_taken'] === null) {
            $invalidProperties[] = "'magic_damage_taken' can't be null";
        }
        if ($this->container['physical_damage_done'] === null) {
            $invalidProperties[] = "'physical_damage_done' can't be null";
        }
        if ($this->container['physical_damage_done_to_champions'] === null) {
            $invalidProperties[] = "'physical_damage_done_to_champions' can't be null";
        }
        if ($this->container['physical_damage_taken'] === null) {
            $invalidProperties[] = "'physical_damage_taken' can't be null";
        }
        if ($this->container['total_damage_done'] === null) {
            $invalidProperties[] = "'total_damage_done' can't be null";
        }
        if ($this->container['total_damage_done_to_champions'] === null) {
            $invalidProperties[] = "'total_damage_done_to_champions' can't be null";
        }
        if ($this->container['total_damage_taken'] === null) {
            $invalidProperties[] = "'total_damage_taken' can't be null";
        }
        if ($this->container['true_damage_done'] === null) {
            $invalidProperties[] = "'true_damage_done' can't be null";
        }
        if ($this->container['true_damage_done_to_champions'] === null) {
            $invalidProperties[] = "'true_damage_done_to_champions' can't be null";
        }
        if ($this->container['true_damage_taken'] === null) {
            $invalidProperties[] = "'true_damage_taken' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets magic_damage_done
     *
     * @return int
     */
    public function getMagicDamageDone()
    {
        return $this->container['magic_damage_done'];
    }

    /**
     * Sets magic_damage_done
     *
     * @param int $magic_damage_done magic_damage_done
     *
     * @return $this
     */
    public function setMagicDamageDone($magic_damage_done)
    {
        $this->container['magic_damage_done'] = $magic_damage_done;

        return $this;
    }

    /**
     * Gets magic_damage_done_to_champions
     *
     * @return int
     */
    public function getMagicDamageDoneToChampions()
    {
        return $this->container['magic_damage_done_to_champions'];
    }

    /**
     * Sets magic_damage_done_to_champions
     *
     * @param int $magic_damage_done_to_champions magic_damage_done_to_champions
     *
     * @return $this
     */
    public function setMagicDamageDoneToChampions($magic_damage_done_to_champions)
    {
        $this->container['magic_damage_done_to_champions'] = $magic_damage_done_to_champions;

        return $this;
    }

    /**
     * Gets magic_damage_taken
     *
     * @return int
     */
    public function getMagicDamageTaken()
    {
        return $this->container['magic_damage_taken'];
    }

    /**
     * Sets magic_damage_taken
     *
     * @param int $magic_damage_taken magic_damage_taken
     *
     * @return $this
     */
    public function setMagicDamageTaken($magic_damage_taken)
    {
        $this->container['magic_damage_taken'] = $magic_damage_taken;

        return $this;
    }

    /**
     * Gets physical_damage_done
     *
     * @return int
     */
    public function getPhysicalDamageDone()
    {
        return $this->container['physical_damage_done'];
    }

    /**
     * Sets physical_damage_done
     *
     * @param int $physical_damage_done physical_damage_done
     *
     * @return $this
     */
    public function setPhysicalDamageDone($physical_damage_done)
    {
        $this->container['physical_damage_done'] = $physical_damage_done;

        return $this;
    }

    /**
     * Gets physical_damage_done_to_champions
     *
     * @return int
     */
    public function getPhysicalDamageDoneToChampions()
    {
        return $this->container['physical_damage_done_to_champions'];
    }

    /**
     * Sets physical_damage_done_to_champions
     *
     * @param int $physical_damage_done_to_champions physical_damage_done_to_champions
     *
     * @return $this
     */
    public function setPhysicalDamageDoneToChampions($physical_damage_done_to_champions)
    {
        $this->container['physical_damage_done_to_champions'] = $physical_damage_done_to_champions;

        return $this;
    }

    /**
     * Gets physical_damage_taken
     *
     * @return int
     */
    public function getPhysicalDamageTaken()
    {
        return $this->container['physical_damage_taken'];
    }

    /**
     * Sets physical_damage_taken
     *
     * @param int $physical_damage_taken physical_damage_taken
     *
     * @return $this
     */
    public function setPhysicalDamageTaken($physical_damage_taken)
    {
        $this->container['physical_damage_taken'] = $physical_damage_taken;

        return $this;
    }

    /**
     * Gets total_damage_done
     *
     * @return int
     */
    public function getTotalDamageDone()
    {
        return $this->container['total_damage_done'];
    }

    /**
     * Sets total_damage_done
     *
     * @param int $total_damage_done total_damage_done
     *
     * @return $this
     */
    public function setTotalDamageDone($total_damage_done)
    {
        $this->container['total_damage_done'] = $total_damage_done;

        return $this;
    }

    /**
     * Gets total_damage_done_to_champions
     *
     * @return int
     */
    public function getTotalDamageDoneToChampions()
    {
        return $this->container['total_damage_done_to_champions'];
    }

    /**
     * Sets total_damage_done_to_champions
     *
     * @param int $total_damage_done_to_champions total_damage_done_to_champions
     *
     * @return $this
     */
    public function setTotalDamageDoneToChampions($total_damage_done_to_champions)
    {
        $this->container['total_damage_done_to_champions'] = $total_damage_done_to_champions;

        return $this;
    }

    /**
     * Gets total_damage_taken
     *
     * @return int
     */
    public function getTotalDamageTaken()
    {
        return $this->container['total_damage_taken'];
    }

    /**
     * Sets total_damage_taken
     *
     * @param int $total_damage_taken total_damage_taken
     *
     * @return $this
     */
    public function setTotalDamageTaken($total_damage_taken)
    {
        $this->container['total_damage_taken'] = $total_damage_taken;

        return $this;
    }

    /**
     * Gets true_damage_done
     *
     * @return int
     */
    public function getTrueDamageDone()
    {
        return $this->container['true_damage_done'];
    }

    /**
     * Sets true_damage_done
     *
     * @param int $true_damage_done true_damage_done
     *
     * @return $this
     */
    public function setTrueDamageDone($true_damage_done)
    {
        $this->container['true_damage_done'] = $true_damage_done;

        return $this;
    }

    /**
     * Gets true_damage_done_to_champions
     *
     * @return int
     */
    public function getTrueDamageDoneToChampions()
    {
        return $this->container['true_damage_done_to_champions'];
    }

    /**
     * Sets true_damage_done_to_champions
     *
     * @param int $true_damage_done_to_champions true_damage_done_to_champions
     *
     * @return $this
     */
    public function setTrueDamageDoneToChampions($true_damage_done_to_champions)
    {
        $this->container['true_damage_done_to_champions'] = $true_damage_done_to_champions;

        return $this;
    }

    /**
     * Gets true_damage_taken
     *
     * @return int
     */
    public function getTrueDamageTaken()
    {
        return $this->container['true_damage_taken'];
    }

    /**
     * Sets true_damage_taken
     *
     * @param int $true_damage_taken true_damage_taken
     *
     * @return $this
     */
    public function setTrueDamageTaken($true_damage_taken)
    {
        $this->container['true_damage_taken'] = $true_damage_taken;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


