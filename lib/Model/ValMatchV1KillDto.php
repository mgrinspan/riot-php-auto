<?php
/**
 * ValMatchV1KillDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Riot API
 *
 * OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. ***
 *
 * OpenAPI spec version: b7cd9f901117fa03f7c4e5f9c0a954dac569f75a
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ValMatchV1KillDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ValMatchV1KillDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'val-match-v1.KillDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'time_since_game_start_millis' => 'int',
        'time_since_round_start_millis' => 'int',
        'killer' => 'string',
        'victim' => 'string',
        'victim_location' => '\Swagger\Client\Model\ValMatchV1LocationDto',
        'assistants' => 'string[]',
        'player_locations' => '\Swagger\Client\Model\ValMatchV1PlayerLocationsDto[]',
        'finishing_damage' => '\Swagger\Client\Model\ValMatchV1FinishingDamageDto'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'time_since_game_start_millis' => 'int32',
        'time_since_round_start_millis' => 'int32',
        'killer' => null,
        'victim' => null,
        'victim_location' => null,
        'assistants' => null,
        'player_locations' => null,
        'finishing_damage' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'time_since_game_start_millis' => 'timeSinceGameStartMillis',
        'time_since_round_start_millis' => 'timeSinceRoundStartMillis',
        'killer' => 'killer',
        'victim' => 'victim',
        'victim_location' => 'victimLocation',
        'assistants' => 'assistants',
        'player_locations' => 'playerLocations',
        'finishing_damage' => 'finishingDamage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'time_since_game_start_millis' => 'setTimeSinceGameStartMillis',
        'time_since_round_start_millis' => 'setTimeSinceRoundStartMillis',
        'killer' => 'setKiller',
        'victim' => 'setVictim',
        'victim_location' => 'setVictimLocation',
        'assistants' => 'setAssistants',
        'player_locations' => 'setPlayerLocations',
        'finishing_damage' => 'setFinishingDamage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'time_since_game_start_millis' => 'getTimeSinceGameStartMillis',
        'time_since_round_start_millis' => 'getTimeSinceRoundStartMillis',
        'killer' => 'getKiller',
        'victim' => 'getVictim',
        'victim_location' => 'getVictimLocation',
        'assistants' => 'getAssistants',
        'player_locations' => 'getPlayerLocations',
        'finishing_damage' => 'getFinishingDamage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['time_since_game_start_millis'] = isset($data['time_since_game_start_millis']) ? $data['time_since_game_start_millis'] : null;
        $this->container['time_since_round_start_millis'] = isset($data['time_since_round_start_millis']) ? $data['time_since_round_start_millis'] : null;
        $this->container['killer'] = isset($data['killer']) ? $data['killer'] : null;
        $this->container['victim'] = isset($data['victim']) ? $data['victim'] : null;
        $this->container['victim_location'] = isset($data['victim_location']) ? $data['victim_location'] : null;
        $this->container['assistants'] = isset($data['assistants']) ? $data['assistants'] : null;
        $this->container['player_locations'] = isset($data['player_locations']) ? $data['player_locations'] : null;
        $this->container['finishing_damage'] = isset($data['finishing_damage']) ? $data['finishing_damage'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['time_since_game_start_millis'] === null) {
            $invalidProperties[] = "'time_since_game_start_millis' can't be null";
        }
        if ($this->container['time_since_round_start_millis'] === null) {
            $invalidProperties[] = "'time_since_round_start_millis' can't be null";
        }
        if ($this->container['killer'] === null) {
            $invalidProperties[] = "'killer' can't be null";
        }
        if ($this->container['victim'] === null) {
            $invalidProperties[] = "'victim' can't be null";
        }
        if ($this->container['victim_location'] === null) {
            $invalidProperties[] = "'victim_location' can't be null";
        }
        if ($this->container['assistants'] === null) {
            $invalidProperties[] = "'assistants' can't be null";
        }
        if ($this->container['player_locations'] === null) {
            $invalidProperties[] = "'player_locations' can't be null";
        }
        if ($this->container['finishing_damage'] === null) {
            $invalidProperties[] = "'finishing_damage' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets time_since_game_start_millis
     *
     * @return int
     */
    public function getTimeSinceGameStartMillis()
    {
        return $this->container['time_since_game_start_millis'];
    }

    /**
     * Sets time_since_game_start_millis
     *
     * @param int $time_since_game_start_millis time_since_game_start_millis
     *
     * @return $this
     */
    public function setTimeSinceGameStartMillis($time_since_game_start_millis)
    {
        $this->container['time_since_game_start_millis'] = $time_since_game_start_millis;

        return $this;
    }

    /**
     * Gets time_since_round_start_millis
     *
     * @return int
     */
    public function getTimeSinceRoundStartMillis()
    {
        return $this->container['time_since_round_start_millis'];
    }

    /**
     * Sets time_since_round_start_millis
     *
     * @param int $time_since_round_start_millis time_since_round_start_millis
     *
     * @return $this
     */
    public function setTimeSinceRoundStartMillis($time_since_round_start_millis)
    {
        $this->container['time_since_round_start_millis'] = $time_since_round_start_millis;

        return $this;
    }

    /**
     * Gets killer
     *
     * @return string
     */
    public function getKiller()
    {
        return $this->container['killer'];
    }

    /**
     * Sets killer
     *
     * @param string $killer PUUID
     *
     * @return $this
     */
    public function setKiller($killer)
    {
        $this->container['killer'] = $killer;

        return $this;
    }

    /**
     * Gets victim
     *
     * @return string
     */
    public function getVictim()
    {
        return $this->container['victim'];
    }

    /**
     * Sets victim
     *
     * @param string $victim PUUID
     *
     * @return $this
     */
    public function setVictim($victim)
    {
        $this->container['victim'] = $victim;

        return $this;
    }

    /**
     * Gets victim_location
     *
     * @return \Swagger\Client\Model\ValMatchV1LocationDto
     */
    public function getVictimLocation()
    {
        return $this->container['victim_location'];
    }

    /**
     * Sets victim_location
     *
     * @param \Swagger\Client\Model\ValMatchV1LocationDto $victim_location victim_location
     *
     * @return $this
     */
    public function setVictimLocation($victim_location)
    {
        $this->container['victim_location'] = $victim_location;

        return $this;
    }

    /**
     * Gets assistants
     *
     * @return string[]
     */
    public function getAssistants()
    {
        return $this->container['assistants'];
    }

    /**
     * Sets assistants
     *
     * @param string[] $assistants List of PUUIDs
     *
     * @return $this
     */
    public function setAssistants($assistants)
    {
        $this->container['assistants'] = $assistants;

        return $this;
    }

    /**
     * Gets player_locations
     *
     * @return \Swagger\Client\Model\ValMatchV1PlayerLocationsDto[]
     */
    public function getPlayerLocations()
    {
        return $this->container['player_locations'];
    }

    /**
     * Sets player_locations
     *
     * @param \Swagger\Client\Model\ValMatchV1PlayerLocationsDto[] $player_locations player_locations
     *
     * @return $this
     */
    public function setPlayerLocations($player_locations)
    {
        $this->container['player_locations'] = $player_locations;

        return $this;
    }

    /**
     * Gets finishing_damage
     *
     * @return \Swagger\Client\Model\ValMatchV1FinishingDamageDto
     */
    public function getFinishingDamage()
    {
        return $this->container['finishing_damage'];
    }

    /**
     * Sets finishing_damage
     *
     * @param \Swagger\Client\Model\ValMatchV1FinishingDamageDto $finishing_damage finishing_damage
     *
     * @return $this
     */
    public function setFinishingDamage($finishing_damage)
    {
        $this->container['finishing_damage'] = $finishing_damage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


