<?php
/**
 * MatchV5ChampionStatsDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Riot API
 *
 * OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. ***
 *
 * OpenAPI spec version: b7cd9f901117fa03f7c4e5f9c0a954dac569f75a
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MatchV5ChampionStatsDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MatchV5ChampionStatsDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'match-v5.ChampionStatsDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ability_haste' => 'int',
        'ability_power' => 'int',
        'armor' => 'int',
        'armor_pen' => 'int',
        'armor_pen_percent' => 'int',
        'attack_damage' => 'int',
        'attack_speed' => 'int',
        'bonus_armor_pen_percent' => 'int',
        'bonus_magic_pen_percent' => 'int',
        'cc_reduction' => 'int',
        'cooldown_reduction' => 'int',
        'health' => 'int',
        'health_max' => 'int',
        'health_regen' => 'int',
        'lifesteal' => 'int',
        'magic_pen' => 'int',
        'magic_pen_percent' => 'int',
        'magic_resist' => 'int',
        'movement_speed' => 'int',
        'omnivamp' => 'int',
        'physical_vamp' => 'int',
        'power' => 'int',
        'power_max' => 'int',
        'power_regen' => 'int',
        'spell_vamp' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ability_haste' => 'int32',
        'ability_power' => 'int32',
        'armor' => 'int32',
        'armor_pen' => 'int32',
        'armor_pen_percent' => 'int32',
        'attack_damage' => 'int32',
        'attack_speed' => 'int32',
        'bonus_armor_pen_percent' => 'int32',
        'bonus_magic_pen_percent' => 'int32',
        'cc_reduction' => 'int32',
        'cooldown_reduction' => 'int32',
        'health' => 'int32',
        'health_max' => 'int32',
        'health_regen' => 'int32',
        'lifesteal' => 'int32',
        'magic_pen' => 'int32',
        'magic_pen_percent' => 'int32',
        'magic_resist' => 'int32',
        'movement_speed' => 'int32',
        'omnivamp' => 'int32',
        'physical_vamp' => 'int32',
        'power' => 'int32',
        'power_max' => 'int32',
        'power_regen' => 'int32',
        'spell_vamp' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ability_haste' => 'abilityHaste',
        'ability_power' => 'abilityPower',
        'armor' => 'armor',
        'armor_pen' => 'armorPen',
        'armor_pen_percent' => 'armorPenPercent',
        'attack_damage' => 'attackDamage',
        'attack_speed' => 'attackSpeed',
        'bonus_armor_pen_percent' => 'bonusArmorPenPercent',
        'bonus_magic_pen_percent' => 'bonusMagicPenPercent',
        'cc_reduction' => 'ccReduction',
        'cooldown_reduction' => 'cooldownReduction',
        'health' => 'health',
        'health_max' => 'healthMax',
        'health_regen' => 'healthRegen',
        'lifesteal' => 'lifesteal',
        'magic_pen' => 'magicPen',
        'magic_pen_percent' => 'magicPenPercent',
        'magic_resist' => 'magicResist',
        'movement_speed' => 'movementSpeed',
        'omnivamp' => 'omnivamp',
        'physical_vamp' => 'physicalVamp',
        'power' => 'power',
        'power_max' => 'powerMax',
        'power_regen' => 'powerRegen',
        'spell_vamp' => 'spellVamp'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ability_haste' => 'setAbilityHaste',
        'ability_power' => 'setAbilityPower',
        'armor' => 'setArmor',
        'armor_pen' => 'setArmorPen',
        'armor_pen_percent' => 'setArmorPenPercent',
        'attack_damage' => 'setAttackDamage',
        'attack_speed' => 'setAttackSpeed',
        'bonus_armor_pen_percent' => 'setBonusArmorPenPercent',
        'bonus_magic_pen_percent' => 'setBonusMagicPenPercent',
        'cc_reduction' => 'setCcReduction',
        'cooldown_reduction' => 'setCooldownReduction',
        'health' => 'setHealth',
        'health_max' => 'setHealthMax',
        'health_regen' => 'setHealthRegen',
        'lifesteal' => 'setLifesteal',
        'magic_pen' => 'setMagicPen',
        'magic_pen_percent' => 'setMagicPenPercent',
        'magic_resist' => 'setMagicResist',
        'movement_speed' => 'setMovementSpeed',
        'omnivamp' => 'setOmnivamp',
        'physical_vamp' => 'setPhysicalVamp',
        'power' => 'setPower',
        'power_max' => 'setPowerMax',
        'power_regen' => 'setPowerRegen',
        'spell_vamp' => 'setSpellVamp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ability_haste' => 'getAbilityHaste',
        'ability_power' => 'getAbilityPower',
        'armor' => 'getArmor',
        'armor_pen' => 'getArmorPen',
        'armor_pen_percent' => 'getArmorPenPercent',
        'attack_damage' => 'getAttackDamage',
        'attack_speed' => 'getAttackSpeed',
        'bonus_armor_pen_percent' => 'getBonusArmorPenPercent',
        'bonus_magic_pen_percent' => 'getBonusMagicPenPercent',
        'cc_reduction' => 'getCcReduction',
        'cooldown_reduction' => 'getCooldownReduction',
        'health' => 'getHealth',
        'health_max' => 'getHealthMax',
        'health_regen' => 'getHealthRegen',
        'lifesteal' => 'getLifesteal',
        'magic_pen' => 'getMagicPen',
        'magic_pen_percent' => 'getMagicPenPercent',
        'magic_resist' => 'getMagicResist',
        'movement_speed' => 'getMovementSpeed',
        'omnivamp' => 'getOmnivamp',
        'physical_vamp' => 'getPhysicalVamp',
        'power' => 'getPower',
        'power_max' => 'getPowerMax',
        'power_regen' => 'getPowerRegen',
        'spell_vamp' => 'getSpellVamp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ability_haste'] = isset($data['ability_haste']) ? $data['ability_haste'] : null;
        $this->container['ability_power'] = isset($data['ability_power']) ? $data['ability_power'] : null;
        $this->container['armor'] = isset($data['armor']) ? $data['armor'] : null;
        $this->container['armor_pen'] = isset($data['armor_pen']) ? $data['armor_pen'] : null;
        $this->container['armor_pen_percent'] = isset($data['armor_pen_percent']) ? $data['armor_pen_percent'] : null;
        $this->container['attack_damage'] = isset($data['attack_damage']) ? $data['attack_damage'] : null;
        $this->container['attack_speed'] = isset($data['attack_speed']) ? $data['attack_speed'] : null;
        $this->container['bonus_armor_pen_percent'] = isset($data['bonus_armor_pen_percent']) ? $data['bonus_armor_pen_percent'] : null;
        $this->container['bonus_magic_pen_percent'] = isset($data['bonus_magic_pen_percent']) ? $data['bonus_magic_pen_percent'] : null;
        $this->container['cc_reduction'] = isset($data['cc_reduction']) ? $data['cc_reduction'] : null;
        $this->container['cooldown_reduction'] = isset($data['cooldown_reduction']) ? $data['cooldown_reduction'] : null;
        $this->container['health'] = isset($data['health']) ? $data['health'] : null;
        $this->container['health_max'] = isset($data['health_max']) ? $data['health_max'] : null;
        $this->container['health_regen'] = isset($data['health_regen']) ? $data['health_regen'] : null;
        $this->container['lifesteal'] = isset($data['lifesteal']) ? $data['lifesteal'] : null;
        $this->container['magic_pen'] = isset($data['magic_pen']) ? $data['magic_pen'] : null;
        $this->container['magic_pen_percent'] = isset($data['magic_pen_percent']) ? $data['magic_pen_percent'] : null;
        $this->container['magic_resist'] = isset($data['magic_resist']) ? $data['magic_resist'] : null;
        $this->container['movement_speed'] = isset($data['movement_speed']) ? $data['movement_speed'] : null;
        $this->container['omnivamp'] = isset($data['omnivamp']) ? $data['omnivamp'] : null;
        $this->container['physical_vamp'] = isset($data['physical_vamp']) ? $data['physical_vamp'] : null;
        $this->container['power'] = isset($data['power']) ? $data['power'] : null;
        $this->container['power_max'] = isset($data['power_max']) ? $data['power_max'] : null;
        $this->container['power_regen'] = isset($data['power_regen']) ? $data['power_regen'] : null;
        $this->container['spell_vamp'] = isset($data['spell_vamp']) ? $data['spell_vamp'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['ability_power'] === null) {
            $invalidProperties[] = "'ability_power' can't be null";
        }
        if ($this->container['armor'] === null) {
            $invalidProperties[] = "'armor' can't be null";
        }
        if ($this->container['armor_pen'] === null) {
            $invalidProperties[] = "'armor_pen' can't be null";
        }
        if ($this->container['armor_pen_percent'] === null) {
            $invalidProperties[] = "'armor_pen_percent' can't be null";
        }
        if ($this->container['attack_damage'] === null) {
            $invalidProperties[] = "'attack_damage' can't be null";
        }
        if ($this->container['attack_speed'] === null) {
            $invalidProperties[] = "'attack_speed' can't be null";
        }
        if ($this->container['bonus_armor_pen_percent'] === null) {
            $invalidProperties[] = "'bonus_armor_pen_percent' can't be null";
        }
        if ($this->container['bonus_magic_pen_percent'] === null) {
            $invalidProperties[] = "'bonus_magic_pen_percent' can't be null";
        }
        if ($this->container['cc_reduction'] === null) {
            $invalidProperties[] = "'cc_reduction' can't be null";
        }
        if ($this->container['cooldown_reduction'] === null) {
            $invalidProperties[] = "'cooldown_reduction' can't be null";
        }
        if ($this->container['health'] === null) {
            $invalidProperties[] = "'health' can't be null";
        }
        if ($this->container['health_max'] === null) {
            $invalidProperties[] = "'health_max' can't be null";
        }
        if ($this->container['health_regen'] === null) {
            $invalidProperties[] = "'health_regen' can't be null";
        }
        if ($this->container['lifesteal'] === null) {
            $invalidProperties[] = "'lifesteal' can't be null";
        }
        if ($this->container['magic_pen'] === null) {
            $invalidProperties[] = "'magic_pen' can't be null";
        }
        if ($this->container['magic_pen_percent'] === null) {
            $invalidProperties[] = "'magic_pen_percent' can't be null";
        }
        if ($this->container['magic_resist'] === null) {
            $invalidProperties[] = "'magic_resist' can't be null";
        }
        if ($this->container['movement_speed'] === null) {
            $invalidProperties[] = "'movement_speed' can't be null";
        }
        if ($this->container['power'] === null) {
            $invalidProperties[] = "'power' can't be null";
        }
        if ($this->container['power_max'] === null) {
            $invalidProperties[] = "'power_max' can't be null";
        }
        if ($this->container['power_regen'] === null) {
            $invalidProperties[] = "'power_regen' can't be null";
        }
        if ($this->container['spell_vamp'] === null) {
            $invalidProperties[] = "'spell_vamp' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ability_haste
     *
     * @return int
     */
    public function getAbilityHaste()
    {
        return $this->container['ability_haste'];
    }

    /**
     * Sets ability_haste
     *
     * @param int $ability_haste ability_haste
     *
     * @return $this
     */
    public function setAbilityHaste($ability_haste)
    {
        $this->container['ability_haste'] = $ability_haste;

        return $this;
    }

    /**
     * Gets ability_power
     *
     * @return int
     */
    public function getAbilityPower()
    {
        return $this->container['ability_power'];
    }

    /**
     * Sets ability_power
     *
     * @param int $ability_power ability_power
     *
     * @return $this
     */
    public function setAbilityPower($ability_power)
    {
        $this->container['ability_power'] = $ability_power;

        return $this;
    }

    /**
     * Gets armor
     *
     * @return int
     */
    public function getArmor()
    {
        return $this->container['armor'];
    }

    /**
     * Sets armor
     *
     * @param int $armor armor
     *
     * @return $this
     */
    public function setArmor($armor)
    {
        $this->container['armor'] = $armor;

        return $this;
    }

    /**
     * Gets armor_pen
     *
     * @return int
     */
    public function getArmorPen()
    {
        return $this->container['armor_pen'];
    }

    /**
     * Sets armor_pen
     *
     * @param int $armor_pen armor_pen
     *
     * @return $this
     */
    public function setArmorPen($armor_pen)
    {
        $this->container['armor_pen'] = $armor_pen;

        return $this;
    }

    /**
     * Gets armor_pen_percent
     *
     * @return int
     */
    public function getArmorPenPercent()
    {
        return $this->container['armor_pen_percent'];
    }

    /**
     * Sets armor_pen_percent
     *
     * @param int $armor_pen_percent armor_pen_percent
     *
     * @return $this
     */
    public function setArmorPenPercent($armor_pen_percent)
    {
        $this->container['armor_pen_percent'] = $armor_pen_percent;

        return $this;
    }

    /**
     * Gets attack_damage
     *
     * @return int
     */
    public function getAttackDamage()
    {
        return $this->container['attack_damage'];
    }

    /**
     * Sets attack_damage
     *
     * @param int $attack_damage attack_damage
     *
     * @return $this
     */
    public function setAttackDamage($attack_damage)
    {
        $this->container['attack_damage'] = $attack_damage;

        return $this;
    }

    /**
     * Gets attack_speed
     *
     * @return int
     */
    public function getAttackSpeed()
    {
        return $this->container['attack_speed'];
    }

    /**
     * Sets attack_speed
     *
     * @param int $attack_speed attack_speed
     *
     * @return $this
     */
    public function setAttackSpeed($attack_speed)
    {
        $this->container['attack_speed'] = $attack_speed;

        return $this;
    }

    /**
     * Gets bonus_armor_pen_percent
     *
     * @return int
     */
    public function getBonusArmorPenPercent()
    {
        return $this->container['bonus_armor_pen_percent'];
    }

    /**
     * Sets bonus_armor_pen_percent
     *
     * @param int $bonus_armor_pen_percent bonus_armor_pen_percent
     *
     * @return $this
     */
    public function setBonusArmorPenPercent($bonus_armor_pen_percent)
    {
        $this->container['bonus_armor_pen_percent'] = $bonus_armor_pen_percent;

        return $this;
    }

    /**
     * Gets bonus_magic_pen_percent
     *
     * @return int
     */
    public function getBonusMagicPenPercent()
    {
        return $this->container['bonus_magic_pen_percent'];
    }

    /**
     * Sets bonus_magic_pen_percent
     *
     * @param int $bonus_magic_pen_percent bonus_magic_pen_percent
     *
     * @return $this
     */
    public function setBonusMagicPenPercent($bonus_magic_pen_percent)
    {
        $this->container['bonus_magic_pen_percent'] = $bonus_magic_pen_percent;

        return $this;
    }

    /**
     * Gets cc_reduction
     *
     * @return int
     */
    public function getCcReduction()
    {
        return $this->container['cc_reduction'];
    }

    /**
     * Sets cc_reduction
     *
     * @param int $cc_reduction cc_reduction
     *
     * @return $this
     */
    public function setCcReduction($cc_reduction)
    {
        $this->container['cc_reduction'] = $cc_reduction;

        return $this;
    }

    /**
     * Gets cooldown_reduction
     *
     * @return int
     */
    public function getCooldownReduction()
    {
        return $this->container['cooldown_reduction'];
    }

    /**
     * Sets cooldown_reduction
     *
     * @param int $cooldown_reduction cooldown_reduction
     *
     * @return $this
     */
    public function setCooldownReduction($cooldown_reduction)
    {
        $this->container['cooldown_reduction'] = $cooldown_reduction;

        return $this;
    }

    /**
     * Gets health
     *
     * @return int
     */
    public function getHealth()
    {
        return $this->container['health'];
    }

    /**
     * Sets health
     *
     * @param int $health health
     *
     * @return $this
     */
    public function setHealth($health)
    {
        $this->container['health'] = $health;

        return $this;
    }

    /**
     * Gets health_max
     *
     * @return int
     */
    public function getHealthMax()
    {
        return $this->container['health_max'];
    }

    /**
     * Sets health_max
     *
     * @param int $health_max health_max
     *
     * @return $this
     */
    public function setHealthMax($health_max)
    {
        $this->container['health_max'] = $health_max;

        return $this;
    }

    /**
     * Gets health_regen
     *
     * @return int
     */
    public function getHealthRegen()
    {
        return $this->container['health_regen'];
    }

    /**
     * Sets health_regen
     *
     * @param int $health_regen health_regen
     *
     * @return $this
     */
    public function setHealthRegen($health_regen)
    {
        $this->container['health_regen'] = $health_regen;

        return $this;
    }

    /**
     * Gets lifesteal
     *
     * @return int
     */
    public function getLifesteal()
    {
        return $this->container['lifesteal'];
    }

    /**
     * Sets lifesteal
     *
     * @param int $lifesteal lifesteal
     *
     * @return $this
     */
    public function setLifesteal($lifesteal)
    {
        $this->container['lifesteal'] = $lifesteal;

        return $this;
    }

    /**
     * Gets magic_pen
     *
     * @return int
     */
    public function getMagicPen()
    {
        return $this->container['magic_pen'];
    }

    /**
     * Sets magic_pen
     *
     * @param int $magic_pen magic_pen
     *
     * @return $this
     */
    public function setMagicPen($magic_pen)
    {
        $this->container['magic_pen'] = $magic_pen;

        return $this;
    }

    /**
     * Gets magic_pen_percent
     *
     * @return int
     */
    public function getMagicPenPercent()
    {
        return $this->container['magic_pen_percent'];
    }

    /**
     * Sets magic_pen_percent
     *
     * @param int $magic_pen_percent magic_pen_percent
     *
     * @return $this
     */
    public function setMagicPenPercent($magic_pen_percent)
    {
        $this->container['magic_pen_percent'] = $magic_pen_percent;

        return $this;
    }

    /**
     * Gets magic_resist
     *
     * @return int
     */
    public function getMagicResist()
    {
        return $this->container['magic_resist'];
    }

    /**
     * Sets magic_resist
     *
     * @param int $magic_resist magic_resist
     *
     * @return $this
     */
    public function setMagicResist($magic_resist)
    {
        $this->container['magic_resist'] = $magic_resist;

        return $this;
    }

    /**
     * Gets movement_speed
     *
     * @return int
     */
    public function getMovementSpeed()
    {
        return $this->container['movement_speed'];
    }

    /**
     * Sets movement_speed
     *
     * @param int $movement_speed movement_speed
     *
     * @return $this
     */
    public function setMovementSpeed($movement_speed)
    {
        $this->container['movement_speed'] = $movement_speed;

        return $this;
    }

    /**
     * Gets omnivamp
     *
     * @return int
     */
    public function getOmnivamp()
    {
        return $this->container['omnivamp'];
    }

    /**
     * Sets omnivamp
     *
     * @param int $omnivamp omnivamp
     *
     * @return $this
     */
    public function setOmnivamp($omnivamp)
    {
        $this->container['omnivamp'] = $omnivamp;

        return $this;
    }

    /**
     * Gets physical_vamp
     *
     * @return int
     */
    public function getPhysicalVamp()
    {
        return $this->container['physical_vamp'];
    }

    /**
     * Sets physical_vamp
     *
     * @param int $physical_vamp physical_vamp
     *
     * @return $this
     */
    public function setPhysicalVamp($physical_vamp)
    {
        $this->container['physical_vamp'] = $physical_vamp;

        return $this;
    }

    /**
     * Gets power
     *
     * @return int
     */
    public function getPower()
    {
        return $this->container['power'];
    }

    /**
     * Sets power
     *
     * @param int $power power
     *
     * @return $this
     */
    public function setPower($power)
    {
        $this->container['power'] = $power;

        return $this;
    }

    /**
     * Gets power_max
     *
     * @return int
     */
    public function getPowerMax()
    {
        return $this->container['power_max'];
    }

    /**
     * Sets power_max
     *
     * @param int $power_max power_max
     *
     * @return $this
     */
    public function setPowerMax($power_max)
    {
        $this->container['power_max'] = $power_max;

        return $this;
    }

    /**
     * Gets power_regen
     *
     * @return int
     */
    public function getPowerRegen()
    {
        return $this->container['power_regen'];
    }

    /**
     * Sets power_regen
     *
     * @param int $power_regen power_regen
     *
     * @return $this
     */
    public function setPowerRegen($power_regen)
    {
        $this->container['power_regen'] = $power_regen;

        return $this;
    }

    /**
     * Gets spell_vamp
     *
     * @return int
     */
    public function getSpellVamp()
    {
        return $this->container['spell_vamp'];
    }

    /**
     * Sets spell_vamp
     *
     * @param int $spell_vamp spell_vamp
     *
     * @return $this
     */
    public function setSpellVamp($spell_vamp)
    {
        $this->container['spell_vamp'] = $spell_vamp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


