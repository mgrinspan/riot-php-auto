<?php
/**
 * ValRankedV1PlayerDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Riot API
 *
 * OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. ***
 *
 * OpenAPI spec version: b7cd9f901117fa03f7c4e5f9c0a954dac569f75a
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ValRankedV1PlayerDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ValRankedV1PlayerDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'val-ranked-v1.PlayerDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'puuid' => 'string',
        'game_name' => 'string',
        'tag_line' => 'string',
        'leaderboard_rank' => 'int',
        'ranked_rating' => 'int',
        'number_of_wins' => 'int',
        'competitive_tier' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'puuid' => null,
        'game_name' => null,
        'tag_line' => null,
        'leaderboard_rank' => 'int64',
        'ranked_rating' => 'int64',
        'number_of_wins' => 'int64',
        'competitive_tier' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'puuid' => 'puuid',
        'game_name' => 'gameName',
        'tag_line' => 'tagLine',
        'leaderboard_rank' => 'leaderboardRank',
        'ranked_rating' => 'rankedRating',
        'number_of_wins' => 'numberOfWins',
        'competitive_tier' => 'competitiveTier'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'puuid' => 'setPuuid',
        'game_name' => 'setGameName',
        'tag_line' => 'setTagLine',
        'leaderboard_rank' => 'setLeaderboardRank',
        'ranked_rating' => 'setRankedRating',
        'number_of_wins' => 'setNumberOfWins',
        'competitive_tier' => 'setCompetitiveTier'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'puuid' => 'getPuuid',
        'game_name' => 'getGameName',
        'tag_line' => 'getTagLine',
        'leaderboard_rank' => 'getLeaderboardRank',
        'ranked_rating' => 'getRankedRating',
        'number_of_wins' => 'getNumberOfWins',
        'competitive_tier' => 'getCompetitiveTier'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['puuid'] = isset($data['puuid']) ? $data['puuid'] : null;
        $this->container['game_name'] = isset($data['game_name']) ? $data['game_name'] : null;
        $this->container['tag_line'] = isset($data['tag_line']) ? $data['tag_line'] : null;
        $this->container['leaderboard_rank'] = isset($data['leaderboard_rank']) ? $data['leaderboard_rank'] : null;
        $this->container['ranked_rating'] = isset($data['ranked_rating']) ? $data['ranked_rating'] : null;
        $this->container['number_of_wins'] = isset($data['number_of_wins']) ? $data['number_of_wins'] : null;
        $this->container['competitive_tier'] = isset($data['competitive_tier']) ? $data['competitive_tier'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['leaderboard_rank'] === null) {
            $invalidProperties[] = "'leaderboard_rank' can't be null";
        }
        if ($this->container['ranked_rating'] === null) {
            $invalidProperties[] = "'ranked_rating' can't be null";
        }
        if ($this->container['number_of_wins'] === null) {
            $invalidProperties[] = "'number_of_wins' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets puuid
     *
     * @return string
     */
    public function getPuuid()
    {
        return $this->container['puuid'];
    }

    /**
     * Sets puuid
     *
     * @param string $puuid This field may be omitted if the player has been anonymized.
     *
     * @return $this
     */
    public function setPuuid($puuid)
    {
        $this->container['puuid'] = $puuid;

        return $this;
    }

    /**
     * Gets game_name
     *
     * @return string
     */
    public function getGameName()
    {
        return $this->container['game_name'];
    }

    /**
     * Sets game_name
     *
     * @param string $game_name This field may be omitted if the player has been anonymized.
     *
     * @return $this
     */
    public function setGameName($game_name)
    {
        $this->container['game_name'] = $game_name;

        return $this;
    }

    /**
     * Gets tag_line
     *
     * @return string
     */
    public function getTagLine()
    {
        return $this->container['tag_line'];
    }

    /**
     * Sets tag_line
     *
     * @param string $tag_line This field may be omitted if the player has been anonymized.
     *
     * @return $this
     */
    public function setTagLine($tag_line)
    {
        $this->container['tag_line'] = $tag_line;

        return $this;
    }

    /**
     * Gets leaderboard_rank
     *
     * @return int
     */
    public function getLeaderboardRank()
    {
        return $this->container['leaderboard_rank'];
    }

    /**
     * Sets leaderboard_rank
     *
     * @param int $leaderboard_rank leaderboard_rank
     *
     * @return $this
     */
    public function setLeaderboardRank($leaderboard_rank)
    {
        $this->container['leaderboard_rank'] = $leaderboard_rank;

        return $this;
    }

    /**
     * Gets ranked_rating
     *
     * @return int
     */
    public function getRankedRating()
    {
        return $this->container['ranked_rating'];
    }

    /**
     * Sets ranked_rating
     *
     * @param int $ranked_rating ranked_rating
     *
     * @return $this
     */
    public function setRankedRating($ranked_rating)
    {
        $this->container['ranked_rating'] = $ranked_rating;

        return $this;
    }

    /**
     * Gets number_of_wins
     *
     * @return int
     */
    public function getNumberOfWins()
    {
        return $this->container['number_of_wins'];
    }

    /**
     * Sets number_of_wins
     *
     * @param int $number_of_wins number_of_wins
     *
     * @return $this
     */
    public function setNumberOfWins($number_of_wins)
    {
        $this->container['number_of_wins'] = $number_of_wins;

        return $this;
    }

    /**
     * Gets competitive_tier
     *
     * @return int
     */
    public function getCompetitiveTier()
    {
        return $this->container['competitive_tier'];
    }

    /**
     * Sets competitive_tier
     *
     * @param int $competitive_tier competitive_tier
     *
     * @return $this
     */
    public function setCompetitiveTier($competitive_tier)
    {
        $this->container['competitive_tier'] = $competitive_tier;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


