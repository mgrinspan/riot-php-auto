<?php
/**
 * ValMatchV1MatchDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Riot API
 *
 * OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. ***
 *
 * OpenAPI spec version: b7cd9f901117fa03f7c4e5f9c0a954dac569f75a
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ValMatchV1MatchDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ValMatchV1MatchDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'val-match-v1.MatchDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'match_info' => '\Swagger\Client\Model\ValMatchV1MatchInfoDto',
        'players' => '\Swagger\Client\Model\ValMatchV1PlayerDto[]',
        'coaches' => '\Swagger\Client\Model\ValMatchV1CoachDto[]',
        'teams' => '\Swagger\Client\Model\ValMatchV1TeamDto[]',
        'round_results' => '\Swagger\Client\Model\ValMatchV1RoundResultDto[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'match_info' => null,
        'players' => null,
        'coaches' => null,
        'teams' => null,
        'round_results' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'match_info' => 'matchInfo',
        'players' => 'players',
        'coaches' => 'coaches',
        'teams' => 'teams',
        'round_results' => 'roundResults'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'match_info' => 'setMatchInfo',
        'players' => 'setPlayers',
        'coaches' => 'setCoaches',
        'teams' => 'setTeams',
        'round_results' => 'setRoundResults'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'match_info' => 'getMatchInfo',
        'players' => 'getPlayers',
        'coaches' => 'getCoaches',
        'teams' => 'getTeams',
        'round_results' => 'getRoundResults'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['match_info'] = isset($data['match_info']) ? $data['match_info'] : null;
        $this->container['players'] = isset($data['players']) ? $data['players'] : null;
        $this->container['coaches'] = isset($data['coaches']) ? $data['coaches'] : null;
        $this->container['teams'] = isset($data['teams']) ? $data['teams'] : null;
        $this->container['round_results'] = isset($data['round_results']) ? $data['round_results'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['match_info'] === null) {
            $invalidProperties[] = "'match_info' can't be null";
        }
        if ($this->container['players'] === null) {
            $invalidProperties[] = "'players' can't be null";
        }
        if ($this->container['coaches'] === null) {
            $invalidProperties[] = "'coaches' can't be null";
        }
        if ($this->container['teams'] === null) {
            $invalidProperties[] = "'teams' can't be null";
        }
        if ($this->container['round_results'] === null) {
            $invalidProperties[] = "'round_results' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets match_info
     *
     * @return \Swagger\Client\Model\ValMatchV1MatchInfoDto
     */
    public function getMatchInfo()
    {
        return $this->container['match_info'];
    }

    /**
     * Sets match_info
     *
     * @param \Swagger\Client\Model\ValMatchV1MatchInfoDto $match_info match_info
     *
     * @return $this
     */
    public function setMatchInfo($match_info)
    {
        $this->container['match_info'] = $match_info;

        return $this;
    }

    /**
     * Gets players
     *
     * @return \Swagger\Client\Model\ValMatchV1PlayerDto[]
     */
    public function getPlayers()
    {
        return $this->container['players'];
    }

    /**
     * Sets players
     *
     * @param \Swagger\Client\Model\ValMatchV1PlayerDto[] $players players
     *
     * @return $this
     */
    public function setPlayers($players)
    {
        $this->container['players'] = $players;

        return $this;
    }

    /**
     * Gets coaches
     *
     * @return \Swagger\Client\Model\ValMatchV1CoachDto[]
     */
    public function getCoaches()
    {
        return $this->container['coaches'];
    }

    /**
     * Sets coaches
     *
     * @param \Swagger\Client\Model\ValMatchV1CoachDto[] $coaches coaches
     *
     * @return $this
     */
    public function setCoaches($coaches)
    {
        $this->container['coaches'] = $coaches;

        return $this;
    }

    /**
     * Gets teams
     *
     * @return \Swagger\Client\Model\ValMatchV1TeamDto[]
     */
    public function getTeams()
    {
        return $this->container['teams'];
    }

    /**
     * Sets teams
     *
     * @param \Swagger\Client\Model\ValMatchV1TeamDto[] $teams teams
     *
     * @return $this
     */
    public function setTeams($teams)
    {
        $this->container['teams'] = $teams;

        return $this;
    }

    /**
     * Gets round_results
     *
     * @return \Swagger\Client\Model\ValMatchV1RoundResultDto[]
     */
    public function getRoundResults()
    {
        return $this->container['round_results'];
    }

    /**
     * Sets round_results
     *
     * @param \Swagger\Client\Model\ValMatchV1RoundResultDto[] $round_results round_results
     *
     * @return $this
     */
    public function setRoundResults($round_results)
    {
        $this->container['round_results'] = $round_results;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


