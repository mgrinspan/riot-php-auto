<?php
/**
 * TournamentV5TournamentGamesV5
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Riot API
 *
 * OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. ***
 *
 * OpenAPI spec version: b7cd9f901117fa03f7c4e5f9c0a954dac569f75a
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TournamentV5TournamentGamesV5 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TournamentV5TournamentGamesV5 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'tournament-v5.TournamentGamesV5';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'winning_team' => '\Swagger\Client\Model\TournamentV5TournamentTeamV5[]',
        'losing_team' => '\Swagger\Client\Model\TournamentV5TournamentTeamV5[]',
        'short_code' => 'string',
        'meta_data' => 'string',
        'game_id' => 'int',
        'game_name' => 'string',
        'game_type' => 'string',
        'game_map' => 'int',
        'game_mode' => 'string',
        'region' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'winning_team' => null,
        'losing_team' => null,
        'short_code' => null,
        'meta_data' => null,
        'game_id' => 'int64',
        'game_name' => null,
        'game_type' => null,
        'game_map' => 'int32',
        'game_mode' => null,
        'region' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'winning_team' => 'winningTeam',
        'losing_team' => 'losingTeam',
        'short_code' => 'shortCode',
        'meta_data' => 'metaData',
        'game_id' => 'gameId',
        'game_name' => 'gameName',
        'game_type' => 'gameType',
        'game_map' => 'gameMap',
        'game_mode' => 'gameMode',
        'region' => 'region'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'winning_team' => 'setWinningTeam',
        'losing_team' => 'setLosingTeam',
        'short_code' => 'setShortCode',
        'meta_data' => 'setMetaData',
        'game_id' => 'setGameId',
        'game_name' => 'setGameName',
        'game_type' => 'setGameType',
        'game_map' => 'setGameMap',
        'game_mode' => 'setGameMode',
        'region' => 'setRegion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'winning_team' => 'getWinningTeam',
        'losing_team' => 'getLosingTeam',
        'short_code' => 'getShortCode',
        'meta_data' => 'getMetaData',
        'game_id' => 'getGameId',
        'game_name' => 'getGameName',
        'game_type' => 'getGameType',
        'game_map' => 'getGameMap',
        'game_mode' => 'getGameMode',
        'region' => 'getRegion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['winning_team'] = isset($data['winning_team']) ? $data['winning_team'] : null;
        $this->container['losing_team'] = isset($data['losing_team']) ? $data['losing_team'] : null;
        $this->container['short_code'] = isset($data['short_code']) ? $data['short_code'] : null;
        $this->container['meta_data'] = isset($data['meta_data']) ? $data['meta_data'] : null;
        $this->container['game_id'] = isset($data['game_id']) ? $data['game_id'] : null;
        $this->container['game_name'] = isset($data['game_name']) ? $data['game_name'] : null;
        $this->container['game_type'] = isset($data['game_type']) ? $data['game_type'] : null;
        $this->container['game_map'] = isset($data['game_map']) ? $data['game_map'] : null;
        $this->container['game_mode'] = isset($data['game_mode']) ? $data['game_mode'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['winning_team'] === null) {
            $invalidProperties[] = "'winning_team' can't be null";
        }
        if ($this->container['losing_team'] === null) {
            $invalidProperties[] = "'losing_team' can't be null";
        }
        if ($this->container['short_code'] === null) {
            $invalidProperties[] = "'short_code' can't be null";
        }
        if ($this->container['game_id'] === null) {
            $invalidProperties[] = "'game_id' can't be null";
        }
        if ($this->container['game_name'] === null) {
            $invalidProperties[] = "'game_name' can't be null";
        }
        if ($this->container['game_type'] === null) {
            $invalidProperties[] = "'game_type' can't be null";
        }
        if ($this->container['game_map'] === null) {
            $invalidProperties[] = "'game_map' can't be null";
        }
        if ($this->container['game_mode'] === null) {
            $invalidProperties[] = "'game_mode' can't be null";
        }
        if ($this->container['region'] === null) {
            $invalidProperties[] = "'region' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets winning_team
     *
     * @return \Swagger\Client\Model\TournamentV5TournamentTeamV5[]
     */
    public function getWinningTeam()
    {
        return $this->container['winning_team'];
    }

    /**
     * Sets winning_team
     *
     * @param \Swagger\Client\Model\TournamentV5TournamentTeamV5[] $winning_team winning_team
     *
     * @return $this
     */
    public function setWinningTeam($winning_team)
    {
        $this->container['winning_team'] = $winning_team;

        return $this;
    }

    /**
     * Gets losing_team
     *
     * @return \Swagger\Client\Model\TournamentV5TournamentTeamV5[]
     */
    public function getLosingTeam()
    {
        return $this->container['losing_team'];
    }

    /**
     * Sets losing_team
     *
     * @param \Swagger\Client\Model\TournamentV5TournamentTeamV5[] $losing_team losing_team
     *
     * @return $this
     */
    public function setLosingTeam($losing_team)
    {
        $this->container['losing_team'] = $losing_team;

        return $this;
    }

    /**
     * Gets short_code
     *
     * @return string
     */
    public function getShortCode()
    {
        return $this->container['short_code'];
    }

    /**
     * Sets short_code
     *
     * @param string $short_code Tournament Code
     *
     * @return $this
     */
    public function setShortCode($short_code)
    {
        $this->container['short_code'] = $short_code;

        return $this;
    }

    /**
     * Gets meta_data
     *
     * @return string
     */
    public function getMetaData()
    {
        return $this->container['meta_data'];
    }

    /**
     * Sets meta_data
     *
     * @param string $meta_data Metadata for the TournamentCode
     *
     * @return $this
     */
    public function setMetaData($meta_data)
    {
        $this->container['meta_data'] = $meta_data;

        return $this;
    }

    /**
     * Gets game_id
     *
     * @return int
     */
    public function getGameId()
    {
        return $this->container['game_id'];
    }

    /**
     * Sets game_id
     *
     * @param int $game_id game_id
     *
     * @return $this
     */
    public function setGameId($game_id)
    {
        $this->container['game_id'] = $game_id;

        return $this;
    }

    /**
     * Gets game_name
     *
     * @return string
     */
    public function getGameName()
    {
        return $this->container['game_name'];
    }

    /**
     * Sets game_name
     *
     * @param string $game_name game_name
     *
     * @return $this
     */
    public function setGameName($game_name)
    {
        $this->container['game_name'] = $game_name;

        return $this;
    }

    /**
     * Gets game_type
     *
     * @return string
     */
    public function getGameType()
    {
        return $this->container['game_type'];
    }

    /**
     * Sets game_type
     *
     * @param string $game_type game_type
     *
     * @return $this
     */
    public function setGameType($game_type)
    {
        $this->container['game_type'] = $game_type;

        return $this;
    }

    /**
     * Gets game_map
     *
     * @return int
     */
    public function getGameMap()
    {
        return $this->container['game_map'];
    }

    /**
     * Sets game_map
     *
     * @param int $game_map Game Map ID
     *
     * @return $this
     */
    public function setGameMap($game_map)
    {
        $this->container['game_map'] = $game_map;

        return $this;
    }

    /**
     * Gets game_mode
     *
     * @return string
     */
    public function getGameMode()
    {
        return $this->container['game_mode'];
    }

    /**
     * Sets game_mode
     *
     * @param string $game_mode game_mode
     *
     * @return $this
     */
    public function setGameMode($game_mode)
    {
        $this->container['game_mode'] = $game_mode;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region Region of the game
     *
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


