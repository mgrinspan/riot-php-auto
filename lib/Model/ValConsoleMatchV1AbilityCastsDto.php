<?php
/**
 * ValConsoleMatchV1AbilityCastsDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Riot API
 *
 * OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. ***
 *
 * OpenAPI spec version: b7cd9f901117fa03f7c4e5f9c0a954dac569f75a
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ValConsoleMatchV1AbilityCastsDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ValConsoleMatchV1AbilityCastsDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'val-console-match-v1.AbilityCastsDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'grenade_casts' => 'int',
        'ability1_casts' => 'int',
        'ability2_casts' => 'int',
        'ultimate_casts' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'grenade_casts' => 'int32',
        'ability1_casts' => 'int32',
        'ability2_casts' => 'int32',
        'ultimate_casts' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'grenade_casts' => 'grenadeCasts',
        'ability1_casts' => 'ability1Casts',
        'ability2_casts' => 'ability2Casts',
        'ultimate_casts' => 'ultimateCasts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'grenade_casts' => 'setGrenadeCasts',
        'ability1_casts' => 'setAbility1Casts',
        'ability2_casts' => 'setAbility2Casts',
        'ultimate_casts' => 'setUltimateCasts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'grenade_casts' => 'getGrenadeCasts',
        'ability1_casts' => 'getAbility1Casts',
        'ability2_casts' => 'getAbility2Casts',
        'ultimate_casts' => 'getUltimateCasts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['grenade_casts'] = isset($data['grenade_casts']) ? $data['grenade_casts'] : null;
        $this->container['ability1_casts'] = isset($data['ability1_casts']) ? $data['ability1_casts'] : null;
        $this->container['ability2_casts'] = isset($data['ability2_casts']) ? $data['ability2_casts'] : null;
        $this->container['ultimate_casts'] = isset($data['ultimate_casts']) ? $data['ultimate_casts'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['grenade_casts'] === null) {
            $invalidProperties[] = "'grenade_casts' can't be null";
        }
        if ($this->container['ability1_casts'] === null) {
            $invalidProperties[] = "'ability1_casts' can't be null";
        }
        if ($this->container['ability2_casts'] === null) {
            $invalidProperties[] = "'ability2_casts' can't be null";
        }
        if ($this->container['ultimate_casts'] === null) {
            $invalidProperties[] = "'ultimate_casts' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets grenade_casts
     *
     * @return int
     */
    public function getGrenadeCasts()
    {
        return $this->container['grenade_casts'];
    }

    /**
     * Sets grenade_casts
     *
     * @param int $grenade_casts grenade_casts
     *
     * @return $this
     */
    public function setGrenadeCasts($grenade_casts)
    {
        $this->container['grenade_casts'] = $grenade_casts;

        return $this;
    }

    /**
     * Gets ability1_casts
     *
     * @return int
     */
    public function getAbility1Casts()
    {
        return $this->container['ability1_casts'];
    }

    /**
     * Sets ability1_casts
     *
     * @param int $ability1_casts ability1_casts
     *
     * @return $this
     */
    public function setAbility1Casts($ability1_casts)
    {
        $this->container['ability1_casts'] = $ability1_casts;

        return $this;
    }

    /**
     * Gets ability2_casts
     *
     * @return int
     */
    public function getAbility2Casts()
    {
        return $this->container['ability2_casts'];
    }

    /**
     * Sets ability2_casts
     *
     * @param int $ability2_casts ability2_casts
     *
     * @return $this
     */
    public function setAbility2Casts($ability2_casts)
    {
        $this->container['ability2_casts'] = $ability2_casts;

        return $this;
    }

    /**
     * Gets ultimate_casts
     *
     * @return int
     */
    public function getUltimateCasts()
    {
        return $this->container['ultimate_casts'];
    }

    /**
     * Sets ultimate_casts
     *
     * @param int $ultimate_casts ultimate_casts
     *
     * @return $this
     */
    public function setUltimateCasts($ultimate_casts)
    {
        $this->container['ultimate_casts'] = $ultimate_casts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


