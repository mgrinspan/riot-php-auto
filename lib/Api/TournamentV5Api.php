<?php
/**
 * TournamentV5Api
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Riot API
 *
 * OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. ***
 *
 * OpenAPI spec version: b7cd9f901117fa03f7c4e5f9c0a954dac569f75a
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * TournamentV5Api Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TournamentV5Api
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation tournamentV5CreateTournamentCode
     *
     * Create a tournament code for the given tournament.
     *
     * @param  int $tournament_id The tournament ID (required)
     * @param  \Swagger\Client\Model\TournamentV5TournamentCodeParametersV5 $tournament_code_parameters_v5 Metadata for the generated code (required)
     * @param  int $count The number of codes to create (max 1000) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]
     */
    public function tournamentV5CreateTournamentCode($tournament_id, $tournament_code_parameters_v5, $count = null)
    {
        list($response) = $this->tournamentV5CreateTournamentCodeWithHttpInfo($tournament_id, $tournament_code_parameters_v5, $count);
        return $response;
    }

    /**
     * Operation tournamentV5CreateTournamentCodeWithHttpInfo
     *
     * Create a tournament code for the given tournament.
     *
     * @param  int $tournament_id The tournament ID (required)
     * @param  \Swagger\Client\Model\TournamentV5TournamentCodeParametersV5 $tournament_code_parameters_v5 Metadata for the generated code (required)
     * @param  int $count The number of codes to create (max 1000) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function tournamentV5CreateTournamentCodeWithHttpInfo($tournament_id, $tournament_code_parameters_v5, $count = null)
    {
        $returnType = 'string[]';
        $request = $this->tournamentV5CreateTournamentCodeRequest($tournament_id, $tournament_code_parameters_v5, $count);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation tournamentV5CreateTournamentCodeAsync
     *
     * Create a tournament code for the given tournament.
     *
     * @param  int $tournament_id The tournament ID (required)
     * @param  \Swagger\Client\Model\TournamentV5TournamentCodeParametersV5 $tournament_code_parameters_v5 Metadata for the generated code (required)
     * @param  int $count The number of codes to create (max 1000) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tournamentV5CreateTournamentCodeAsync($tournament_id, $tournament_code_parameters_v5, $count = null)
    {
        return $this->tournamentV5CreateTournamentCodeAsyncWithHttpInfo($tournament_id, $tournament_code_parameters_v5, $count)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tournamentV5CreateTournamentCodeAsyncWithHttpInfo
     *
     * Create a tournament code for the given tournament.
     *
     * @param  int $tournament_id The tournament ID (required)
     * @param  \Swagger\Client\Model\TournamentV5TournamentCodeParametersV5 $tournament_code_parameters_v5 Metadata for the generated code (required)
     * @param  int $count The number of codes to create (max 1000) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tournamentV5CreateTournamentCodeAsyncWithHttpInfo($tournament_id, $tournament_code_parameters_v5, $count = null)
    {
        $returnType = 'string[]';
        $request = $this->tournamentV5CreateTournamentCodeRequest($tournament_id, $tournament_code_parameters_v5, $count);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tournamentV5CreateTournamentCode'
     *
     * @param  int $tournament_id The tournament ID (required)
     * @param  \Swagger\Client\Model\TournamentV5TournamentCodeParametersV5 $tournament_code_parameters_v5 Metadata for the generated code (required)
     * @param  int $count The number of codes to create (max 1000) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function tournamentV5CreateTournamentCodeRequest($tournament_id, $tournament_code_parameters_v5, $count = null)
    {
        // verify the required parameter 'tournament_id' is set
        if ($tournament_id === null || (is_array($tournament_id) && count($tournament_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tournament_id when calling tournamentV5CreateTournamentCode'
            );
        }
        // verify the required parameter 'tournament_code_parameters_v5' is set
        if ($tournament_code_parameters_v5 === null || (is_array($tournament_code_parameters_v5) && count($tournament_code_parameters_v5) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tournament_code_parameters_v5 when calling tournamentV5CreateTournamentCode'
            );
        }

        $resourcePath = '/lol/tournament/v5/codes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tournament_id !== null) {
            $queryParams['tournamentId'] = ObjectSerializer::toQueryValue($tournament_id);
        }
        // query params
        if ($count !== null) {
            $queryParams['count'] = ObjectSerializer::toQueryValue($count);
        }


        // body params
        $_tempBody = null;
        if (isset($tournament_code_parameters_v5)) {
            $_tempBody = $tournament_code_parameters_v5;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Riot-Token');
        if ($apiKey !== null) {
            $headers['X-Riot-Token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tournamentV5GetGames
     *
     * Get games details
     *
     * @param  string $tournament_code  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TournamentV5TournamentGamesV5[]
     */
    public function tournamentV5GetGames($tournament_code)
    {
        list($response) = $this->tournamentV5GetGamesWithHttpInfo($tournament_code);
        return $response;
    }

    /**
     * Operation tournamentV5GetGamesWithHttpInfo
     *
     * Get games details
     *
     * @param  string $tournament_code  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TournamentV5TournamentGamesV5[], HTTP status code, HTTP response headers (array of strings)
     */
    public function tournamentV5GetGamesWithHttpInfo($tournament_code)
    {
        $returnType = '\Swagger\Client\Model\TournamentV5TournamentGamesV5[]';
        $request = $this->tournamentV5GetGamesRequest($tournament_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\TournamentV5TournamentGamesV5[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation tournamentV5GetGamesAsync
     *
     * Get games details
     *
     * @param  string $tournament_code  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tournamentV5GetGamesAsync($tournament_code)
    {
        return $this->tournamentV5GetGamesAsyncWithHttpInfo($tournament_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tournamentV5GetGamesAsyncWithHttpInfo
     *
     * Get games details
     *
     * @param  string $tournament_code  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tournamentV5GetGamesAsyncWithHttpInfo($tournament_code)
    {
        $returnType = '\Swagger\Client\Model\TournamentV5TournamentGamesV5[]';
        $request = $this->tournamentV5GetGamesRequest($tournament_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tournamentV5GetGames'
     *
     * @param  string $tournament_code  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function tournamentV5GetGamesRequest($tournament_code)
    {
        // verify the required parameter 'tournament_code' is set
        if ($tournament_code === null || (is_array($tournament_code) && count($tournament_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tournament_code when calling tournamentV5GetGames'
            );
        }

        $resourcePath = '/lol/tournament/v5/games/by-code/{tournamentCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($tournament_code !== null) {
            $resourcePath = str_replace(
                '{' . 'tournamentCode' . '}',
                ObjectSerializer::toPathValue($tournament_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Riot-Token');
        if ($apiKey !== null) {
            $headers['X-Riot-Token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tournamentV5GetLobbyEventsByCode
     *
     * Gets a list of lobby events by tournament code.
     *
     * @param  string $tournament_code The short code to look up lobby events for (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TournamentV5LobbyEventV5DTOWrapper
     */
    public function tournamentV5GetLobbyEventsByCode($tournament_code)
    {
        list($response) = $this->tournamentV5GetLobbyEventsByCodeWithHttpInfo($tournament_code);
        return $response;
    }

    /**
     * Operation tournamentV5GetLobbyEventsByCodeWithHttpInfo
     *
     * Gets a list of lobby events by tournament code.
     *
     * @param  string $tournament_code The short code to look up lobby events for (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TournamentV5LobbyEventV5DTOWrapper, HTTP status code, HTTP response headers (array of strings)
     */
    public function tournamentV5GetLobbyEventsByCodeWithHttpInfo($tournament_code)
    {
        $returnType = '\Swagger\Client\Model\TournamentV5LobbyEventV5DTOWrapper';
        $request = $this->tournamentV5GetLobbyEventsByCodeRequest($tournament_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\TournamentV5LobbyEventV5DTOWrapper',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation tournamentV5GetLobbyEventsByCodeAsync
     *
     * Gets a list of lobby events by tournament code.
     *
     * @param  string $tournament_code The short code to look up lobby events for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tournamentV5GetLobbyEventsByCodeAsync($tournament_code)
    {
        return $this->tournamentV5GetLobbyEventsByCodeAsyncWithHttpInfo($tournament_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tournamentV5GetLobbyEventsByCodeAsyncWithHttpInfo
     *
     * Gets a list of lobby events by tournament code.
     *
     * @param  string $tournament_code The short code to look up lobby events for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tournamentV5GetLobbyEventsByCodeAsyncWithHttpInfo($tournament_code)
    {
        $returnType = '\Swagger\Client\Model\TournamentV5LobbyEventV5DTOWrapper';
        $request = $this->tournamentV5GetLobbyEventsByCodeRequest($tournament_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tournamentV5GetLobbyEventsByCode'
     *
     * @param  string $tournament_code The short code to look up lobby events for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function tournamentV5GetLobbyEventsByCodeRequest($tournament_code)
    {
        // verify the required parameter 'tournament_code' is set
        if ($tournament_code === null || (is_array($tournament_code) && count($tournament_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tournament_code when calling tournamentV5GetLobbyEventsByCode'
            );
        }

        $resourcePath = '/lol/tournament/v5/lobby-events/by-code/{tournamentCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($tournament_code !== null) {
            $resourcePath = str_replace(
                '{' . 'tournamentCode' . '}',
                ObjectSerializer::toPathValue($tournament_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Riot-Token');
        if ($apiKey !== null) {
            $headers['X-Riot-Token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tournamentV5GetTournamentCode
     *
     * Returns the tournament code DTO associated with a tournament code string.
     *
     * @param  string $tournament_code The tournament code string. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TournamentV5TournamentCodeV5DTO
     */
    public function tournamentV5GetTournamentCode($tournament_code)
    {
        list($response) = $this->tournamentV5GetTournamentCodeWithHttpInfo($tournament_code);
        return $response;
    }

    /**
     * Operation tournamentV5GetTournamentCodeWithHttpInfo
     *
     * Returns the tournament code DTO associated with a tournament code string.
     *
     * @param  string $tournament_code The tournament code string. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TournamentV5TournamentCodeV5DTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function tournamentV5GetTournamentCodeWithHttpInfo($tournament_code)
    {
        $returnType = '\Swagger\Client\Model\TournamentV5TournamentCodeV5DTO';
        $request = $this->tournamentV5GetTournamentCodeRequest($tournament_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\TournamentV5TournamentCodeV5DTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation tournamentV5GetTournamentCodeAsync
     *
     * Returns the tournament code DTO associated with a tournament code string.
     *
     * @param  string $tournament_code The tournament code string. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tournamentV5GetTournamentCodeAsync($tournament_code)
    {
        return $this->tournamentV5GetTournamentCodeAsyncWithHttpInfo($tournament_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tournamentV5GetTournamentCodeAsyncWithHttpInfo
     *
     * Returns the tournament code DTO associated with a tournament code string.
     *
     * @param  string $tournament_code The tournament code string. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tournamentV5GetTournamentCodeAsyncWithHttpInfo($tournament_code)
    {
        $returnType = '\Swagger\Client\Model\TournamentV5TournamentCodeV5DTO';
        $request = $this->tournamentV5GetTournamentCodeRequest($tournament_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tournamentV5GetTournamentCode'
     *
     * @param  string $tournament_code The tournament code string. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function tournamentV5GetTournamentCodeRequest($tournament_code)
    {
        // verify the required parameter 'tournament_code' is set
        if ($tournament_code === null || (is_array($tournament_code) && count($tournament_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tournament_code when calling tournamentV5GetTournamentCode'
            );
        }

        $resourcePath = '/lol/tournament/v5/codes/{tournamentCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($tournament_code !== null) {
            $resourcePath = str_replace(
                '{' . 'tournamentCode' . '}',
                ObjectSerializer::toPathValue($tournament_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Riot-Token');
        if ($apiKey !== null) {
            $headers['X-Riot-Token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tournamentV5RegisterProviderData
     *
     * Creates a tournament provider and returns its ID.
     *
     * @param  \Swagger\Client\Model\TournamentV5ProviderRegistrationParametersV5 $provider_registration_parameters_v5 The provider definition. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return int
     */
    public function tournamentV5RegisterProviderData($provider_registration_parameters_v5)
    {
        list($response) = $this->tournamentV5RegisterProviderDataWithHttpInfo($provider_registration_parameters_v5);
        return $response;
    }

    /**
     * Operation tournamentV5RegisterProviderDataWithHttpInfo
     *
     * Creates a tournament provider and returns its ID.
     *
     * @param  \Swagger\Client\Model\TournamentV5ProviderRegistrationParametersV5 $provider_registration_parameters_v5 The provider definition. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function tournamentV5RegisterProviderDataWithHttpInfo($provider_registration_parameters_v5)
    {
        $returnType = 'int';
        $request = $this->tournamentV5RegisterProviderDataRequest($provider_registration_parameters_v5);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation tournamentV5RegisterProviderDataAsync
     *
     * Creates a tournament provider and returns its ID.
     *
     * @param  \Swagger\Client\Model\TournamentV5ProviderRegistrationParametersV5 $provider_registration_parameters_v5 The provider definition. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tournamentV5RegisterProviderDataAsync($provider_registration_parameters_v5)
    {
        return $this->tournamentV5RegisterProviderDataAsyncWithHttpInfo($provider_registration_parameters_v5)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tournamentV5RegisterProviderDataAsyncWithHttpInfo
     *
     * Creates a tournament provider and returns its ID.
     *
     * @param  \Swagger\Client\Model\TournamentV5ProviderRegistrationParametersV5 $provider_registration_parameters_v5 The provider definition. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tournamentV5RegisterProviderDataAsyncWithHttpInfo($provider_registration_parameters_v5)
    {
        $returnType = 'int';
        $request = $this->tournamentV5RegisterProviderDataRequest($provider_registration_parameters_v5);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tournamentV5RegisterProviderData'
     *
     * @param  \Swagger\Client\Model\TournamentV5ProviderRegistrationParametersV5 $provider_registration_parameters_v5 The provider definition. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function tournamentV5RegisterProviderDataRequest($provider_registration_parameters_v5)
    {
        // verify the required parameter 'provider_registration_parameters_v5' is set
        if ($provider_registration_parameters_v5 === null || (is_array($provider_registration_parameters_v5) && count($provider_registration_parameters_v5) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $provider_registration_parameters_v5 when calling tournamentV5RegisterProviderData'
            );
        }

        $resourcePath = '/lol/tournament/v5/providers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($provider_registration_parameters_v5)) {
            $_tempBody = $provider_registration_parameters_v5;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Riot-Token');
        if ($apiKey !== null) {
            $headers['X-Riot-Token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tournamentV5RegisterTournament
     *
     * Creates a tournament and returns its ID.
     *
     * @param  \Swagger\Client\Model\TournamentV5TournamentRegistrationParametersV5 $tournament_registration_parameters_v5 The tournament definition. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return int
     */
    public function tournamentV5RegisterTournament($tournament_registration_parameters_v5)
    {
        list($response) = $this->tournamentV5RegisterTournamentWithHttpInfo($tournament_registration_parameters_v5);
        return $response;
    }

    /**
     * Operation tournamentV5RegisterTournamentWithHttpInfo
     *
     * Creates a tournament and returns its ID.
     *
     * @param  \Swagger\Client\Model\TournamentV5TournamentRegistrationParametersV5 $tournament_registration_parameters_v5 The tournament definition. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function tournamentV5RegisterTournamentWithHttpInfo($tournament_registration_parameters_v5)
    {
        $returnType = 'int';
        $request = $this->tournamentV5RegisterTournamentRequest($tournament_registration_parameters_v5);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation tournamentV5RegisterTournamentAsync
     *
     * Creates a tournament and returns its ID.
     *
     * @param  \Swagger\Client\Model\TournamentV5TournamentRegistrationParametersV5 $tournament_registration_parameters_v5 The tournament definition. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tournamentV5RegisterTournamentAsync($tournament_registration_parameters_v5)
    {
        return $this->tournamentV5RegisterTournamentAsyncWithHttpInfo($tournament_registration_parameters_v5)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tournamentV5RegisterTournamentAsyncWithHttpInfo
     *
     * Creates a tournament and returns its ID.
     *
     * @param  \Swagger\Client\Model\TournamentV5TournamentRegistrationParametersV5 $tournament_registration_parameters_v5 The tournament definition. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tournamentV5RegisterTournamentAsyncWithHttpInfo($tournament_registration_parameters_v5)
    {
        $returnType = 'int';
        $request = $this->tournamentV5RegisterTournamentRequest($tournament_registration_parameters_v5);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tournamentV5RegisterTournament'
     *
     * @param  \Swagger\Client\Model\TournamentV5TournamentRegistrationParametersV5 $tournament_registration_parameters_v5 The tournament definition. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function tournamentV5RegisterTournamentRequest($tournament_registration_parameters_v5)
    {
        // verify the required parameter 'tournament_registration_parameters_v5' is set
        if ($tournament_registration_parameters_v5 === null || (is_array($tournament_registration_parameters_v5) && count($tournament_registration_parameters_v5) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tournament_registration_parameters_v5 when calling tournamentV5RegisterTournament'
            );
        }

        $resourcePath = '/lol/tournament/v5/tournaments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($tournament_registration_parameters_v5)) {
            $_tempBody = $tournament_registration_parameters_v5;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Riot-Token');
        if ($apiKey !== null) {
            $headers['X-Riot-Token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tournamentV5UpdateCode
     *
     * Update the pick type, map, spectator type, or allowed puuids for a code.
     *
     * @param  string $tournament_code The tournament code to update (required)
     * @param  \Swagger\Client\Model\TournamentV5TournamentCodeUpdateParametersV5 $tournament_code_update_parameters_v5 The fields to update (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function tournamentV5UpdateCode($tournament_code, $tournament_code_update_parameters_v5 = null)
    {
        $this->tournamentV5UpdateCodeWithHttpInfo($tournament_code, $tournament_code_update_parameters_v5);
    }

    /**
     * Operation tournamentV5UpdateCodeWithHttpInfo
     *
     * Update the pick type, map, spectator type, or allowed puuids for a code.
     *
     * @param  string $tournament_code The tournament code to update (required)
     * @param  \Swagger\Client\Model\TournamentV5TournamentCodeUpdateParametersV5 $tournament_code_update_parameters_v5 The fields to update (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function tournamentV5UpdateCodeWithHttpInfo($tournament_code, $tournament_code_update_parameters_v5 = null)
    {
        $returnType = '';
        $request = $this->tournamentV5UpdateCodeRequest($tournament_code, $tournament_code_update_parameters_v5);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation tournamentV5UpdateCodeAsync
     *
     * Update the pick type, map, spectator type, or allowed puuids for a code.
     *
     * @param  string $tournament_code The tournament code to update (required)
     * @param  \Swagger\Client\Model\TournamentV5TournamentCodeUpdateParametersV5 $tournament_code_update_parameters_v5 The fields to update (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tournamentV5UpdateCodeAsync($tournament_code, $tournament_code_update_parameters_v5 = null)
    {
        return $this->tournamentV5UpdateCodeAsyncWithHttpInfo($tournament_code, $tournament_code_update_parameters_v5)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tournamentV5UpdateCodeAsyncWithHttpInfo
     *
     * Update the pick type, map, spectator type, or allowed puuids for a code.
     *
     * @param  string $tournament_code The tournament code to update (required)
     * @param  \Swagger\Client\Model\TournamentV5TournamentCodeUpdateParametersV5 $tournament_code_update_parameters_v5 The fields to update (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tournamentV5UpdateCodeAsyncWithHttpInfo($tournament_code, $tournament_code_update_parameters_v5 = null)
    {
        $returnType = '';
        $request = $this->tournamentV5UpdateCodeRequest($tournament_code, $tournament_code_update_parameters_v5);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tournamentV5UpdateCode'
     *
     * @param  string $tournament_code The tournament code to update (required)
     * @param  \Swagger\Client\Model\TournamentV5TournamentCodeUpdateParametersV5 $tournament_code_update_parameters_v5 The fields to update (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function tournamentV5UpdateCodeRequest($tournament_code, $tournament_code_update_parameters_v5 = null)
    {
        // verify the required parameter 'tournament_code' is set
        if ($tournament_code === null || (is_array($tournament_code) && count($tournament_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tournament_code when calling tournamentV5UpdateCode'
            );
        }

        $resourcePath = '/lol/tournament/v5/codes/{tournamentCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($tournament_code !== null) {
            $resourcePath = str_replace(
                '{' . 'tournamentCode' . '}',
                ObjectSerializer::toPathValue($tournament_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($tournament_code_update_parameters_v5)) {
            $_tempBody = $tournament_code_update_parameters_v5;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Riot-Token');
        if ($apiKey !== null) {
            $headers['X-Riot-Token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
